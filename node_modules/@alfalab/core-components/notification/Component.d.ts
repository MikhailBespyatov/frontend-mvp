/// <reference types="react" />
import React from 'react';
import { MouseEvent } from "react";
import { ToastPlateProps } from "../toast-plate";
type NotificationProps = ToastPlateProps & {
    /**
     * Управление видимостью компонента
     */
    visible?: boolean;
    /**
     * Отступ от верхнего края
     */
    offset?: number;
    /**
     * Время до закрытия компонента
     */
    autoCloseDelay?: number | null;
    /**
     * Использовать портал
     */
    usePortal?: boolean;
    /**
     * z-index компонента
     */
    zIndex?: number;
    /**
     * Обработчик события истечения времени до закрытия компонента
     */
    onCloseTimeout?: () => void;
    /**
     * Обработчик события наведения курсора на компонент
     */
    onMouseEnter?: (event?: MouseEvent<HTMLDivElement>) => void;
    /**
     * Обработчик события снятия курсора с компонента
     */
    onMouseLeave?: (event?: MouseEvent<HTMLDivElement>) => void;
    /**
     * Обработчик клика вне компонента
     */
    onClickOutside?: (event?: MouseEvent<any>) => void;
};
declare const Notification: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {
    className?: string | undefined;
    contentClassName?: string | undefined;
    children?: React.ReactNode;
    title?: React.ReactNode;
    badge?: "positive" | "attention" | "negative" | undefined;
    /**
     * Обработчик события наведения курсора на компонент
     */
    leftAddons?: React.ReactNode;
    actionButton?: React.ReactNode;
    dataTestId?: string | undefined;
    hasCloser?: boolean | undefined;
    block?: boolean | undefined;
    onClose?: ((event?: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent> | undefined) => void) | undefined;
    getBadgeIcons?: ((icons: import("../toast-plate").BadgeIcons) => import("../toast-plate").BadgeIcons) | undefined;
} & {
    /**
     * Управление видимостью компонента
     */
    visible?: boolean | undefined;
    /**
     * Отступ от верхнего края
     */
    offset?: number | undefined;
    /**
     * Время до закрытия компонента
     */
    autoCloseDelay?: number | null | undefined;
    /**
     * Использовать портал
     */
    usePortal?: boolean | undefined;
    /**
     * z-index компонента
     */
    zIndex?: number | undefined;
    /**
     * Обработчик события истечения времени до закрытия компонента
     */
    onCloseTimeout?: (() => void) | undefined;
    /**
     * Обработчик события наведения курсора на компонент
     */
    onMouseEnter?: ((event?: React.MouseEvent<HTMLDivElement, globalThis.MouseEvent> | undefined) => void) | undefined;
    /**
     * Обработчик события снятия курсора с компонента
     */
    onMouseLeave?: ((event?: React.MouseEvent<HTMLDivElement, globalThis.MouseEvent> | undefined) => void) | undefined;
    /**
     * Обработчик клика вне компонента
     */
    onClickOutside?: ((event?: React.MouseEvent<any, globalThis.MouseEvent> | undefined) => void) | undefined;
} & React.RefAttributes<HTMLDivElement>>;
export { NotificationProps, Notification };
