import cn from 'classnames';
import React, { useMemo } from 'react';
import { Typography } from '../../typography/modern';

var styles = {"component":"circular-progress-bar__component_fc66k","svg":"circular-progress-bar__svg_fc66k","title":"circular-progress-bar__title_fc66k","subtitle":"circular-progress-bar__subtitle_fc66k","l":"circular-progress-bar__l_fc66k","label":"circular-progress-bar__label_fc66k","m":"circular-progress-bar__m_fc66k","s":"circular-progress-bar__s_fc66k","backgroundCircle":"circular-progress-bar__backgroundCircle_fc66k","progressCircle":"circular-progress-bar__progressCircle_fc66k","positive":"circular-progress-bar__positive_fc66k","negative":"circular-progress-bar__negative_fc66k"};
require('./index.css');

const SIZES = {
    s: 96,
    m: 120,
    l: 144,
};
/**
 * Компонент круглого прогресс бара.
 */
const CircularProgressBar = ({ value, view = 'positive', size = 'm', className, dataTestId, title = value, subtitle, children, }) => {
    const memorized = useMemo(() => {
        const strokeWidth = 8;
        const maxProgress = 100;
        const minProgress = 0;
        const width = SIZES[size];
        const height = SIZES[size];
        const center = width / 2;
        const radius = center - strokeWidth / 2;
        const circumference = Math.PI * radius * 2;
        const progress = Math.min(Math.max(value, minProgress), maxProgress);
        const strokeDasharray = circumference.toFixed(3);
        const strokeDashoffset = (((100 - progress) / 100) * circumference).toFixed(3);
        return {
            width,
            height,
            center,
            radius,
            strokeDasharray,
            strokeDashoffset,
        };
    }, [value, size]);
    return (React.createElement("div", { className: cn(styles.component, styles[size], className), "data-test-id": dataTestId },
        React.createElement("svg", { viewBox: `0 0 ${memorized.width} ${memorized.height}`, className: styles.svg, xmlns: 'http://www.w3.org/2000/svg' },
            React.createElement("circle", { className: styles.backgroundCircle, cx: memorized.center, cy: memorized.center, r: memorized.radius }),
            React.createElement("circle", { className: cn(styles.progressCircle, styles[view]), cx: memorized.center, cy: memorized.center, r: memorized.radius, strokeDasharray: memorized.strokeDasharray, strokeDashoffset: memorized.strokeDashoffset, transform: `rotate(${-90} ${memorized.center} ${memorized.center})` })),
        React.createElement("div", { className: styles.label }, children || (React.createElement(React.Fragment, null,
            title && (React.createElement(Typography.Title, { className: styles.title, color: 'secondary', tag: 'div', view: size === 'l' ? 'small' : 'xsmall' }, title)),
            subtitle && (React.createElement(Typography.Text, { tag: 'div', className: styles.subtitle, color: 'primary', view: 'primary-small' }, subtitle)))))));
};

export { CircularProgressBar };
