Object.defineProperty(exports, '__esModule', { value: true });

var cn = require('classnames');
var React = require('react');
var coreComponentsTypography = require('../../typography/cssm');
var styles = require('./index.module.css');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var styles__default = /*#__PURE__*/_interopDefaultLegacy(styles);

var SIZES = {
    s: 96,
    m: 120,
    l: 144,
};
/**
 * Компонент круглого прогресс бара.
 */
var CircularProgressBar = function (_a) {
    var value = _a.value, _b = _a.view, view = _b === void 0 ? 'positive' : _b, _c = _a.size, size = _c === void 0 ? 'm' : _c, className = _a.className, dataTestId = _a.dataTestId, _d = _a.title, title = _d === void 0 ? value : _d, subtitle = _a.subtitle, children = _a.children;
    var memorized = React.useMemo(function () {
        var strokeWidth = 8;
        var maxProgress = 100;
        var minProgress = 0;
        var width = SIZES[size];
        var height = SIZES[size];
        var center = width / 2;
        var radius = center - strokeWidth / 2;
        var circumference = Math.PI * radius * 2;
        var progress = Math.min(Math.max(value, minProgress), maxProgress);
        var strokeDasharray = circumference.toFixed(3);
        var strokeDashoffset = (((100 - progress) / 100) * circumference).toFixed(3);
        return {
            width: width,
            height: height,
            center: center,
            radius: radius,
            strokeDasharray: strokeDasharray,
            strokeDashoffset: strokeDashoffset,
        };
    }, [value, size]);
    return (React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].component, styles__default['default'][size], className), "data-test-id": dataTestId },
        React__default['default'].createElement("svg", { viewBox: "0 0 " + memorized.width + " " + memorized.height, className: styles__default['default'].svg, xmlns: 'http://www.w3.org/2000/svg' },
            React__default['default'].createElement("circle", { className: styles__default['default'].backgroundCircle, cx: memorized.center, cy: memorized.center, r: memorized.radius }),
            React__default['default'].createElement("circle", { className: cn__default['default'](styles__default['default'].progressCircle, styles__default['default'][view]), cx: memorized.center, cy: memorized.center, r: memorized.radius, strokeDasharray: memorized.strokeDasharray, strokeDashoffset: memorized.strokeDashoffset, transform: "rotate(" + -90 + " " + memorized.center + " " + memorized.center + ")" })),
        React__default['default'].createElement("div", { className: styles__default['default'].label }, children || (React__default['default'].createElement(React__default['default'].Fragment, null,
            title && (React__default['default'].createElement(coreComponentsTypography.Typography.Title, { className: styles__default['default'].title, color: 'secondary', tag: 'div', view: size === 'l' ? 'small' : 'xsmall' }, title)),
            subtitle && (React__default['default'].createElement(coreComponentsTypography.Typography.Text, { tag: 'div', className: styles__default['default'].subtitle, color: 'primary', view: 'primary-small' }, subtitle)))))));
};

exports.CircularProgressBar = CircularProgressBar;
