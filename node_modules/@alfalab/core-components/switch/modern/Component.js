import React, { forwardRef, useRef, useCallback } from 'react';
import cn from 'classnames';
import mergeRefs from 'react-merge-refs';
import { useFocus } from '@alfalab/hooks';

var styles = {"component":"switch__component_j1p4y","start":"switch__start_j1p4y","center":"switch__center_j1p4y","addons":"switch__addons_j1p4y","block":"switch__block_j1p4y","switch":"switch__switch_j1p4y","content":"switch__content_j1p4y","label":"switch__label_j1p4y","hint":"switch__hint_j1p4y","reversed":"switch__reversed_j1p4y","checked":"switch__checked_j1p4y","disabled":"switch__disabled_j1p4y","inactive":"switch__inactive_j1p4y","focused":"switch__focused_j1p4y"};
require('./index.css');

const Switch = forwardRef(({ reversed = false, checked = false, align = 'start', addons, block, disabled, inactive, label, hint, name, value, className, onChange, dataTestId, ...restProps }, ref) => {
    const labelRef = useRef(null);
    const [focused] = useFocus(labelRef, 'keyboard');
    const handleChange = useCallback((e) => {
        if (onChange) {
            onChange(e, { checked: e.target.checked, name });
        }
    }, [onChange, name]);
    return (
    // eslint-disable-next-line jsx-a11y/label-has-associated-control
    React.createElement("label", { className: cn(styles.component, styles[align], className, {
            [styles.disabled]: disabled,
            [styles.inactive]: inactive,
            [styles.checked]: checked,
            [styles.reversed]: reversed,
            [styles.focused]: focused,
            [styles.block]: block,
        }), ref: mergeRefs([labelRef, ref]) },
        React.createElement("input", Object.assign({ type: 'checkbox', onChange: handleChange, disabled: disabled || inactive, checked: checked, name: name, value: value, "data-test-id": dataTestId }, restProps)),
        React.createElement("span", { className: styles.switch }),
        (label || hint) && (React.createElement("span", { className: styles.content },
            label && React.createElement("span", { className: styles.label }, label),
            hint && React.createElement("span", { className: styles.hint }, hint))),
        addons && React.createElement("span", { className: styles.addons }, addons)));
});

export { Switch };
