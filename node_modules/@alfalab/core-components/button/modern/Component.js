import React, { useRef, useState, useEffect } from 'react';
import cn from 'classnames';
import mergeRefs from 'react-merge-refs';
import { useFocus } from '@alfalab/hooks';
import { Loader } from '../../loader/modern';

var styles = {"component":"button__component_1m5fc","focused":"button__focused_1m5fc","loading":"button__loading_1m5fc","text":"button__text_1m5fc","addons":"button__addons_1m5fc","stretchText":"button__stretchText_1m5fc","loader":"button__loader_1m5fc","xxs":"button__xxs_1m5fc","iconOnly":"button__iconOnly_1m5fc","xs":"button__xs_1m5fc","s":"button__s_1m5fc","m":"button__m_1m5fc","l":"button__l_1m5fc","xl":"button__xl_1m5fc","withRightAddons":"button__withRightAddons_1m5fc","ghost":"button__ghost_1m5fc","withLeftAddons":"button__withLeftAddons_1m5fc","link":"button__link_1m5fc","block":"button__block_1m5fc","nowrap":"button__nowrap_1m5fc"};
require('./index.css');

var defaultColors = {"primary":"button__primary_1bm58","secondary":"button__secondary_1bm58","outlined":"button__outlined_1bm58","tertiary":"button__tertiary_1bm58","filled":"button__filled_1bm58","transparent":"button__transparent_1bm58","link":"button__link_1bm58","ghost":"button__ghost_1bm58","component":"button__component_1bm58","loading":"button__loading_1bm58"};
require('./default.css');

var invertedColors = {"primary":"button__primary_v2jga","secondary":"button__secondary_v2jga","outlined":"button__outlined_v2jga","tertiary":"button__tertiary_v2jga","filled":"button__filled_v2jga","transparent":"button__transparent_v2jga","link":"button__link_v2jga","ghost":"button__ghost_v2jga","component":"button__component_v2jga","loading":"button__loading_v2jga"};
require('./inverted.css');

const colorStyles = {
    default: defaultColors,
    inverted: invertedColors,
};
/**
 * Минимальное время отображения лоадера - 500мс,
 * чтобы при быстрых ответах от сервера кнопка не «моргала».
 */
const LOADER_MIN_DISPLAY_INTERVAL = 500;
const logWarning = (view) => {
    if (process.env.NODE_ENV !== 'development') {
        return;
    }
    const viewsMap = {
        filled: 'secondary',
        transparent: 'secondary',
        outlined: 'tertiary',
    };
    // eslint-disable-next-line no-console
    console.warn(
    // eslint-disable-next-line prefer-template
    `@alfalab/core-components/button: view='${view}' будет удален в следующих мажорных версиях. ` +
        `Используйте view='${viewsMap[view]}'. Чтобы поменять все кнопки на проекте разом, можно воспользоваться codemod: ` +
        'npx @alfalab/core-components-codemod --transformers=button-views src/**/*.tsx');
};
const Button = React.forwardRef(({ children, view = 'secondary', leftAddons, rightAddons, size = 'm', block = false, className, dataTestId, href, loading = false, nowrap = false, colors = 'default', Component = href ? 'a' : 'button', ...restProps }, ref) => {
    if (['outlined', 'filled', 'transparent'].includes(view)) {
        logWarning(view);
    }
    const buttonRef = useRef(null);
    const [focused] = useFocus(buttonRef, 'keyboard');
    const [loaderTimePassed, setLoaderTimePassed] = useState(true);
    const timerId = useRef(0);
    const showLoader = loading || !loaderTimePassed;
    const iconOnly = !children;
    const componentProps = {
        className: cn(styles.component, styles[view], styles[size], colorStyles[colors].component, colorStyles[colors][view], {
            [styles.focused]: focused,
            [styles.block]: block,
            [styles.iconOnly]: iconOnly,
            [styles.nowrap]: nowrap,
            [styles.loading]: showLoader,
            [styles.withRightAddons]: Boolean(rightAddons) && !iconOnly,
            [styles.withLeftAddons]: Boolean(leftAddons) && !iconOnly,
            [colorStyles[colors].loading]: showLoader,
        }, className),
        'data-test-id': dataTestId || null,
    };
    const buttonChildren = (React.createElement(React.Fragment, null,
        leftAddons && React.createElement("span", { className: styles.addons }, leftAddons),
        children && (React.createElement("span", { className: cn(styles.text, {
                [styles.stretchText]: !(leftAddons || rightAddons),
            }) }, children)),
        showLoader && React.createElement(Loader, { className: styles.loader }),
        rightAddons && React.createElement("span", { className: styles.addons }, rightAddons)));
    useEffect(() => {
        if (loading) {
            setLoaderTimePassed(false);
            timerId.current = window.setTimeout(() => {
                setLoaderTimePassed(true);
            }, LOADER_MIN_DISPLAY_INTERVAL);
        }
    }, [loading]);
    useEffect(() => {
        return () => {
            window.clearTimeout(timerId.current);
        };
    }, []);
    if (href) {
        const { target } = restProps;
        // Для совместимости с react-router-dom, меняем href на to
        const hrefProps = { [typeof Component === 'string' ? 'href' : 'to']: href };
        return (React.createElement(Component, Object.assign({ rel: target === '_blank' ? 'noreferrer noopener' : undefined }, componentProps, restProps, hrefProps, { ref: mergeRefs([buttonRef, ref]) }), buttonChildren));
    }
    const { disabled, type = 'button', ...restButtonProps } = restProps;
    return (React.createElement(Component, Object.assign({}, componentProps, restButtonProps, { type: type, disabled: disabled || showLoader, ref: mergeRefs([buttonRef, ref]) }), buttonChildren));
});
/**
 * Для отображения в сторибуке
 */
Button.defaultProps = {
    view: 'secondary',
    size: 'm',
    block: false,
    loading: false,
    nowrap: false,
};

export { Button, LOADER_MIN_DISPLAY_INTERVAL };
