import cn from 'classnames';
import React, { forwardRef, useCallback, useState, useEffect, Fragment } from 'react';
import { Input } from '../../input/esm';
import { getCurrencySymbol, formatAmount, THINSP } from '@alfalab/utils';
import { withSuffix } from '../../with-suffix/esm';
import { getAmountValueFromStr, getFormattedValue } from './utils/index.js';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var __assign = function () {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

var styles = {"container":"amount-input__container_1rb5e","bold":"amount-input__bold_1rb5e","input":"amount-input__input_1rb5e","suffixContainer":"amount-input__suffixContainer_1rb5e","filled":"amount-input__filled_1rb5e"};
require('./index.css');

var defaultColors = {"minorPartAndCurrency":"amount-input__minorPartAndCurrency_5f1fm"};
require('./default.css');

var invertedColors = {"minorPartAndCurrency":"amount-input__minorPartAndCurrency_1wf66"};
require('./inverted.css');

var colorStyles = {
    default: defaultColors,
    inverted: invertedColors,
};
/**
 * Инпут, позволяющий закрепить значок валюты
 */
var SuffixInput = withSuffix(Input);
/**
 * Компонент для ввода денежных значений
 */
var AmountInput = forwardRef(function (_a, ref) {
    var _b;
    var _c = _a.value, value = _c === void 0 ? null : _c, _d = _a.integerLength, integerLength = _d === void 0 ? 9 : _d, _e = _a.minority, minority = _e === void 0 ? 100 : _e, _f = _a.currency, currency = _f === void 0 ? 'RUR' : _f, _g = _a.suffix, suffix = _g === void 0 ? currency : _g, _h = _a.placeholder, placeholder = _h === void 0 ? "0\u2009" + (suffix === currency ? getCurrencySymbol(currency) || '' : suffix) : _h, _j = _a.integersOnly, integersOnly = _j === void 0 ? false : _j, _k = _a.bold, bold = _k === void 0 ? true : _k, _l = _a.colors, colors = _l === void 0 ? 'default' : _l, className = _a.className, focusedClassName = _a.focusedClassName, dataTestId = _a.dataTestId, _m = _a.clear, clear = _m === void 0 ? false : _m, onChange = _a.onChange, onClear = _a.onClear, restProps = __rest(_a, ["value", "integerLength", "minority", "currency", "suffix", "placeholder", "integersOnly", "bold", "colors", "className", "focusedClassName", "dataTestId", "clear", "onChange", "onClear"]);
    var getFormattedAmount = useCallback(function () {
        if (value === '' || value === null)
            return '';
        return formatAmount({
            value: +value,
            currency: currency,
            minority: minority,
            view: 'default',
        }).formatted;
    }, [currency, minority, value]);
    var _o = useState(getFormattedAmount()), inputValue = _o[0], setInputValue = _o[1];
    var currencySymbol = getCurrencySymbol(currency);
    useEffect(function () {
        var currentAmountValue = getAmountValueFromStr(inputValue, minority);
        if (currentAmountValue !== value) {
            return setInputValue(getFormattedAmount());
        }
        return function () { return undefined; };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [getFormattedAmount]);
    var handleChange = function (e) {
        var input = e.target;
        var enteredValue = input.value.replace(/\s/g, '').replace('.', ',');
        if (integersOnly) {
            enteredValue = enteredValue.split(',')[0];
        }
        var isCorrectEnteredValue = RegExp("(^[0-9]{1," + integerLength + "}(,([0-9]+)?)?$|^\\s*$)").test(enteredValue);
        if (isCorrectEnteredValue) {
            var newFormattedValue = getFormattedValue(enteredValue, currency, minority);
            if (newFormattedValue === inputValue) {
                var caret_1 = input.selectionStart;
                window.requestAnimationFrame(function () {
                    input.selectionStart = caret_1;
                    input.selectionEnd = caret_1;
                });
            }
            else {
                /**
                 * Поддержка положения каретки
                 * Поскольку при форматировании введенного значения могут появляться символы типа пробела
                 * или запятая - каретка прыгает в конец и ее необходимо ставить в правильное место
                 */
                // Узнаем длину оригинального инпута с условием обрезания лишних символов
                var _a = input.value.split(/\.|,/), head = _a[0], tail = _a[1];
                var notFormattedEnteredValueLength = head.length;
                if (tail) {
                    notFormattedEnteredValueLength += 1; // запятая или точка
                    notFormattedEnteredValueLength += tail.slice(0, minority.toString().length - 1).length; // символы в минорной части
                }
                var diff = newFormattedValue.length - notFormattedEnteredValueLength;
                var caret_2 = input.selectionStart + diff;
                window.requestAnimationFrame(function () {
                    input.selectionStart = caret_2;
                    input.selectionEnd = caret_2;
                });
            }
            setInputValue(newFormattedValue);
            if (onChange) {
                onChange(e, {
                    value: getAmountValueFromStr(newFormattedValue, minority),
                    valueString: newFormattedValue,
                });
            }
        }
        else {
            // Не двигаем каретку когда вставляется невалидный символ
            var caret_3 = input.selectionStart - 1;
            window.requestAnimationFrame(function () {
                input.selectionStart = caret_3;
                input.selectionEnd = caret_3;
            });
        }
    };
    var handleClear = useCallback(function (event) {
        setInputValue('');
        if (onClear) {
            onClear(event);
        }
    }, [onClear]);
    var _p = inputValue.split(','), majorPart = _p[0], minorPart = _p[1];
    return (React.createElement("div", { className: cn(styles.container, (_b = {},
            _b[styles.bold] = bold,
            _b[styles.filled] = Boolean(inputValue),
            _b)) },
        React.createElement(SuffixInput, __assign({}, restProps, { suffix: React.createElement(Fragment, null,
                majorPart,
                React.createElement("span", { className: colorStyles[colors].minorPartAndCurrency },
                    minorPart !== undefined && "," + minorPart,
                    THINSP,
                    suffix === currency ? currencySymbol : suffix)), suffixContainerClassName: styles.suffixContainer, clear: clear, placeholder: placeholder, value: inputValue, colors: colors, className: cn(styles.component, className), focusedClassName: focusedClassName, inputClassName: styles.input, onChange: handleChange, onClear: handleClear, inputMode: 'decimal', pattern: '[0-9\\s\\.,]*', dataTestId: dataTestId, ref: ref }))));
});

export { AmountInput };
