Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var cn = require('classnames');
var resizeObserver = require('resize-observer');
var ArrowDownMBlackIcon = require('@alfalab/icons-classic/ArrowDownMBlackIcon');
var ArrowUpMBlackIcon = require('@alfalab/icons-classic/ArrowUpMBlackIcon');
var coreComponentsLink = require('../../link/cssm');
var debounce = require('lodash.debounce');
var styles = require('./index.module.css');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);
var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);
var styles__default = /*#__PURE__*/_interopDefaultLegacy(styles);

var Collapse = React.forwardRef(function (_a, ref) {
    var _b, _c;
    var expanded = _a.expanded, collapsedLabel = _a.collapsedLabel, expandedLabel = _a.expandedLabel, children = _a.children, className = _a.className, id = _a.id, onTransitionEnd = _a.onTransitionEnd, onExpandedChange = _a.onExpandedChange, dataTestId = _a.dataTestId;
    var uncontrolled = expanded === undefined;
    var contentRef = React.useRef(null);
    var contentCaseRef = React.useRef(null);
    var _d = React.useState(expanded), expandedState = _d[0], setExpandedState = _d[1];
    var isExpanded = uncontrolled ? expandedState : expanded;
    var recalculate = React.useCallback(function () {
        var contentHeight;
        if (!contentCaseRef.current || !contentRef.current) {
            return;
        }
        if (isExpanded) {
            contentHeight = contentCaseRef.current.offsetHeight;
        }
        else {
            contentHeight = 0;
        }
        contentRef.current.style.height = contentHeight + "px";
    }, [isExpanded]);
    var handleTransitionEnd = React.useCallback(function () {
        if (onTransitionEnd)
            onTransitionEnd(expanded);
    }, [expanded, onTransitionEnd]);
    var handleExpandedChange = React.useCallback(function () {
        if (uncontrolled) {
            setExpandedState(!isExpanded);
        }
        if (onExpandedChange)
            onExpandedChange();
    }, [isExpanded, onExpandedChange, uncontrolled]);
    React.useEffect(function () {
        var handleResize = debounce__default['default'](function () { return recalculate(); }, 300);
        window.addEventListener('resize', handleResize);
        return function () { return window.removeEventListener('resize', handleResize); };
    }, [recalculate]);
    React.useEffect(function () {
        var observer = new resizeObserver.ResizeObserver(recalculate);
        if (contentCaseRef.current) {
            observer.observe(contentCaseRef.current);
        }
        return function () {
            observer.disconnect();
        };
    }, [recalculate]);
    React.useEffect(function () { return recalculate(); }, [isExpanded, recalculate]);
    var contentStyles = React.useMemo(function () {
        var _a;
        var contentHeight = (_a = contentRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight;
        return {
            height: isExpanded && !contentHeight ? '0px' : contentHeight + "px",
        };
    }, [isExpanded]);
    var ToggledIcon = isExpanded ? ArrowUpMBlackIcon.ArrowUpMBlackIcon : ArrowDownMBlackIcon.ArrowDownMBlackIcon;
    return (React__default['default'].createElement("div", { ref: ref, className: cn__default['default'](className, styles__default['default'].collapse), id: id, "data-test-id": dataTestId },
        React__default['default'].createElement("div", { ref: contentRef, className: cn__default['default'](styles__default['default'].content, (_b = {},
                _b[styles__default['default'].expandedContent] = isExpanded,
                _b)), style: contentStyles, onTransitionEnd: handleTransitionEnd },
            React__default['default'].createElement("div", { ref: contentCaseRef }, children)),
        (expandedLabel || collapsedLabel) && (React__default['default'].createElement(coreComponentsLink.Link, { className: cn__default['default']((_c = {}, _c[styles__default['default'].expandedLabel] = isExpanded, _c)), pseudo: true, onClick: handleExpandedChange, rightAddons: React__default['default'].createElement(ToggledIcon, null) }, isExpanded ? expandedLabel : collapsedLabel))));
});

exports.Collapse = Collapse;
