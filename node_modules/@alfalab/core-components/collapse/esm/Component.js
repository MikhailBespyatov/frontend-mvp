import React, { forwardRef, useRef, useState, useCallback, useEffect, useMemo } from 'react';
import cn from 'classnames';
import { ResizeObserver } from 'resize-observer';
import { ArrowDownMBlackIcon } from '@alfalab/icons-classic/ArrowDownMBlackIcon';
import { ArrowUpMBlackIcon } from '@alfalab/icons-classic/ArrowUpMBlackIcon';
import { Link } from '../../link/esm';
import debounce from 'lodash.debounce';

var styles = {"collapse":"collapse__collapse_u7iya","content":"collapse__content_u7iya","expandedContent":"collapse__expandedContent_u7iya","expandedLabel":"collapse__expandedLabel_u7iya"};
require('./index.css');

var Collapse = forwardRef(function (_a, ref) {
    var _b, _c;
    var expanded = _a.expanded, collapsedLabel = _a.collapsedLabel, expandedLabel = _a.expandedLabel, children = _a.children, className = _a.className, id = _a.id, onTransitionEnd = _a.onTransitionEnd, onExpandedChange = _a.onExpandedChange, dataTestId = _a.dataTestId;
    var uncontrolled = expanded === undefined;
    var contentRef = useRef(null);
    var contentCaseRef = useRef(null);
    var _d = useState(expanded), expandedState = _d[0], setExpandedState = _d[1];
    var isExpanded = uncontrolled ? expandedState : expanded;
    var recalculate = useCallback(function () {
        var contentHeight;
        if (!contentCaseRef.current || !contentRef.current) {
            return;
        }
        if (isExpanded) {
            contentHeight = contentCaseRef.current.offsetHeight;
        }
        else {
            contentHeight = 0;
        }
        contentRef.current.style.height = contentHeight + "px";
    }, [isExpanded]);
    var handleTransitionEnd = useCallback(function () {
        if (onTransitionEnd)
            onTransitionEnd(expanded);
    }, [expanded, onTransitionEnd]);
    var handleExpandedChange = useCallback(function () {
        if (uncontrolled) {
            setExpandedState(!isExpanded);
        }
        if (onExpandedChange)
            onExpandedChange();
    }, [isExpanded, onExpandedChange, uncontrolled]);
    useEffect(function () {
        var handleResize = debounce(function () { return recalculate(); }, 300);
        window.addEventListener('resize', handleResize);
        return function () { return window.removeEventListener('resize', handleResize); };
    }, [recalculate]);
    useEffect(function () {
        var observer = new ResizeObserver(recalculate);
        if (contentCaseRef.current) {
            observer.observe(contentCaseRef.current);
        }
        return function () {
            observer.disconnect();
        };
    }, [recalculate]);
    useEffect(function () { return recalculate(); }, [isExpanded, recalculate]);
    var contentStyles = useMemo(function () {
        var _a;
        var contentHeight = (_a = contentRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight;
        return {
            height: isExpanded && !contentHeight ? '0px' : contentHeight + "px",
        };
    }, [isExpanded]);
    var ToggledIcon = isExpanded ? ArrowUpMBlackIcon : ArrowDownMBlackIcon;
    return (React.createElement("div", { ref: ref, className: cn(className, styles.collapse), id: id, "data-test-id": dataTestId },
        React.createElement("div", { ref: contentRef, className: cn(styles.content, (_b = {},
                _b[styles.expandedContent] = isExpanded,
                _b)), style: contentStyles, onTransitionEnd: handleTransitionEnd },
            React.createElement("div", { ref: contentCaseRef }, children)),
        (expandedLabel || collapsedLabel) && (React.createElement(Link, { className: cn((_c = {}, _c[styles.expandedLabel] = isExpanded, _c)), pseudo: true, onClick: handleExpandedChange, rightAddons: React.createElement(ToggledIcon, null) }, isExpanded ? expandedLabel : collapsedLabel))));
});

export { Collapse };
