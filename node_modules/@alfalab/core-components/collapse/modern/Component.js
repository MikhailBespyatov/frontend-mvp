import React, { forwardRef, useRef, useState, useCallback, useEffect, useMemo } from 'react';
import cn from 'classnames';
import { ResizeObserver } from 'resize-observer';
import { ArrowDownMBlackIcon } from '@alfalab/icons-classic/ArrowDownMBlackIcon';
import { ArrowUpMBlackIcon } from '@alfalab/icons-classic/ArrowUpMBlackIcon';
import debounce from 'lodash.debounce';
import { Link } from '../../link/modern';

var styles = {"collapse":"collapse__collapse_u7iya","content":"collapse__content_u7iya","expandedContent":"collapse__expandedContent_u7iya","expandedLabel":"collapse__expandedLabel_u7iya"};
require('./index.css');

const Collapse = forwardRef(({ expanded, collapsedLabel, expandedLabel, children, className, id, onTransitionEnd, onExpandedChange, dataTestId, }, ref) => {
    const uncontrolled = expanded === undefined;
    const contentRef = useRef(null);
    const contentCaseRef = useRef(null);
    const [expandedState, setExpandedState] = useState(expanded);
    const isExpanded = uncontrolled ? expandedState : expanded;
    const recalculate = useCallback(() => {
        let contentHeight;
        if (!contentCaseRef.current || !contentRef.current) {
            return;
        }
        if (isExpanded) {
            contentHeight = contentCaseRef.current.offsetHeight;
        }
        else {
            contentHeight = 0;
        }
        contentRef.current.style.height = `${contentHeight}px`;
    }, [isExpanded]);
    const handleTransitionEnd = useCallback(() => {
        if (onTransitionEnd)
            onTransitionEnd(expanded);
    }, [expanded, onTransitionEnd]);
    const handleExpandedChange = useCallback(() => {
        if (uncontrolled) {
            setExpandedState(!isExpanded);
        }
        if (onExpandedChange)
            onExpandedChange();
    }, [isExpanded, onExpandedChange, uncontrolled]);
    useEffect(() => {
        const handleResize = debounce(() => recalculate(), 300);
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, [recalculate]);
    useEffect(() => {
        const observer = new ResizeObserver(recalculate);
        if (contentCaseRef.current) {
            observer.observe(contentCaseRef.current);
        }
        return () => {
            observer.disconnect();
        };
    }, [recalculate]);
    useEffect(() => recalculate(), [isExpanded, recalculate]);
    const contentStyles = useMemo(() => {
        const contentHeight = contentRef.current?.offsetHeight;
        return {
            height: isExpanded && !contentHeight ? '0px' : `${contentHeight}px`,
        };
    }, [isExpanded]);
    const ToggledIcon = isExpanded ? ArrowUpMBlackIcon : ArrowDownMBlackIcon;
    return (React.createElement("div", { ref: ref, className: cn(className, styles.collapse), id: id, "data-test-id": dataTestId },
        React.createElement("div", { ref: contentRef, className: cn(styles.content, {
                [styles.expandedContent]: isExpanded,
            }), style: contentStyles, onTransitionEnd: handleTransitionEnd },
            React.createElement("div", { ref: contentCaseRef }, children)),
        (expandedLabel || collapsedLabel) && (React.createElement(Link, { className: cn({ [styles.expandedLabel]: isExpanded }), pseudo: true, onClick: handleExpandedChange, rightAddons: React.createElement(ToggledIcon, null) }, isExpanded ? expandedLabel : collapsedLabel))));
});

export { Collapse };
