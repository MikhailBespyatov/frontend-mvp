Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../../tslib.es6-ce870b46.js');
var React = require('react');
var coreComponentsKeyboardFocusable = require('../../../../keyboard-focusable/cssm');
var cn = require('classnames');
require('compute-scroll-into-view');
require('../scrollable-container/index.module.css');
var components_scrollableContainer_Component = require('../scrollable-container/Component.js');
var useTabs = require('../../useTabs.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);

var PrimaryTabList = function (_a) {
    var size = _a.size, _b = _a.styles, styles = _b === void 0 ? {} : _b, className = _a.className, containerClassName = _a.containerClassName, _c = _a.titles, titles = _c === void 0 ? [] : _c, _d = _a.selectedId, selectedId = _d === void 0 ? titles.length ? titles[0].id : undefined : _d, _e = _a.scrollable, scrollable = _e === void 0 ? true : _e, onChange = _a.onChange, dataTestId = _a.dataTestId;
    var lineRef = React.useRef(null);
    var _f = useTabs.useTabs({
        titles: titles,
        selectedId: selectedId,
        onChange: onChange,
    }), selectedTab = _f.selectedTab, focusedTab = _f.focusedTab, getTabListItemProps = _f.getTabListItemProps;
    React.useEffect(function () {
        if (selectedTab && lineRef.current) {
            lineRef.current.style.width = selectedTab.offsetWidth + "px";
            lineRef.current.style.transform = "translateX(" + selectedTab.offsetLeft + "px)";
        }
    });
    var renderContent = function () { return (React__default['default'].createElement(React__default['default'].Fragment, null,
        titles.map(function (item, index) {
            if (item.hidden)
                return null;
            return (React__default['default'].createElement(coreComponentsKeyboardFocusable.KeyboardFocusable, { key: item.id }, function (ref, focused) {
                var _a;
                return (React__default['default'].createElement("button", tslib_es6.__assign({}, getTabListItemProps(index, ref), { type: 'button', className: cn__default['default'](styles.title, (_a = {},
                        _a[styles.selected] = item.id === selectedId,
                        _a[styles.disabled] = item.disabled,
                        _a)) }),
                    React__default['default'].createElement("span", { className: focused ? styles.focused : undefined }, item.title),
                    item.rightAddons && (React__default['default'].createElement("span", { className: styles.rightAddons }, item.rightAddons))));
            }));
        }),
        React__default['default'].createElement("div", { className: styles.line, ref: lineRef }))); };
    return (React__default['default'].createElement("div", { role: 'tablist', "data-test-id": dataTestId, className: cn__default['default'](styles.component, className, size && styles[size]) }, scrollable ? (React__default['default'].createElement(components_scrollableContainer_Component.ScrollableContainer, { activeChild: focusedTab || selectedTab, containerClassName: containerClassName }, renderContent())) : (React__default['default'].createElement("div", { className: cn__default['default'](styles.container, containerClassName) }, renderContent()))));
};

exports.PrimaryTabList = PrimaryTabList;
