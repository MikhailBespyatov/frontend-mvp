import React, { useRef, useEffect } from 'react';
import cn from 'classnames';
import 'compute-scroll-into-view';
import { KeyboardFocusable } from '../../../../keyboard-focusable/modern';
import { ScrollableContainer } from '../scrollable-container/Component.js';
import { useTabs } from '../../useTabs.js';

const PrimaryTabList = ({ size, styles = {}, className, containerClassName, titles = [], selectedId = titles.length ? titles[0].id : undefined, scrollable = true, onChange, dataTestId, }) => {
    const lineRef = useRef(null);
    const { selectedTab, focusedTab, getTabListItemProps } = useTabs({
        titles,
        selectedId,
        onChange,
    });
    useEffect(() => {
        if (selectedTab && lineRef.current) {
            lineRef.current.style.width = `${selectedTab.offsetWidth}px`;
            lineRef.current.style.transform = `translateX(${selectedTab.offsetLeft}px)`;
        }
    });
    const renderContent = () => (React.createElement(React.Fragment, null,
        titles.map((item, index) => {
            if (item.hidden)
                return null;
            return (React.createElement(KeyboardFocusable, { key: item.id }, (ref, focused) => (React.createElement("button", Object.assign({}, getTabListItemProps(index, ref), { type: 'button', className: cn(styles.title, {
                    [styles.selected]: item.id === selectedId,
                    [styles.disabled]: item.disabled,
                }) }),
                React.createElement("span", { className: focused ? styles.focused : undefined }, item.title),
                item.rightAddons && (React.createElement("span", { className: styles.rightAddons }, item.rightAddons))))));
        }),
        React.createElement("div", { className: styles.line, ref: lineRef })));
    return (React.createElement("div", { role: 'tablist', "data-test-id": dataTestId, className: cn(styles.component, className, size && styles[size]) }, scrollable ? (React.createElement(ScrollableContainer, { activeChild: focusedTab || selectedTab, containerClassName: containerClassName }, renderContent())) : (React.createElement("div", { className: cn(styles.container, containerClassName) }, renderContent()))));
};

export { PrimaryTabList };
