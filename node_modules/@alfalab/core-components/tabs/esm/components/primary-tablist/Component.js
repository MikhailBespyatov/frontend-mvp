import { a as __assign } from '../../tslib.es6-44aaeed8.js';
import React, { useRef, useEffect } from 'react';
import { KeyboardFocusable } from '../../../../keyboard-focusable/esm';
import cn from 'classnames';
import 'compute-scroll-into-view';
import { ScrollableContainer } from '../scrollable-container/Component.js';
import { useTabs } from '../../useTabs.js';

var PrimaryTabList = function (_a) {
    var size = _a.size, _b = _a.styles, styles = _b === void 0 ? {} : _b, className = _a.className, containerClassName = _a.containerClassName, _c = _a.titles, titles = _c === void 0 ? [] : _c, _d = _a.selectedId, selectedId = _d === void 0 ? titles.length ? titles[0].id : undefined : _d, _e = _a.scrollable, scrollable = _e === void 0 ? true : _e, onChange = _a.onChange, dataTestId = _a.dataTestId;
    var lineRef = useRef(null);
    var _f = useTabs({
        titles: titles,
        selectedId: selectedId,
        onChange: onChange,
    }), selectedTab = _f.selectedTab, focusedTab = _f.focusedTab, getTabListItemProps = _f.getTabListItemProps;
    useEffect(function () {
        if (selectedTab && lineRef.current) {
            lineRef.current.style.width = selectedTab.offsetWidth + "px";
            lineRef.current.style.transform = "translateX(" + selectedTab.offsetLeft + "px)";
        }
    });
    var renderContent = function () { return (React.createElement(React.Fragment, null,
        titles.map(function (item, index) {
            if (item.hidden)
                return null;
            return (React.createElement(KeyboardFocusable, { key: item.id }, function (ref, focused) {
                var _a;
                return (React.createElement("button", __assign({}, getTabListItemProps(index, ref), { type: 'button', className: cn(styles.title, (_a = {},
                        _a[styles.selected] = item.id === selectedId,
                        _a[styles.disabled] = item.disabled,
                        _a)) }),
                    React.createElement("span", { className: focused ? styles.focused : undefined }, item.title),
                    item.rightAddons && (React.createElement("span", { className: styles.rightAddons }, item.rightAddons))));
            }));
        }),
        React.createElement("div", { className: styles.line, ref: lineRef }))); };
    return (React.createElement("div", { role: 'tablist', "data-test-id": dataTestId, className: cn(styles.component, className, size && styles[size]) }, scrollable ? (React.createElement(ScrollableContainer, { activeChild: focusedTab || selectedTab, containerClassName: containerClassName }, renderContent())) : (React.createElement("div", { className: cn(styles.container, containerClassName) }, renderContent()))));
};

export { PrimaryTabList };
