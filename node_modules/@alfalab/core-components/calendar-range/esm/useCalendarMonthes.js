import { useState, useCallback } from 'react';
import { startOfMonth, addMonths, subMonths } from 'date-fns';

function useCalendarMonthes(_a) {
    var inputValueFrom = _a.inputValueFrom, inputValueTo = _a.inputValueTo, defaultMonth = _a.defaultMonth, isPopover = _a.isPopover;
    var initialMonthFrom = (function () {
        if (inputValueFrom.value && inputValueFrom.date) {
            return startOfMonth(inputValueFrom.date).getTime();
        }
        return defaultMonth;
    })();
    var initialMonthTo = (function () {
        if (inputValueTo.value && inputValueTo.date) {
            return startOfMonth(inputValueTo.date).getTime();
        }
        return isPopover ? initialMonthFrom : addMonths(initialMonthFrom, 1).getTime();
    })();
    var _b = useState(initialMonthFrom), monthFrom = _b[0], setMonthFrom = _b[1];
    var _c = useState(initialMonthTo), monthTo = _c[0], setMonthTo = _c[1];
    var handleMonthFromChange = useCallback(function (newMonthFrom) {
        setMonthFrom(newMonthFrom);
        if (!isPopover) {
            var nextMonth = addMonths(newMonthFrom, 1).getTime();
            setMonthTo(nextMonth);
            return;
        }
        if (!inputValueTo.date) {
            setMonthTo(newMonthFrom);
        }
    }, [isPopover, setMonthFrom, setMonthTo, inputValueTo]);
    var handleMonthToChange = useCallback(function (newMonthTo) {
        setMonthTo(newMonthTo);
        if (!isPopover) {
            var prevMonth = subMonths(newMonthTo, 1).getTime();
            setMonthFrom(prevMonth);
            return;
        }
        if (!inputValueFrom.date) {
            setMonthFrom(newMonthTo);
        }
    }, [isPopover, setMonthFrom, setMonthTo, inputValueFrom]);
    return {
        monthFrom: monthFrom,
        monthTo: monthTo,
        handleMonthFromChange: handleMonthFromChange,
        handleMonthToChange: handleMonthToChange,
    };
}

export { useCalendarMonthes };
