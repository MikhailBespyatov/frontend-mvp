import React, { forwardRef, useState, useRef, useCallback, useEffect } from 'react';
import '../../backdrop/esm';
import { S as SwipeableBackdrop, _ as __assign } from './Component-dc15b943.js';
import cn from 'classnames';
import { useSwipeable } from 'react-swipeable';
import { BaseModal } from '../../base-modal/esm';
import { Typography } from '../../typography/esm';
import { Footer } from './components/footer/Component.js';

var styles = {"modal":"bottom-sheet__modal_1231f","component":"bottom-sheet__component_1231f","withTransition":"bottom-sheet__withTransition_1231f","marker":"bottom-sheet__marker_1231f","scrollableContainer":"bottom-sheet__scrollableContainer_1231f","withPadding":"bottom-sheet__withPadding_1231f","content":"bottom-sheet__content_1231f","title":"bottom-sheet__title_1231f","scrollLocked":"bottom-sheet__scrollLocked_1231f","appear":"bottom-sheet__appear_1231f","enter":"bottom-sheet__enter_1231f","appearActive":"bottom-sheet__appearActive_1231f","enterActive":"bottom-sheet__enterActive_1231f","enterDone":"bottom-sheet__enterDone_1231f","appearDone":"bottom-sheet__appearDone_1231f","exit":"bottom-sheet__exit_1231f","exitActive":"bottom-sheet__exitActive_1231f"};
require('./index.css');

var TIMEOUT = 300;
var SWIPE_CLOSE_VELOCITY = 0.4;
var MIN_BACKDROP_OPACITY = 0.2;
var CLOSE_OFFSET = 0.2;
var BottomSheet = forwardRef(function (_a, ref) {
    var _b, _c;
    var open = _a.open, title = _a.title, actionButton = _a.actionButton, contentClassName = _a.contentClassName, className = _a.className, children = _a.children, zIndex = _a.zIndex, _d = _a.transitionProps, transitionProps = _d === void 0 ? {} : _d, dataTestId = _a.dataTestId, _e = _a.desktopSwipeable, trackMouse = _e === void 0 ? false : _e, onClose = _a.onClose;
    var _f = useState(0), sheetOffset = _f[0], setSheetOffset = _f[1];
    var _g = useState(1), backdropOpacity = _g[0], setBackdropOpacity = _g[1];
    var _h = useState(false), scrollLocked = _h[0], setScrollLocked = _h[1];
    var sheetHeight = useRef(0);
    var scrollableContainer = useRef(null);
    var scrollableContainerScrollValue = useRef(0);
    var getBackdropOpacity = function (offset) {
        if (sheetHeight.current === 0)
            return MIN_BACKDROP_OPACITY;
        var opacity = 1 - (1 - MIN_BACKDROP_OPACITY) * (offset / sheetHeight.current);
        return Number(opacity.toFixed(2));
    };
    var getSheetOffset = function (deltaY) {
        var offset = deltaY > 0 ? 0 : -deltaY;
        offset -= scrollableContainerScrollValue.current;
        return Math.floor(Math.max(0, offset));
    };
    /**
     * Если контент внутри шторки скроллится - то шторка не должна свайпаться
     */
    var shouldSkipSwiping = function () {
        if (!scrollableContainer.current) {
            return false;
        }
        if (!scrollableContainerScrollValue.current) {
            scrollableContainerScrollValue.current = Math.floor(scrollableContainer.current.scrollTop);
        }
        return scrollableContainer.current.scrollTop > 0;
    };
    var handleBackdropSwipedDown = function (_a) {
        var velocity = _a.velocity;
        if (velocity > SWIPE_CLOSE_VELOCITY) {
            onClose();
        }
    };
    var handleSheetSwipedDown = function (_a) {
        var velocity = _a.velocity;
        if (shouldSkipSwiping()) {
            return;
        }
        var shouldClose = sheetOffset > sheetHeight.current * CLOSE_OFFSET || velocity > SWIPE_CLOSE_VELOCITY;
        if (shouldClose) {
            onClose();
        }
        else {
            setSheetOffset(0);
            setBackdropOpacity(1);
        }
    };
    var handleSheetSwiped = function () {
        setScrollLocked(false);
        scrollableContainerScrollValue.current = 0;
    };
    var handleSheetSwiping = function (_a) {
        var deltaY = _a.deltaY;
        if (shouldSkipSwiping()) {
            return;
        }
        var offset = getSheetOffset(deltaY);
        var opacity = getBackdropOpacity(offset);
        setSheetOffset(offset);
        setBackdropOpacity(opacity);
        /**
         * Если шторка начинает свайпаться, то блокируем скролл внутри нее
         */
        if (offset > 0) {
            setScrollLocked(true);
        }
    };
    var backdropSwipeablehandlers = useSwipeable({
        onSwipedDown: handleBackdropSwipedDown,
        delta: 100,
        trackMouse: trackMouse,
    });
    var sheetSwipeablehandlers = useSwipeable({
        onSwiping: handleSheetSwiping,
        onSwipedDown: handleSheetSwipedDown,
        onSwiped: handleSheetSwiped,
        delta: 5,
        trackMouse: trackMouse,
    });
    var handleExited = useCallback(function (node) {
        setBackdropOpacity(1);
        if (transitionProps.onExited) {
            transitionProps.onExited(node);
        }
    }, [transitionProps]);
    var handleEntered = useCallback(function (node, isAppearing) {
        if (!sheetHeight.current) {
            sheetHeight.current = node.getBoundingClientRect().height;
        }
        setBackdropOpacity(1);
        if (transitionProps.onEntered) {
            transitionProps.onEntered(node, isAppearing);
        }
    }, [transitionProps]);
    useEffect(function () {
        if (!open) {
            setSheetOffset(0);
        }
    }, [open]);
    var getSwipeStyles = function () { return ({
        transform: sheetOffset ? "translateY(" + sheetOffset + "px)" : '',
    }); };
    return (React.createElement(BaseModal, { open: open, ref: ref, dataTestId: dataTestId, zIndex: zIndex, onClose: onClose, scrollHandler: scrollableContainer, Backdrop: SwipeableBackdrop, backdropProps: {
            opacity: backdropOpacity,
            handlers: backdropSwipeablehandlers,
            opacityTimeout: TIMEOUT,
        }, className: styles.modal, transitionProps: __assign(__assign({ appear: true, timeout: TIMEOUT, classNames: styles }, transitionProps), { onExited: handleExited, onEntered: handleEntered }) },
        React.createElement("div", __assign({ className: cn(styles.component, className, (_b = {},
                _b[styles.withTransition] = !sheetOffset,
                _b)), style: getSwipeStyles() }, sheetSwipeablehandlers),
            React.createElement("div", { className: styles.marker }),
            React.createElement("div", { className: cn(styles.scrollableContainer, (_c = {},
                    _c[styles.scrollLocked] = scrollLocked,
                    _c[styles.withPadding] = !actionButton,
                    _c)), ref: scrollableContainer },
                title && (React.createElement(Typography.Title, { view: 'small', font: 'system', tag: 'h2', className: styles.title, color: 'primary' }, title)),
                React.createElement("div", { className: cn(styles.content, contentClassName) }, children),
                actionButton && React.createElement(Footer, null, actionButton)))));
});

export { BottomSheet, CLOSE_OFFSET };
