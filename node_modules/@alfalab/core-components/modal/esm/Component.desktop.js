import { _ as __rest, a as __assign } from './tslib.es6-327e6722.js';
import React, { forwardRef, useRef, useCallback, isValidElement, cloneElement } from 'react';
import cn from 'classnames';
import { BaseModal } from '../../base-modal/esm';
import mergeRefs from 'react-merge-refs';
import './Context.js';
import '../../button/esm';
import { Closer } from './components/closer/Component.js';
import './components/header/Component.js';
import { HeaderDesktop } from './components/header/Component.desktop.js';
import './components/content/Component.js';
import { ContentDesktop } from './components/content/Component.desktop.js';
import './components/footer/Component.js';
import { FooterDesktop } from './components/footer/Component.desktop.js';
import { t as transitions } from './transitions.module-c8dac06a.js';

var styles = {"wrapper":"modal__wrapper_1tg9k","component":"modal__component_1tg9k","fullscreen":"modal__fullscreen_1tg9k","s":"modal__s_1tg9k","m":"modal__m_1tg9k","l":"modal__l_1tg9k"};
require('./desktop.css');

var ModalDesktopComponent = forwardRef(function (_a, ref) {
    var _b;
    var _c = _a.size, size = _c === void 0 ? 's' : _c, fixedPosition = _a.fixedPosition, fullscreen = _a.fullscreen, children = _a.children, className = _a.className, wrapperClassName = _a.wrapperClassName, _d = _a.transitionProps, transitionProps = _d === void 0 ? {} : _d, restProps = __rest(_a, ["size", "fixedPosition", "fullscreen", "children", "className", "wrapperClassName", "transitionProps"]);
    var modalRef = useRef(null);
    var handleEntered = useCallback(function (node, isAppearing) {
        if (fixedPosition && modalRef.current) {
            var content = modalRef.current.querySelector("." + styles.component);
            if (content) {
                var marginTop = window.getComputedStyle(content).marginTop;
                content.style.marginTop = marginTop;
            }
        }
        if (transitionProps.onEntered) {
            transitionProps.onEntered(node, isAppearing);
        }
    }, [fixedPosition, transitionProps]);
    return (React.createElement(BaseModal, __assign({}, restProps, { ref: mergeRefs([ref, modalRef]), wrapperClassName: cn(styles.wrapper, wrapperClassName, (_b = {},
            _b[styles.fullscreen] = fullscreen,
            _b)), className: cn(styles.component, className, !fullscreen && styles[size]), backdropProps: __assign(__assign({}, restProps.backdropProps), { invisible: fullscreen }), transitionProps: __assign(__assign({ classNames: transitions }, transitionProps), { onEntered: handleEntered }) }), React.Children.map(children, function (child) {
        return isValidElement(child)
            ? cloneElement(child, { size: child.props.size || size, fullscreen: fullscreen })
            : child;
    })));
});
var ModalDesktop = Object.assign(ModalDesktopComponent, {
    Content: ContentDesktop,
    Header: HeaderDesktop,
    Footer: FooterDesktop,
    Closer: Closer,
});

export { ModalDesktop };
