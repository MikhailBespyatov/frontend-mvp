import React, { forwardRef, isValidElement, cloneElement } from 'react';
import cn from 'classnames';
import { useMedia } from '@alfalab/hooks';
import { BaseModal } from '../../base-modal/modern';
import './Context.js';
import '../../button/modern';
import { Closer } from './components/closer/Component.js';
import './components/header/Component.js';
import './components/content/Component.js';
import './components/footer/Component.js';
import { t as transitions } from './transitions.module-c8dac06a.js';
import { HeaderMobile } from './components/header/Component.mobile.js';
import { ContentMobile } from './components/content/Component.mobile.js';
import { FooterMobile } from './components/footer/Component.mobile.js';

var styles = {"component":"modal__component_1vhr3"};
require('./mobile.css');

const ModalMobileComponent = forwardRef(({ children, className, ...restProps }, ref) => {
    const [size] = useMedia([
        ['s', '(max-width: 375px)'],
        ['m', '(min-width: 376px)'],
    ], 's');
    return (React.createElement(BaseModal, Object.assign({}, restProps, { ref: ref, transitionProps: {
            classNames: transitions,
            ...restProps.transitionProps,
        }, className: cn(className, styles.component), backdropProps: {
            ...restProps.backdropProps,
            invisible: true,
        } }), React.Children.map(children, child => isValidElement(child)
        ? cloneElement(child, { size: child.props.size || size, fullscreen: true })
        : child)));
});
const ModalMobile = Object.assign(ModalMobileComponent, {
    Content: ContentMobile,
    Header: HeaderMobile,
    Footer: FooterMobile,
    Closer,
});

export { ModalMobile };
