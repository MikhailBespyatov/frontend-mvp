import React, { forwardRef, useRef, useCallback, isValidElement, cloneElement } from 'react';
import cn from 'classnames';
import mergeRefs from 'react-merge-refs';
import { BaseModal } from '../../base-modal/modern';
import './Context.js';
import '../../button/modern';
import { Closer } from './components/closer/Component.js';
import './components/header/Component.js';
import { HeaderDesktop } from './components/header/Component.desktop.js';
import './components/content/Component.js';
import { ContentDesktop } from './components/content/Component.desktop.js';
import './components/footer/Component.js';
import { FooterDesktop } from './components/footer/Component.desktop.js';
import { t as transitions } from './transitions.module-c8dac06a.js';

var styles = {"wrapper":"modal__wrapper_1tg9k","component":"modal__component_1tg9k","fullscreen":"modal__fullscreen_1tg9k","s":"modal__s_1tg9k","m":"modal__m_1tg9k","l":"modal__l_1tg9k"};
require('./desktop.css');

const ModalDesktopComponent = forwardRef(({ size = 's', fixedPosition, fullscreen, children, className, wrapperClassName, transitionProps = {}, ...restProps }, ref) => {
    const modalRef = useRef(null);
    const handleEntered = useCallback((node, isAppearing) => {
        if (fixedPosition && modalRef.current) {
            const content = modalRef.current.querySelector(`.${styles.component}`);
            if (content) {
                const { marginTop } = window.getComputedStyle(content);
                content.style.marginTop = marginTop;
            }
        }
        if (transitionProps.onEntered) {
            transitionProps.onEntered(node, isAppearing);
        }
    }, [fixedPosition, transitionProps]);
    return (React.createElement(BaseModal, Object.assign({}, restProps, { ref: mergeRefs([ref, modalRef]), wrapperClassName: cn(styles.wrapper, wrapperClassName, {
            [styles.fullscreen]: fullscreen,
        }), className: cn(styles.component, className, !fullscreen && styles[size]), backdropProps: {
            ...restProps.backdropProps,
            invisible: fullscreen,
        }, transitionProps: {
            classNames: transitions,
            ...transitionProps,
            onEntered: handleEntered,
        } }), React.Children.map(children, child => isValidElement(child)
        ? cloneElement(child, { size: child.props.size || size, fullscreen })
        : child)));
});
const ModalDesktop = Object.assign(ModalDesktopComponent, {
    Content: ContentDesktop,
    Header: HeaderDesktop,
    Footer: FooterDesktop,
    Closer,
});

export { ModalDesktop };
