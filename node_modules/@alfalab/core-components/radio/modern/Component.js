import React, { forwardRef, useRef } from 'react';
import cn from 'classnames';
import mergeRefs from 'react-merge-refs';
import { useFocus } from '@alfalab/hooks';

var styles = {"container":"radio__container_1n0kc","checked":"radio__checked_1n0kc","disabled":"radio__disabled_1n0kc","inactive":"radio__inactive_1n0kc","circle":"radio__circle_1n0kc","label":"radio__label_1n0kc","hint":"radio__hint_1n0kc","focused":"radio__focused_1n0kc","s":"radio__s_1n0kc","content":"radio__content_1n0kc","start":"radio__start_1n0kc","center":"radio__center_1n0kc","addons":"radio__addons_1n0kc","block":"radio__block_1n0kc"};
require('./index.css');

const Radio = forwardRef(({ onChange, className, name, disabled, inactive, dataTestId, label, checked, hint, size = 's', align = 'start', addons, block, ...restProps }, ref) => {
    const labelRef = useRef(null);
    const [focused] = useFocus(labelRef, 'keyboard');
    const handleChange = (event) => {
        if (onChange) {
            onChange(event, { checked: event.target.checked, name });
        }
    };
    return (
    // eslint-disable-next-line jsx-a11y/label-has-associated-control
    React.createElement("label", { className: cn(styles.container, styles[size], styles[align], className, {
            [styles.disabled]: disabled,
            [styles.inactive]: inactive,
            [styles.checked]: checked,
            [styles.focused]: focused,
            [styles.block]: block,
        }), ref: mergeRefs([labelRef, ref]) },
        React.createElement("input", Object.assign({ type: 'radio', onChange: handleChange, "data-test-id": dataTestId, disabled: disabled || inactive, checked: checked, name: name }, restProps)),
        React.createElement("span", { className: styles.circle }),
        (label || hint) && (React.createElement("span", { className: styles.content },
            label && React.createElement("span", { className: styles.label }, label),
            hint && React.createElement("span", { className: styles.hint }, hint))),
        addons && React.createElement("span", { className: styles.addons }, addons)));
});

export { Radio };
