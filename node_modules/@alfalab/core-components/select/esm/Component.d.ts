/// <reference types="react" />
import React from 'react';
import { ReactNode, HTMLAttributes } from "react";
import { BaseSelectProps } from "./typings";
type FormControlProps = HTMLAttributes<HTMLDivElement> & {
    /**
     * Растягивает компонент на ширину контейнера
     */
    block?: boolean;
    /**
     * Размер компонента
     */
    size?: "s" | "m" | "l" | "xl";
    /**
     * Набор цветов для компонента
     */
    colors?: "default" | "inverted";
    /**
     * Заблокированное состояние
     */
    disabled?: boolean;
    /**
     * Заполненное состояние
     */
    filled?: boolean;
    /**
     * Выбранное (фокус) состояние
     */
    focused?: boolean;
    /**
     * Отображение ошибки
     */
    error?: ReactNode | boolean;
    /**
     * Текст подсказки
     */
    hint?: ReactNode;
    /**
     * Лейбл компонента
     */
    label?: ReactNode;
    /**
     * Слот слева
     */
    leftAddons?: ReactNode;
    /**
     * Слот справа
     */
    rightAddons?: ReactNode;
    /**
     * Слот под полем
     */
    bottomAddons?: ReactNode;
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Дополнительный класс для поля
     */
    fieldClassName?: string;
    /**
     * Дополнительный класс для лейбла
     */
    labelClassName?: string;
    /**
     * Дополнительный класс для аддонов
     */
    addonsClassName?: string;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    dataTestId?: string;
    /**
     * Компонент поля (инпут, textarea и пр.)
     */
    children?: ReactNode;
};
type SelectProps = Omit<BaseSelectProps, 'fieldProps'> & {
    /**
     * Пропсы, которые будут прокинуты в компонент поля
     */
    fieldProps?: FormControlProps & Record<string, unknown>;
};
declare const Select: React.ForwardRefExoticComponent<Pick<BaseSelectProps, "block" | "size" | "className" | "fieldClassName" | "disabled" | "error" | "hint" | "label" | "dataTestId" | "id" | "placeholder" | "onFocus" | "onBlur" | "onChange" | "onScroll" | "preventFlip" | "popperClassName" | "open" | "name" | "options" | "multiple" | "selected" | "valueRenderer" | "Optgroup" | "visibleOptions" | "Arrow" | "Option" | "optionsListClassName" | "optionClassName" | "autocomplete" | "allowUnselect" | "closeOnSelect" | "circularNavigation" | "nativeSelect" | "defaultOpen" | "popoverPosition" | "optionsListWidth" | "optionsSize" | "optionsListProps" | "optionProps" | "onOpen" | "Field" | "OptionsList" | "updatePopover" | "zIndexPopover" | "showEmptyOptionsList"> & {
    /**
     * Пропсы, которые будут прокинуты в компонент поля
     */
    fieldProps?: (React.HTMLAttributes<HTMLDivElement> & {
        block?: boolean | undefined;
        size?: "s" | "m" | "l" | "xl" | undefined;
        colors?: "default" | "inverted" | undefined;
        disabled?: boolean | undefined;
        filled?: boolean | undefined;
        focused?: boolean | undefined;
        error?: React.ReactNode;
        hint?: React.ReactNode;
        label?: React.ReactNode;
        leftAddons?: React.ReactNode;
        rightAddons?: React.ReactNode;
        bottomAddons?: React.ReactNode;
        className?: string | undefined;
        fieldClassName?: string | undefined;
        labelClassName?: string | undefined;
        addonsClassName?: string | undefined;
        dataTestId?: string | undefined;
        children?: React.ReactNode;
    } & Record<string, unknown>) | undefined;
} & React.RefAttributes<HTMLDivElement>>;
export { SelectProps, Select };
