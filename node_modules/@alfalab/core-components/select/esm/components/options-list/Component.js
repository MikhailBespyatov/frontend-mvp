import { a as __assign } from '../../tslib.es6-06329489.js';
import React, { forwardRef, useCallback, useRef } from 'react';
import cn from 'classnames';
import { useVisibleOptions, isGroup } from '../../utils.js';
import mergeRefs from 'react-merge-refs';
import { Optgroup } from '../optgroup/Component.js';

var styles = {"optionsList":"select__optionsList_1guhs","scrollable":"select__scrollable_1guhs","emptyPlaceholder":"select__emptyPlaceholder_1guhs","l":"select__l_1guhs","xl":"select__xl_1guhs"};
require('./index.css');

var createCounter = function () {
    var count = 0;
    // eslint-disable-next-line no-plusplus
    return function () { return count++; };
};
var OptionsList = forwardRef(function (_a, ref) {
    var _b = _a.size, size = _b === void 0 ? 's' : _b, className = _a.className, Option = _a.Option, getOptionProps = _a.getOptionProps, _c = _a.options, options = _c === void 0 ? [] : _c, _d = _a.Optgroup, Optgroup$1 = _d === void 0 ? Optgroup : _d, dataTestId = _a.dataTestId, emptyPlaceholder = _a.emptyPlaceholder, _e = _a.visibleOptions, visibleOptions = _e === void 0 ? 5 : _e, onScroll = _a.onScroll, open = _a.open, header = _a.header, footer = _a.footer;
    var renderOption = useCallback(function (option, index) { return (React.createElement(Option, __assign({ key: option.key }, getOptionProps(option, index)))); }, [getOptionProps]);
    var listRef = useRef(null);
    var counter = createCounter();
    var renderGroup = useCallback(function (group) { return (React.createElement(Optgroup$1, { label: group.label, key: group.label, size: size }, group.options.map(function (option) { return renderOption(option, counter()); }))); }, [counter, renderOption, size]);
    useVisibleOptions({
        visibleOptions: visibleOptions,
        listRef: listRef,
        open: open,
        invalidate: options,
    });
    if (options.length === 0 && !emptyPlaceholder) {
        return null;
    }
    return (React.createElement("div", { className: cn(styles.optionsList, styles[size], className), "data-test-id": dataTestId },
        header,
        React.createElement("div", { className: styles.scrollable, ref: mergeRefs([listRef, ref]), onScroll: onScroll },
            options.map(function (option) {
                return isGroup(option) ? renderGroup(option) : renderOption(option, counter());
            }),
            emptyPlaceholder && options.length === 0 && (React.createElement("div", { className: styles.emptyPlaceholder }, emptyPlaceholder))),
        footer));
});

export { OptionsList };
