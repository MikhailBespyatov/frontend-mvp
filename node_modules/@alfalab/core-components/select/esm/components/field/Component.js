import { _ as __rest, a as __assign } from '../../tslib.es6-06329489.js';
import React, { useState, useRef, useCallback } from 'react';
import cn from 'classnames';
import { useFocus } from '@alfalab/hooks';
import { FormControl } from '../../../../form-control/esm';
import { joinOptions } from '../../utils.js';

var styles = {"component":"select__component_i5wzz","field":"select__field_i5wzz","disabled":"select__disabled_i5wzz","arrow":"select__arrow_i5wzz","placeholder":"select__placeholder_i5wzz","contentWrapper":"select__contentWrapper_i5wzz","value":"select__value_i5wzz","focusVisible":"select__focusVisible_i5wzz"};
require('./index.css');

var Field = function (_a) {
    var _b;
    var _c = _a.size, size = _c === void 0 ? 'm' : _c, open = _a.open, multiple = _a.multiple, error = _a.error, hint = _a.hint, disabled = _a.disabled, label = _a.label, placeholder = _a.placeholder, _d = _a.selectedMultiple, selectedMultiple = _d === void 0 ? [] : _d, selected = _a.selected, rightAddons = _a.rightAddons, _e = _a.valueRenderer, valueRenderer = _e === void 0 ? joinOptions : _e, setSelectedItems = _a.setSelectedItems, toggleMenu = _a.toggleMenu, Arrow = _a.Arrow, innerProps = _a.innerProps, dataTestId = _a.dataTestId, fieldClassName = _a.fieldClassName, restProps = __rest(_a, ["size", "open", "multiple", "error", "hint", "disabled", "label", "placeholder", "selectedMultiple", "selected", "rightAddons", "valueRenderer", "setSelectedItems", "toggleMenu", "Arrow", "innerProps", "dataTestId", "fieldClassName"]);
    var _f = useState(false), focused = _f[0], setFocused = _f[1];
    var wrapperRef = useRef(null);
    var focusVisible = useFocus(wrapperRef, 'keyboard')[0];
    var handleFocus = useCallback(function () { return setFocused(true); }, []);
    var handleBlur = useCallback(function () { return setFocused(false); }, []);
    var value = valueRenderer({ selected: selected, selectedMultiple: selectedMultiple });
    var filled = Boolean(value);
    var showLabel = !!label && (filled || !placeholder);
    return (React.createElement("div", { className: styles.component, ref: wrapperRef, onFocus: handleFocus, onBlur: handleBlur },
        React.createElement(FormControl, __assign({ fieldClassName: cn(styles.field, fieldClassName, (_b = {},
                _b[styles.disabled] = disabled,
                _b[styles.focusVisible] = focusVisible,
                _b)), block: true, size: size, focused: open || focused, disabled: disabled, filled: filled, label: showLabel && label, error: error, hint: hint, rightAddons: (Arrow || rightAddons) && (React.createElement(React.Fragment, null,
                rightAddons,
                Arrow ? React.cloneElement(Arrow, { className: styles.arrow }) : null)), "data-test-id": dataTestId }, restProps, innerProps),
            React.createElement("div", { className: styles.contentWrapper },
                placeholder && !filled && (React.createElement("span", { className: styles.placeholder }, placeholder)),
                filled && React.createElement("div", { className: styles.value }, value)))));
};

export { Field };
