import { _ as __rest, a as __assign, b as __spreadArrays } from './tslib.es6-06329489.js';
import React, { forwardRef, useRef, useCallback, useEffect, useMemo, useState } from 'react';
import cn from 'classnames';
import '@alfalab/hooks';
import '../../form-control/esm';
import { processOptions } from './utils.js';
import './components/field/Component.js';
import '@alfalab/icons-glyph/ChevronDownMIcon';
import './components/arrow/Component.js';
import 'react-merge-refs';
import './components/optgroup/Component.js';
import { OptionsList } from './components/options-list/Component.js';
import '../../checkbox/esm';
import './components/checkmark/Component.js';
import './components/option/Component.js';
import 'resize-observer';
import '../../popover/esm';
import 'downshift';
import './components/native-select/Component.js';
import './components/base-select/Component.js';
import './Component.js';
import 'react-virtual';
import '../../skeleton/esm';
import './intersection-observer-de5aa0a1.js';
import { Button } from '../../button/esm';

var styles = {"footer":"select__footer_18ac7","withBorder":"select__withBorder_18ac7"};
require('./presets/useSelectWithApply/options-list-with-apply/index.css');

var OptionsListWithApply = forwardRef(function (_a, ref) {
    var _b;
    var toggleMenu = _a.toggleMenu, _c = _a.OptionsList, OptionsList$1 = _c === void 0 ? OptionsList : _c, defaultGetOptionProps = _a.getOptionProps, _d = _a.showClear, showClear = _d === void 0 ? true : _d, _e = _a.selectedDraft, selectedDraft = _e === void 0 ? [] : _e, _f = _a.flatOptions, flatOptions = _f === void 0 ? [] : _f, _g = _a.onApply, onApply = _g === void 0 ? function () { return null; } : _g, _h = _a.onClear, onClear = _h === void 0 ? function () { return null; } : _h, _j = _a.onClose, onClose = _j === void 0 ? function () { return null; } : _j, _k = _a.visibleOptions, visibleOptions = _k === void 0 ? 5 : _k, restProps = __rest(_a, ["toggleMenu", "OptionsList", "getOptionProps", "showClear", "selectedDraft", "flatOptions", "onApply", "onClear", "onClose", "visibleOptions"]);
    var footerRef = useRef(null);
    var getOptionProps = useCallback(function (option, index) {
        var optionProps = defaultGetOptionProps(option, index);
        var selected = option.key === SELECT_ALL_KEY
            ? selectedDraft.length === flatOptions.length - 1
            : selectedDraft.includes(option);
        return __assign(__assign({}, optionProps), { selected: selected });
    }, [defaultGetOptionProps, flatOptions.length, selectedDraft]);
    var handleApply = useCallback(function () {
        onApply();
        toggleMenu();
    }, [onApply, toggleMenu]);
    var handleClear = useCallback(function () {
        onClear();
        toggleMenu();
    }, [onClear, toggleMenu]);
    useEffect(function () {
        var activeElement = document.activeElement;
        setTimeout(function () {
            if (footerRef.current) {
                footerRef.current.focus();
            }
        }, 0);
        return function () {
            onClose();
            if (activeElement) {
                activeElement.focus();
            }
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return (React.createElement(OptionsList$1, __assign({}, restProps, { ref: ref, visibleOptions: visibleOptions, toggleMenu: toggleMenu, flatOptions: flatOptions, getOptionProps: getOptionProps, footer: React.createElement("div", { 
            // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
            tabIndex: 0, className: cn(styles.footer, (_b = {},
                _b[styles.withBorder] = visibleOptions && flatOptions.length > visibleOptions,
                _b)), ref: footerRef },
            React.createElement(Button, { size: 'xxs', view: 'primary', onClick: handleApply }, "\u041F\u0440\u0438\u043C\u0435\u043D\u0438\u0442\u044C"),
            showClear && (React.createElement(Button, { size: 'xxs', view: 'secondary', onClick: handleClear }, "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C"))) })));
});

var SELECT_ALL_KEY = 'select_all';
var selectAllOption = { key: SELECT_ALL_KEY, content: 'Выбрать все' };
function useSelectWithApply(_a) {
    var options = _a.options, selected = _a.selected, _b = _a.onChange, onChange = _b === void 0 ? function () { return null; } : _b, OptionsList = _a.OptionsList, _c = _a.showClear, showClear = _c === void 0 ? true : _c, _d = _a.showSelectAll, showSelectAll = _d === void 0 ? false : _d;
    var _e = useMemo(function () { return processOptions(options, selected); }, [
        options,
        selected,
    ]), flatOptions = _e.flatOptions, selectedOptions = _e.selectedOptions;
    var _f = useState(selectedOptions), selectedDraft = _f[0], setSelectedDraft = _f[1];
    var selectedOptionsRef = useRef(selectedOptions);
    var handleApply = useCallback(function () {
        onChange({
            selected: selectedDraft[0],
            selectedMultiple: selectedDraft,
            initiator: null,
        });
    }, [onChange, selectedDraft]);
    var handleClear = useCallback(function () {
        setSelectedDraft([]);
        onChange({
            selected: null,
            selectedMultiple: [],
            initiator: null,
        });
    }, [onChange]);
    var handleChange = useCallback(function (_a) {
        var initiator = _a.initiator, restArgs = __rest(_a, ["initiator"]);
        if (!initiator) {
            onChange(__assign({ initiator: null }, restArgs));
            return;
        }
        var initiatorSelected = selectedDraft.includes(initiator) ||
            (initiator.key === SELECT_ALL_KEY && selectedDraft.length === flatOptions.length);
        if (initiator.key === SELECT_ALL_KEY) {
            setSelectedDraft(initiatorSelected ? [] : flatOptions);
        }
        else {
            setSelectedDraft(initiatorSelected
                ? selectedDraft.filter(function (o) { return o !== initiator; })
                : selectedDraft.concat(initiator));
        }
    }, [flatOptions, onChange, selectedDraft]);
    var handleClose = useCallback(function () {
        setSelectedDraft(selectedOptionsRef.current);
    }, []);
    useEffect(function () {
        setSelectedDraft(selectedOptions);
        selectedOptionsRef.current = selectedOptions;
    }, [selectedOptions]);
    var memoizedOptions = useMemo(function () { return (showSelectAll ? __spreadArrays([selectAllOption], options) : options); }, [options, showSelectAll]);
    return {
        OptionsList: OptionsListWithApply,
        optionsListProps: {
            OptionsList: OptionsList,
            showClear: showClear && (selectedDraft.length > 0 || selectedOptions.length > 0),
            onClear: handleClear,
            onApply: handleApply,
            onClose: handleClose,
            selectedDraft: selectedDraft,
        },
        allowUnselect: true,
        multiple: true,
        options: memoizedOptions,
        onChange: handleChange,
        selected: selected,
    };
}

export { OptionsListWithApply as O, SELECT_ALL_KEY as S, useSelectWithApply as u };
