import { isValidElement, cloneElement, useEffect, useRef } from 'react';

var isGroup = function (item) {
    return Object.prototype.hasOwnProperty.call(item, 'options');
};
var isOptionShape = function (item) {
    return !!item && Object.prototype.hasOwnProperty.call(item, 'key');
};
var joinOptions = function (_a) {
    var selected = _a.selected, selectedMultiple = _a.selectedMultiple;
    var options = selectedMultiple || (selected ? [selected] : []);
    if (!options.length)
        return null;
    return options.reduce(function (acc, option, index) {
        if (isValidElement(option.content)) {
            acc.push(cloneElement(option.content, { key: option.key }));
        }
        else {
            acc.push(option.content);
        }
        if (index < options.length - 1)
            acc.push(', ');
        return acc;
    }, []);
};
// За один проход делает список пунктов меню плоским и находит выбранные пункты по ключу
function processOptions(options, selected) {
    if (selected === void 0) { selected = []; }
    var flatOptions = [];
    var selectedArray = Array.isArray(selected) ? selected : [selected];
    var selectedOptions = selectedArray.filter(isOptionShape);
    var selectedKeys = selectedArray.filter(function (option) { return typeof option === 'string'; });
    var isSelected = function (option) { return selectedKeys.includes(option.key); };
    var process = function (option) {
        flatOptions.push(option);
        if (isSelected(option)) {
            selectedOptions.push(option);
        }
    };
    options.forEach(function (option) {
        if (isGroup(option)) {
            option.options.forEach(process);
        }
        else {
            process(option);
        }
    });
    return { flatOptions: flatOptions, selectedOptions: selectedOptions };
}
function useVisibleOptions(_a) {
    var visibleOptions = _a.visibleOptions, listRef = _a.listRef, _b = _a.styleTargetRef, styleTargetRef = _b === void 0 ? listRef : _b, open = _a.open, invalidate = _a.invalidate;
    useEffect(function () {
        var list = listRef.current;
        var styleTarget = styleTargetRef.current;
        if (open && list && styleTarget) {
            var optionsNodes = [].slice.call(list.children, 0, visibleOptions + 1);
            var height = optionsNodes
                .slice(0, visibleOptions)
                .reduce(function (acc, child) { return acc + child.clientHeight; }, 0);
            if (visibleOptions < list.children.length) {
                // Добавляем половинку
                height += Math.round(optionsNodes[optionsNodes.length - 1].clientHeight / 2);
            }
            styleTarget.style.height = height + "px";
        }
    }, [listRef, open, styleTargetRef, visibleOptions, invalidate]);
}
// TODO: перенести
function usePrevious(value) {
    var ref = useRef();
    useEffect(function () {
        ref.current = value;
    }, [value]);
    return ref.current;
}
// TODO: перенести
var lastIndexOf = function (array, predicate) {
    for (var i = array.length - 1; i >= 0; i--) {
        if (predicate(array[i]))
            return i;
    }
    return -1;
};

export { isGroup, isOptionShape, joinOptions, lastIndexOf, processOptions, usePrevious, useVisibleOptions };
