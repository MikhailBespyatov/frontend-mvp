import React, { forwardRef, useCallback } from 'react';
import { isGroup } from '../../utils.js';

const Option = ({ option }) => (React.createElement("option", { value: option.key, disabled: option.disabled }, typeof option.content === 'string' ? option.content : option.key));
const Group = ({ label, options }) => (React.createElement("optgroup", { label: label }, options.map(option => (React.createElement(Option, { option: option, key: option.key })))));
const NativeSelect = forwardRef(({ className, disabled, multiple, value, name, options, onChange, ...restProps }, ref) => {
    const handleClick = useCallback(event => {
        event.stopPropagation();
    }, []);
    return (React.createElement("select", Object.assign({ className: className, disabled: disabled, multiple: multiple, name: name, value: value, onChange: onChange, onClick: handleClick, ref: ref }, restProps), options.map(option => isGroup(option) ? (React.createElement(Group, Object.assign({}, option, { key: option.label }))) : (React.createElement(Option, { option: option, key: option.key })))));
});

export { NativeSelect };
