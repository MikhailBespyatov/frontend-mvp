import React, { forwardRef, useCallback, useRef } from 'react';
import cn from 'classnames';
import mergeRefs from 'react-merge-refs';
import { useVisibleOptions, isGroup } from '../../utils.js';
import { Optgroup } from '../optgroup/Component.js';

var styles = {"optionsList":"select__optionsList_1guhs","scrollable":"select__scrollable_1guhs","emptyPlaceholder":"select__emptyPlaceholder_1guhs","l":"select__l_1guhs","xl":"select__xl_1guhs"};
require('./index.css');

const createCounter = () => {
    let count = 0;
    // eslint-disable-next-line no-plusplus
    return () => count++;
};
const OptionsList = forwardRef(({ size = 's', className, Option, getOptionProps, options = [], Optgroup: Optgroup$1 = Optgroup, dataTestId, emptyPlaceholder, visibleOptions = 5, onScroll, open, header, footer, }, ref) => {
    const renderOption = useCallback((option, index) => (React.createElement(Option, Object.assign({ key: option.key }, getOptionProps(option, index)))), [getOptionProps]);
    const listRef = useRef(null);
    const counter = createCounter();
    const renderGroup = useCallback((group) => (React.createElement(Optgroup$1, { label: group.label, key: group.label, size: size }, group.options.map(option => renderOption(option, counter())))), [counter, renderOption, size]);
    useVisibleOptions({
        visibleOptions,
        listRef,
        open,
        invalidate: options,
    });
    if (options.length === 0 && !emptyPlaceholder) {
        return null;
    }
    return (React.createElement("div", { className: cn(styles.optionsList, styles[size], className), "data-test-id": dataTestId },
        header,
        React.createElement("div", { className: styles.scrollable, ref: mergeRefs([listRef, ref]), onScroll: onScroll },
            options.map(option => isGroup(option) ? renderGroup(option) : renderOption(option, counter())),
            emptyPlaceholder && options.length === 0 && (React.createElement("div", { className: styles.emptyPlaceholder }, emptyPlaceholder))),
        footer));
});

export { OptionsList };
