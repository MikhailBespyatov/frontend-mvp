import React, { useState, useRef, useCallback } from 'react';
import cn from 'classnames';
import { useFocus } from '@alfalab/hooks';
import { FormControl } from '../../../../form-control/modern';
import { joinOptions } from '../../utils.js';

var styles = {"component":"select__component_i5wzz","field":"select__field_i5wzz","disabled":"select__disabled_i5wzz","arrow":"select__arrow_i5wzz","placeholder":"select__placeholder_i5wzz","contentWrapper":"select__contentWrapper_i5wzz","value":"select__value_i5wzz","focusVisible":"select__focusVisible_i5wzz"};
require('./index.css');

const Field = ({ size = 'm', open, multiple, error, hint, disabled, label, placeholder, selectedMultiple = [], selected, rightAddons, valueRenderer = joinOptions, setSelectedItems, toggleMenu, Arrow, innerProps, dataTestId, fieldClassName, ...restProps }) => {
    const [focused, setFocused] = useState(false);
    const wrapperRef = useRef(null);
    const [focusVisible] = useFocus(wrapperRef, 'keyboard');
    const handleFocus = useCallback(() => setFocused(true), []);
    const handleBlur = useCallback(() => setFocused(false), []);
    const value = valueRenderer({ selected, selectedMultiple });
    const filled = Boolean(value);
    const showLabel = !!label && (filled || !placeholder);
    return (React.createElement("div", { className: styles.component, ref: wrapperRef, onFocus: handleFocus, onBlur: handleBlur },
        React.createElement(FormControl, Object.assign({ fieldClassName: cn(styles.field, fieldClassName, {
                [styles.disabled]: disabled,
                [styles.focusVisible]: focusVisible,
            }), block: true, size: size, focused: open || focused, disabled: disabled, filled: filled, label: showLabel && label, error: error, hint: hint, rightAddons: (Arrow || rightAddons) && (React.createElement(React.Fragment, null,
                rightAddons,
                Arrow ? React.cloneElement(Arrow, { className: styles.arrow }) : null)), "data-test-id": dataTestId }, restProps, innerProps),
            React.createElement("div", { className: styles.contentWrapper },
                placeholder && !filled && (React.createElement("span", { className: styles.placeholder }, placeholder)),
                filled && React.createElement("div", { className: styles.value }, value)))));
};

export { Field };
