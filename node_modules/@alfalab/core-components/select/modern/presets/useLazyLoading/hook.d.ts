/// <reference types="react" />
import React from 'react';
import { OptionShape } from "../../typings";
type OptionsFetcherResponse = {
    options: OptionShape[];
    hasMore: boolean;
};
type useLazyLoadingProps = {
    /** Количество элементов на "странице" */
    limit?: number;
    /** Начальный номер "страницы" */
    initialOffset?: number;
    /** Скелетон загружаемых элементов */
    skeleton?: React.ReactNode;
    /**
     * Функция-загрузчик опций.
     * @param offset - текущая страница
     * @param limit - количество элементов на странице
     * @param queryString - строчные данные, пробрасываемые для поиска из кастомного инпута, расположенного в заголовке OptionsList
     * @returns Promise<{
     *  options - список опций следующей "страницы". Они аппендятся к предыдущим
     *  hasMore - указывает, есть ли еще незагруженные элементы (в случае false перестает загружать "следующую страницу")
     * }>
     */
    optionsFetcher<T>(offset: number, limit: number, queryString?: string): Promise<OptionsFetcherResponse>;
};
declare function useLazyLoading({ limit, initialOffset, optionsFetcher, skeleton, }: useLazyLoadingProps): {
    optionsProps: {
        Option: (props: any) => JSX.Element;
        options: OptionShape[];
        optionsListProps: {
            ref: React.RefObject<HTMLDivElement>;
            inputProps: {
                onChange: (event: React.ChangeEvent<HTMLInputElement>, payload: {
                    value: string;
                }) => void;
                value: string;
            };
        };
        onOpen: (payload: {
            open?: boolean | undefined;
        }) => void;
    };
    reset: () => void;
};
export { useLazyLoading };
