import { ReactNode, RefObject } from 'react';
import { OptionShape, GroupShape, BaseSelectProps } from "./typings";
declare const isGroup: (item: OptionShape | GroupShape) => item is GroupShape;
declare const isOptionShape: (item: string | OptionShape | null) => item is OptionShape;
declare const joinOptions: ({ selected, selectedMultiple, }: {
    selected?: OptionShape | undefined;
    selectedMultiple?: OptionShape[] | undefined;
}) => ReactNode[] | null;
declare function processOptions(options: BaseSelectProps['options'], selected?: BaseSelectProps['selected']): {
    flatOptions: OptionShape[];
    selectedOptions: OptionShape[];
};
type useVisibleOptionsArgs = {
    /**
     * Количество видимых пунктов
     */
    visibleOptions: number;
    /**
     * Реф на контейнер с пунтами меню
     */
    listRef: RefObject<HTMLElement>;
    /**
     * Реф на контейнер, которому нужно установить высоту
     */
    styleTargetRef?: RefObject<HTMLElement>;
    /**
     * Флаг открытия меню
     */
    open?: boolean;
    /**
     * Позволяет вызвать пересчет высоты
     */
    invalidate?: unknown;
};
declare function useVisibleOptions({ visibleOptions, listRef, styleTargetRef, open, invalidate, }: useVisibleOptionsArgs): void;
declare function usePrevious<T>(value: T): T | undefined;
declare const lastIndexOf: <T>(array: T[], predicate: (item: T) => boolean) => number;
export { isGroup, isOptionShape, joinOptions, processOptions, useVisibleOptions, usePrevious, lastIndexOf };
