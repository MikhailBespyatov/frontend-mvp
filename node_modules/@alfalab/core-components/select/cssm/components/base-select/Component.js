Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../../tslib.es6-f8106a15.js');
var React = require('react');
var cn = require('classnames');
var utils = require('../../utils.js');
var mergeRefs = require('react-merge-refs');
var resizeObserver = require('resize-observer');
var coreComponentsPopover = require('../../../../popover/cssm');
var downshift = require('downshift');
var components_nativeSelect_Component = require('../native-select/Component.js');
var styles = require('./index.module.css');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);
var mergeRefs__default = /*#__PURE__*/_interopDefaultLegacy(mergeRefs);
var styles__default = /*#__PURE__*/_interopDefaultLegacy(styles);

var getDataTestId = function (dataTestId, element) {
    var elementPart = element ? "-" + element.toLowerCase() : '';
    return dataTestId ? "" + dataTestId + elementPart : undefined;
};

var BaseSelect = React.forwardRef(function (_a, ref) {
    var _b;
    var dataTestId = _a.dataTestId, className = _a.className, fieldClassName = _a.fieldClassName, optionsListClassName = _a.optionsListClassName, optionClassName = _a.optionClassName, popperClassName = _a.popperClassName, options = _a.options, _c = _a.autocomplete, autocomplete = _c === void 0 ? false : _c, _d = _a.multiple, multiple = _d === void 0 ? false : _d, _e = _a.allowUnselect, allowUnselect = _e === void 0 ? false : _e, _f = _a.disabled, disabled = _f === void 0 ? false : _f, _g = _a.closeOnSelect, closeOnSelect = _g === void 0 ? !multiple : _g, _h = _a.circularNavigation, circularNavigation = _h === void 0 ? false : _h, _j = _a.nativeSelect, nativeSelect = _j === void 0 ? false : _j, _k = _a.defaultOpen, defaultOpen = _k === void 0 ? false : _k, openProp = _a.open, _l = _a.popoverPosition, popoverPosition = _l === void 0 ? 'bottom-start' : _l, _m = _a.preventFlip, preventFlip = _m === void 0 ? true : _m, _o = _a.optionsListWidth, optionsListWidth = _o === void 0 ? 'content' : _o, name = _a.name, id = _a.id, selected = _a.selected, _p = _a.size, size = _p === void 0 ? 's' : _p, _q = _a.optionsSize, optionsSize = _q === void 0 ? size : _q, error = _a.error, hint = _a.hint, block = _a.block, label = _a.label, placeholder = _a.placeholder, _r = _a.fieldProps, fieldProps = _r === void 0 ? {} : _r, _s = _a.optionsListProps, optionsListProps = _s === void 0 ? {} : _s, _t = _a.optionProps, optionProps = _t === void 0 ? {} : _t, valueRenderer = _a.valueRenderer, onChange = _a.onChange, onOpen = _a.onOpen, onFocus = _a.onFocus, onBlur = _a.onBlur, onScroll = _a.onScroll, Arrow = _a.Arrow, _u = _a.Field, Field = _u === void 0 ? function () { return null; } : _u, _v = _a.OptionsList, OptionsList = _v === void 0 ? function () { return null; } : _v, _w = _a.Optgroup, Optgroup = _w === void 0 ? function () { return null; } : _w, _x = _a.Option, Option = _x === void 0 ? function () { return null; } : _x, updatePopover = _a.updatePopover, zIndexPopover = _a.zIndexPopover, _y = _a.showEmptyOptionsList, showEmptyOptionsList = _y === void 0 ? false : _y, visibleOptions = _a.visibleOptions;
    var rootRef = React.useRef(null);
    var fieldRef = React.useRef(null);
    var listRef = React.useRef(null);
    var initiatorRef = React.useRef(null);
    var itemToString = function (option) { return (option ? option.key : ''); };
    var _z = React.useMemo(function () { return utils.processOptions(options, selected); }, [
        options,
        selected,
    ]), flatOptions = _z.flatOptions, selectedOptions = _z.selectedOptions;
    var useMultipleSelectionProps = {
        itemToString: itemToString,
        onSelectedItemsChange: function (changes) {
            if (onChange) {
                var _a = changes.selectedItems, selectedItems_1 = _a === void 0 ? [] : _a;
                onChange({
                    selectedMultiple: selectedItems_1,
                    selected: selectedItems_1.length ? selectedItems_1[0] : null,
                    initiator: initiatorRef.current,
                    name: name,
                });
                initiatorRef.current = null;
            }
        },
        stateReducer: function (state, actionAndChanges) {
            var type = actionAndChanges.type, changes = actionAndChanges.changes;
            if (!allowUnselect &&
                type === downshift.useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace) {
                return state;
            }
            return changes;
        },
    };
    if (selected !== undefined) {
        useMultipleSelectionProps.selectedItems = selectedOptions;
    }
    var _0 = downshift.useMultipleSelection(useMultipleSelectionProps), selectedItems = _0.selectedItems, addSelectedItem = _0.addSelectedItem, setSelectedItems = _0.setSelectedItems, removeSelectedItem = _0.removeSelectedItem, getDropdownProps = _0.getDropdownProps;
    var _1 = downshift.useCombobox({
        id: id,
        isOpen: openProp,
        circularNavigation: circularNavigation,
        items: flatOptions,
        itemToString: itemToString,
        defaultHighlightedIndex: selectedItems.length === 0 ? -1 : undefined,
        onIsOpenChange: function (changes) {
            if (onOpen) {
                /**
                 *  Вызываем обработчик асинхронно.
                 *
                 * Иначе при клике вне открытого селекта сначала сработает onOpen, который закроет селект,
                 * А затем сработает onClick кнопки открытия\закрытия с open=false и в итоге селект откроется снова.
                 */
                setTimeout(function () {
                    onOpen({
                        open: changes.isOpen,
                        name: name,
                    });
                }, 0);
            }
        },
        stateReducer: function (state, actionAndChanges) {
            var type = actionAndChanges.type, changes = actionAndChanges.changes;
            var selectedItem = changes.selectedItem;
            switch (type) {
                case downshift.useCombobox.stateChangeTypes.InputKeyDownEnter:
                case downshift.useCombobox.stateChangeTypes.ItemClick:
                    initiatorRef.current = selectedItem;
                    if (selectedItem && !selectedItem.disabled) {
                        var alreadySelected = selectedItems.includes(selectedItem);
                        var allowRemove = allowUnselect || (multiple && selectedItems.length > 1);
                        if (alreadySelected && allowRemove) {
                            removeSelectedItem(selectedItem);
                        }
                        if (!alreadySelected) {
                            if (multiple) {
                                addSelectedItem(selectedItem);
                            }
                            else {
                                setSelectedItems([selectedItem]);
                            }
                        }
                    }
                    return tslib_es6.__assign(tslib_es6.__assign({}, changes), { isOpen: !closeOnSelect, 
                        // при closeOnSelect === false - сохраняем подсвеченный индекс
                        highlightedIndex: state.isOpen && !closeOnSelect
                            ? state.highlightedIndex
                            : changes.highlightedIndex });
                default:
                    return changes;
            }
        },
    }), open = _1.isOpen, getMenuProps = _1.getMenuProps, getInputProps = _1.getInputProps, getItemProps = _1.getItemProps, getComboboxProps = _1.getComboboxProps, getLabelProps = _1.getLabelProps, highlightedIndex = _1.highlightedIndex, toggleMenu = _1.toggleMenu, openMenu = _1.openMenu;
    var menuProps = getMenuProps({ ref: listRef }, { suppressRefError: true });
    var inputProps = getInputProps(getDropdownProps({ ref: mergeRefs__default['default']([ref, fieldRef]) }));
    var handleFieldFocus = function (event) {
        if (onFocus)
            onFocus(event);
        if (autocomplete && !open) {
            openMenu();
        }
    };
    var handleFieldBlur = function (event) {
        var _a;
        var isNextFocusInsideList = (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.contains((event.relatedTarget || document.activeElement));
        if (!isNextFocusInsideList) {
            if (onBlur)
                onBlur(event);
            inputProps.onBlur(event);
        }
    };
    var handleFieldKeyDown = function (event) {
        inputProps.onKeyDown(event);
        if (autocomplete && !open && (event.key.length === 1 || event.key === 'Backspace')) {
            // Для автокомплита - открываем меню при начале ввода
            openMenu();
        }
        if ([' ', 'Enter'].includes(event.key) &&
            !autocomplete &&
            !nativeSelect &&
            event.target.tagName !== 'INPUT' &&
            event.target.tagName !== 'BUTTON') {
            // Открываем\закрываем меню по нажатию enter или пробела
            event.preventDefault();
            if (!open || highlightedIndex === -1)
                toggleMenu();
        }
    };
    var handleFieldClick = function (event) {
        if (!autocomplete || event.target.tagName !== 'INPUT') {
            toggleMenu();
        }
        else {
            openMenu();
        }
    };
    var handleNativeSelectChange = React.useCallback(function (event) {
        setSelectedItems(tslib_es6.__spreadArrays(event.target.options).reduce(function (acc, option, index) {
            return option.selected ? acc.concat(flatOptions[index]) : acc;
        }, []));
    }, [flatOptions, setSelectedItems]);
    var getOptionProps = React.useCallback(function (option, index) { return (tslib_es6.__assign(tslib_es6.__assign({}, optionProps), { className: optionClassName, innerProps: getItemProps({
            index: index,
            item: option,
            disabled: option.disabled,
            onMouseDown: function (event) { return event.preventDefault(); },
        }), multiple: multiple,
        index: index,
        option: option, size: optionsSize, disabled: option.disabled, highlighted: index === highlightedIndex, selected: selectedItems.includes(option), dataTestId: getDataTestId(dataTestId, 'option') })); }, [
        dataTestId,
        getItemProps,
        highlightedIndex,
        multiple,
        optionClassName,
        optionProps,
        optionsSize,
        selectedItems,
    ]);
    React.useEffect(function () {
        if (defaultOpen)
            openMenu();
    }, [defaultOpen, openMenu]);
    React.useEffect(function () {
        if (openProp) {
            openMenu();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var calcOptionsListWidth = React.useCallback(function () {
        if (listRef.current) {
            var widthAttr = optionsListWidth === 'field' ? 'width' : 'minWidth';
            var optionsListMinWidth = rootRef.current
                ? rootRef.current.getBoundingClientRect().width
                : 0;
            listRef.current.setAttribute('style', '');
            listRef.current.style[widthAttr] = optionsListMinWidth + "px";
        }
    }, [optionsListWidth]);
    React.useEffect(function () {
        var observer = new resizeObserver.ResizeObserver(calcOptionsListWidth);
        if (rootRef.current) {
            observer.observe(rootRef.current);
        }
        return function () {
            observer.disconnect();
        };
    }, [calcOptionsListWidth, open, optionsListWidth]);
    React.useLayoutEffect(calcOptionsListWidth, [open, optionsListWidth, options, selectedItems]);
    var renderValue = React.useCallback(function () {
        return selectedItems.map(function (option) { return (React__default['default'].createElement("input", { type: 'hidden', name: name, value: option.key, key: option.key })); });
    }, [selectedItems, name]);
    var renderNativeSelect = React.useCallback(function () {
        var value = multiple
            ? selectedItems.map(function (option) { return option.key; })
            : (selectedItems[0] || {}).key;
        return (React__default['default'].createElement(components_nativeSelect_Component.NativeSelect, tslib_es6.__assign({}, menuProps, { className: styles__default['default'].nativeSelect, disabled: disabled, multiple: multiple, name: name, value: value, onChange: handleNativeSelectChange, options: options })));
    }, [multiple, selectedItems, disabled, name, handleNativeSelectChange, options, menuProps]);
    var needRenderOptionsList = flatOptions.length > 0 || showEmptyOptionsList;
    return (React__default['default'].createElement("div", tslib_es6.__assign({}, getComboboxProps(tslib_es6.__assign(tslib_es6.__assign({ ref: rootRef }, (disabled && { 'aria-disabled': true })), { className: cn__default['default'](styles__default['default'].component, (_b = {}, _b[styles__default['default'].block] = block, _b), className) })), { onKeyDown: disabled ? undefined : handleFieldKeyDown, tabIndex: -1, "data-test-id": getDataTestId(dataTestId) }),
        nativeSelect && renderNativeSelect(),
        React__default['default'].createElement(Field, tslib_es6.__assign({ selectedMultiple: selectedItems, selected: selectedItems[0], setSelectedItems: setSelectedItems, toggleMenu: toggleMenu, multiple: multiple, open: open, disabled: disabled, size: size, placeholder: placeholder, label: label && React__default['default'].createElement("span", tslib_es6.__assign({}, getLabelProps()), label), Arrow: Arrow && React__default['default'].createElement(Arrow, { open: open }), error: error, hint: hint, valueRenderer: valueRenderer, className: fieldClassName, innerProps: {
                onBlur: handleFieldBlur,
                onFocus: disabled ? undefined : handleFieldFocus,
                onClick: disabled ? undefined : handleFieldClick,
                tabIndex: nativeSelect || disabled ? -1 : 0,
                ref: mergeRefs__default['default']([inputProps.ref]),
                id: inputProps.id,
                'aria-labelledby': inputProps['aria-labelledby'],
                'aria-controls': inputProps['aria-controls'],
                'aria-autocomplete': autocomplete
                    ? inputProps['aria-autocomplete']
                    : undefined,
            }, dataTestId: getDataTestId(dataTestId, 'field') }, fieldProps)),
        name && !nativeSelect && renderValue(),
        !nativeSelect && (React__default['default'].createElement(coreComponentsPopover.Popover, { open: open, withTransition: false, anchorElement: fieldRef.current, position: popoverPosition, preventFlip: preventFlip, popperClassName: cn__default['default'](styles__default['default'].popoverInner, popperClassName), update: updatePopover, zIndex: zIndexPopover }, needRenderOptionsList && (React__default['default'].createElement("div", tslib_es6.__assign({}, menuProps, { className: cn__default['default'](optionsListClassName, styles__default['default'].optionsList) }),
            React__default['default'].createElement(OptionsList, tslib_es6.__assign({}, optionsListProps, { flatOptions: flatOptions, highlightedIndex: highlightedIndex, open: open, size: size, options: options, Optgroup: Optgroup, Option: Option, selectedItems: selectedItems, setSelectedItems: setSelectedItems, toggleMenu: toggleMenu, getOptionProps: getOptionProps, visibleOptions: visibleOptions, onScroll: onScroll, dataTestId: getDataTestId(dataTestId, 'options-list') }))))))));
});

exports.BaseSelect = BaseSelect;
