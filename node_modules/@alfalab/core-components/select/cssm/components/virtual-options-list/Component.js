Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../../tslib.es6-f8106a15.js');
var React = require('react');
var cn = require('classnames');
var utils = require('../../utils.js');
require('../optgroup/index.module.css');
var components_optgroup_Component = require('../optgroup/Component.js');
var reactVirtual = require('react-virtual');
var styles = require('./index.module.css');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);
var styles__default = /*#__PURE__*/_interopDefaultLegacy(styles);

/* eslint-disable react-hooks/exhaustive-deps */
var VirtualOptionsList = function (_a) {
    var _b = _a.size, size = _b === void 0 ? 's' : _b, _c = _a.flatOptions, flatOptions = _c === void 0 ? [] : _c, _d = _a.highlightedIndex, highlightedIndex = _d === void 0 ? -1 : _d, className = _a.className, getOptionProps = _a.getOptionProps, Option = _a.Option, open = _a.open, _e = _a.options, options = _e === void 0 ? [] : _e, _f = _a.overscan, overscan = _f === void 0 ? 10 : _f, _g = _a.Optgroup, Optgroup = _g === void 0 ? components_optgroup_Component.Optgroup : _g, dataTestId = _a.dataTestId, emptyPlaceholder = _a.emptyPlaceholder, _h = _a.visibleOptions, visibleOptions = _h === void 0 ? 5 : _h, onScroll = _a.onScroll, header = _a.header, footer = _a.footer;
    var listRef = React.useRef(null);
    var parentRef = React.useRef(null);
    var _j = React.useState(0), visibleOptionsInvalidateKey = _j[0], setVisibleOptionsInvalidateKey = _j[1];
    var prevHighlightedIndex = utils.usePrevious(highlightedIndex) || -1;
    var rowVirtualizer = reactVirtual.useVirtual({
        size: flatOptions.length,
        parentRef: parentRef,
        overscan: overscan,
    });
    // Сколл к выбранному пункту при открытии меню
    React.useEffect(function () {
        if (open) {
            rowVirtualizer.scrollToIndex(highlightedIndex, { align: 'end' });
        }
    }, [open]);
    // Скролл к пункту, которого нет на экране
    React.useEffect(function () {
        if (highlightedIndex === -1)
            return;
        if (!rowVirtualizer.virtualItems.some(function (option) { return option.index === highlightedIndex; })) {
            rowVirtualizer.scrollToIndex(highlightedIndex, { align: 'end' });
        }
    }, [highlightedIndex]);
    // Циклическая навигация
    React.useEffect(function () {
        var notDisabled = function (option) { return !option.disabled; };
        var firstNonDisabled = flatOptions.findIndex(notDisabled);
        var lastNonDisabled = utils.lastIndexOf(flatOptions, notDisabled);
        if (prevHighlightedIndex <= firstNonDisabled &&
            highlightedIndex === flatOptions.length - 1) {
            rowVirtualizer.scrollToIndex(lastNonDisabled);
        }
        if (prevHighlightedIndex >= lastNonDisabled && highlightedIndex === 0) {
            rowVirtualizer.scrollToIndex(0);
        }
    }, [prevHighlightedIndex, highlightedIndex]);
    React.useEffect(function () {
        setVisibleOptionsInvalidateKey(
        /**
         * react-virtual может несколько раз отрендерить список с одним элементом,
         * поэтому нужно еще раз пересчитать высоту, когда список ВИДИМЫХ пунктов будет отрендерен полностью
         * Также, высоту нужно пересчитывать при изменении ОБЩЕГО кол-ва пунктов меню
         */
        rowVirtualizer.virtualItems.length > 1 ? flatOptions.length : 1);
    }, [rowVirtualizer.virtualItems.length, flatOptions.length]);
    utils.useVisibleOptions({
        visibleOptions: visibleOptions,
        invalidate: visibleOptionsInvalidateKey,
        listRef: listRef,
        styleTargetRef: parentRef,
        open: open,
    });
    // Т.к. рендерится плоский список, необходимо знать индекс, когда начинается новая группа
    var groupStartIndexes = React.useMemo(function () {
        var currentIndex = 0;
        return options.reduce(function (acc, option, index) {
            if (utils.isGroup(option)) {
                acc[currentIndex] = index;
                currentIndex += option.options.length;
            }
            else {
                currentIndex += 1;
            }
            return acc;
        }, {});
    }, [options]);
    return (React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].virtualOptionsList, styles__default['default'][size], className), "data-test-id": dataTestId },
        header,
        React__default['default'].createElement("div", { className: styles__default['default'].scrollable, ref: parentRef, onScroll: onScroll },
            React__default['default'].createElement("div", { className: styles__default['default'].inner, style: {
                    height: rowVirtualizer.totalSize + "px",
                }, ref: listRef }, rowVirtualizer.virtualItems.map(function (virtualRow) {
                var _a;
                var option = flatOptions[virtualRow.index];
                var group = options[groupStartIndexes[virtualRow.index]];
                return (React__default['default'].createElement("div", { key: virtualRow.index, ref: virtualRow.measureRef, className: cn__default['default'](styles__default['default'].virtualRow, (_a = {},
                        _a[styles__default['default'].highlighted] = highlightedIndex === virtualRow.index,
                        _a)), style: {
                        transform: "translateY(" + virtualRow.start + "px)",
                    } },
                    group && React__default['default'].createElement(Optgroup, { label: group.label }),
                    !utils.isGroup(option) && (React__default['default'].createElement(Option, tslib_es6.__assign({}, getOptionProps(option, virtualRow.index))))));
            }))),
        emptyPlaceholder && options.length === 0 && (React__default['default'].createElement("div", { className: styles__default['default'].emptyPlaceholder }, emptyPlaceholder)),
        footer));
};

exports.VirtualOptionsList = VirtualOptionsList;
