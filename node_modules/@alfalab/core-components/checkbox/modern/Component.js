import React, { forwardRef, useRef } from 'react';
import cn from 'classnames';
import { useFocus } from '@alfalab/hooks';
import mergeRefs from 'react-merge-refs';
import CheckedIcon from '@alfalab/icons-glyph/CheckmarkCompactMIcon';

var styles = {"component":"checkbox__component_cofp4","start":"checkbox__start_cofp4","center":"checkbox__center_cofp4","addons":"checkbox__addons_cofp4","block":"checkbox__block_cofp4","box":"checkbox__box_cofp4","checkedIcon":"checkbox__checkedIcon_cofp4","s":"checkbox__s_cofp4","disabled":"checkbox__disabled_cofp4","inactive":"checkbox__inactive_cofp4","checked":"checkbox__checked_cofp4","indeterminate":"checkbox__indeterminate_cofp4","label":"checkbox__label_cofp4","hint":"checkbox__hint_cofp4","focused":"checkbox__focused_cofp4","content":"checkbox__content_cofp4","errorMessage":"checkbox__errorMessage_cofp4","indeterminateLine":"checkbox__indeterminateLine_cofp4"};
require('./index.css');

const Checkbox = forwardRef(({ checked, label, hint, size = 's', align = 'start', addons, block, onChange, className, name, disabled, inactive, dataTestId, indeterminate = false, error, ...restProps }, ref) => {
    const labelRef = useRef(null);
    const [focused] = useFocus(labelRef, 'keyboard');
    const handleChange = (event) => {
        if (onChange) {
            onChange(event, { checked: event.target.checked, name });
        }
    };
    const errorMessage = typeof error === 'boolean' ? '' : error;
    return (
    // eslint-disable-next-line jsx-a11y/label-has-associated-control
    React.createElement("label", { className: cn(styles.component, styles[size], styles[align], className, {
            [styles.disabled]: disabled,
            [styles.inactive]: inactive,
            [styles.checked]: checked,
            [styles.indeterminate]: indeterminate,
            [styles.focused]: focused,
            [styles.block]: block,
        }), ref: mergeRefs([labelRef, ref]) },
        React.createElement("input", Object.assign({ type: 'checkbox', onChange: handleChange, disabled: disabled || inactive, checked: checked, "data-test-id": dataTestId }, restProps)),
        React.createElement("span", { className: styles.box },
            checked && React.createElement(CheckedIcon, { className: styles.checkedIcon }),
            indeterminate && !checked && React.createElement("span", { className: styles.indeterminateLine })),
        (label || hint || errorMessage) && (React.createElement("span", { className: styles.content },
            label && React.createElement("span", { className: styles.label }, label),
            hint && !errorMessage && React.createElement("span", { className: styles.hint }, hint),
            errorMessage && (React.createElement("span", { className: styles.errorMessage, role: 'alert' }, errorMessage)))),
        addons && React.createElement("span", { className: styles.addons }, addons)));
});
/**
 * Для отображения в сторибуке
 */
Checkbox.defaultProps = {
    indeterminate: false,
};

export { Checkbox };
