import { forwardRef, useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { setRef, getDefaultPortalContainer } from './utils.js';

var Portal = forwardRef(function (_a, ref) {
    var _b = _a.getPortalContainer, getPortalContainer = _b === void 0 ? getDefaultPortalContainer : _b, children = _a.children;
    var _c = useState(null), mountNode = _c[0], setMountNode = _c[1];
    useEffect(function () {
        setMountNode(getPortalContainer());
    }, [getPortalContainer]);
    useEffect(function () {
        if (mountNode) {
            setRef(ref, mountNode);
            return function () {
                setRef(ref, null);
            };
        }
        return function () { return null; };
    }, [ref, mountNode]);
    return mountNode ? createPortal(children, mountNode) : mountNode;
});

export { Portal };
