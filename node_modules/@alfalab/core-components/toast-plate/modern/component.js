import React, { forwardRef, useCallback } from 'react';
import cn from 'classnames';
import { CheckmarkCircleMIcon } from '@alfalab/icons-glyph/CheckmarkCircleMIcon';
import { CrossCircleMIcon } from '@alfalab/icons-glyph/CrossCircleMIcon';
import { AlertCircleMIcon } from '@alfalab/icons-glyph/AlertCircleMIcon';
import { CrossMIcon } from '@alfalab/icons-glyph/CrossMIcon';
import { Button } from '../../button/modern';
import { Badge } from '../../badge/modern';

var styles = {"component":"toast-plate__component_1xs17","hasCloser":"toast-plate__hasCloser_1xs17","contentWrap":"toast-plate__contentWrap_1xs17","block":"toast-plate__block_1xs17","content":"toast-plate__content_1xs17","actionSection":"toast-plate__actionSection_1xs17","leftAddons":"toast-plate__leftAddons_1xs17","title":"toast-plate__title_1xs17","children":"toast-plate__children_1xs17","closeButton":"toast-plate__closeButton_1xs17"};
require('./index.css');

const iconDefaultComponents = {
    negative: React.createElement(CrossCircleMIcon, { className: styles.badgeIcon }),
    positive: React.createElement(CheckmarkCircleMIcon, { className: styles.badgeIcon }),
    attention: React.createElement(AlertCircleMIcon, { className: styles.badgeIcon }),
};
const ToastPlate = forwardRef(({ dataTestId, className, contentClassName, hasCloser, leftAddons, badge, title, children, actionButton, block, onClose, getBadgeIcons, ...restProps }, ref) => {
    const needRenderLeftAddons = Boolean(leftAddons || badge);
    const iconComponents = getBadgeIcons
        ? getBadgeIcons(iconDefaultComponents)
        : iconDefaultComponents;
    const handleClose = useCallback(event => {
        if (onClose) {
            onClose(event);
        }
    }, [onClose]);
    return (React.createElement("div", Object.assign({ className: cn(styles.component, { [styles.block]: block, [styles.hasCloser]: hasCloser }, className), ref: ref, "data-test-id": dataTestId }, restProps),
        React.createElement("div", { className: styles.contentWrap },
            React.createElement("div", { className: cn(contentClassName, styles.content) },
                needRenderLeftAddons && (React.createElement("div", { className: styles.leftAddons }, leftAddons || (React.createElement(Badge, { view: 'icon', content: badge && iconComponents[badge], iconColor: badge, className: styles.badge, dataTestId: 'badge' })))),
                React.createElement("div", null,
                    title && React.createElement("div", { className: styles.title }, title),
                    children && React.createElement("div", { className: styles.children }, children))),
            actionButton && (React.createElement("div", { className: cn(styles.actionSection, {
                    [styles.hasCloser]: hasCloser,
                }) }, actionButton)),
            hasCloser && (React.createElement(Button, { colors: 'inverted', className: cn(styles.closeButton), view: 'ghost', onClick: handleClose, "aria-label": '\u0437\u0430\u043A\u0440\u044B\u0442\u044C', leftAddons: React.createElement(CrossMIcon, null) })))));
});

export { ToastPlate };
