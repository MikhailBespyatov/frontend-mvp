import React, { forwardRef } from 'react';
import cn from 'classnames';
import { getPath } from './utils.js';

var styles = {"componentWrapper":"icon-view__componentWrapper_3wsy4","component":"icon-view__component_3wsy4","border":"icon-view__border_3wsy4","children":"icon-view__children_3wsy4","addons":"icon-view__addons_3wsy4","size_48":"icon-view__size_48_3wsy4","topAddons":"icon-view__topAddons_3wsy4","bottomAddons":"icon-view__bottomAddons_3wsy4","size_64":"icon-view__size_64_3wsy4","size_80":"icon-view__size_80_3wsy4","size_128":"icon-view__size_128_3wsy4"};
require('./index.css');

const BaseShape = forwardRef(({ size = 64, border = false, backgroundColor = '#f3f4f5', imageUrl, className, children, topAddons, bottomAddons, pathsMap, dataTestId, }, ref) => {
    const imagePatternId = imageUrl && `${imageUrl.replace(/[^a-z]+/g, '')}_${size}`;
    const hasTopAddons = Boolean(topAddons);
    const hasBottomAddons = Boolean(bottomAddons);
    const imagePattern = imagePatternId && (React.createElement("defs", null,
        React.createElement("pattern", { id: imagePatternId, width: '100%', height: '100%' },
            React.createElement("image", { href: imageUrl, width: '100%', height: '100%', preserveAspectRatio: 'xMidYMid slice' }))));
    return (React.createElement("div", { className: cn(styles.componentWrapper, styles[`size_${size}`], className), ref: ref, "data-test-id": dataTestId },
        React.createElement("div", { className: styles.component },
            React.createElement("svg", { width: size, height: size, viewBox: `0 0 ${size} ${size}`, xmlns: 'http://www.w3.org/2000/svg', focusable: false },
                imagePattern,
                React.createElement("path", { fill: imagePatternId ? `url(#${imagePatternId})` : backgroundColor, d: getPath({
                        size,
                        hasTopAddons,
                        hasBottomAddons,
                        pathsMap: pathsMap.shape,
                    }) }),
                border && (React.createElement("path", { className: styles.border, d: getPath({
                        size,
                        hasTopAddons,
                        hasBottomAddons,
                        pathsMap: pathsMap.border,
                    }) }))),
            !imageUrl && React.createElement("div", { className: styles.children }, children)),
        hasTopAddons && (React.createElement("div", { className: cn(styles.addons, styles.topAddons) }, topAddons)),
        hasBottomAddons && (React.createElement("div", { className: cn(styles.addons, styles.bottomAddons) }, bottomAddons))));
});

export { BaseShape };
