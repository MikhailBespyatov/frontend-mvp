import { _ as __rest, a as __assign } from '../../tslib.es6-4b711877.js';
import React, { useContext, useMemo, useCallback } from 'react';
import cn from 'classnames';
import { TableContext } from '../table-context/index.js';
import { Select } from '../../../../select/esm';
import { Pagination as Pagination$1 } from '../../../../pagination/esm';
import '../../../../button/esm';
import { CustomSelectField } from './select-field/index.js';

var styles = {"component":"table__component_1dnop","pagesWrapper":"table__pagesWrapper_1dnop","tag":"table__tag_1dnop","tagActive":"table__tagActive_1dnop","menu":"table__menu_1dnop","option":"table__option_1dnop"};
require('./index.css');

var Pagination = function (_a) {
    var _b = _a.perPage, perPage = _b === void 0 ? 25 : _b, _c = _a.possiblePerPage, possiblePerPage = _c === void 0 ? [25, 50, 100] : _c, _d = _a.onPerPageChange, onPerPageChange = _d === void 0 ? function () { return null; } : _d, pagesCount = _a.pagesCount, _e = _a.onPageChange, onPageChange = _e === void 0 ? function () { return null; } : _e, className = _a.className, dataTestId = _a.dataTestId, restPaginationProps = __rest(_a, ["perPage", "possiblePerPage", "onPerPageChange", "pagesCount", "onPageChange", "className", "dataTestId"]);
    var wrapperRef = useContext(TableContext).wrapperRef;
    var options = useMemo(function () {
        return Array.from(new Set(possiblePerPage.concat(perPage)))
            .sort(function (a, b) { return a - b; })
            .map(function (value) { return ({
            key: value.toString(),
            content: "\u041F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u043F\u043E " + value,
        }); });
    }, [perPage, possiblePerPage]);
    var handlePerPageChange = useCallback(function (_a) {
        var selected = _a.selected;
        onPerPageChange(Number(selected === null || selected === void 0 ? void 0 : selected.key));
    }, [onPerPageChange]);
    var handlePageChange = useCallback(function (pageIndex) {
        onPageChange(pageIndex);
        setTimeout(function () {
            if (wrapperRef.current) {
                wrapperRef.current.scrollIntoView();
            }
        }, 0);
    }, [onPageChange, wrapperRef]);
    if (pagesCount <= 1)
        return null;
    return (React.createElement("div", { className: cn(styles.component, className), "data-test-id": dataTestId },
        React.createElement(Select, { options: options, selected: perPage.toString(), onChange: handlePerPageChange, preventFlip: false, size: 's', className: styles.select, optionsListClassName: styles.menu, optionClassName: styles.option, Field: CustomSelectField }),
        React.createElement(Pagination$1, __assign({ pagesCount: pagesCount, onPageChange: handlePageChange }, restPaginationProps))));
};

export { Pagination };
