import React, { useContext, useMemo, useCallback } from 'react';
import cn from 'classnames';
import { TableContext } from '../table-context/index.js';
import { Select } from '../../../../select/modern';
import { Pagination as Pagination$1 } from '../../../../pagination/modern';
import '../../../../button/modern';
import { CustomSelectField } from './select-field/index.js';

var styles = {"component":"table__component_1dnop","pagesWrapper":"table__pagesWrapper_1dnop","tag":"table__tag_1dnop","tagActive":"table__tagActive_1dnop","menu":"table__menu_1dnop","option":"table__option_1dnop"};
require('./index.css');

const Pagination = ({ perPage = 25, possiblePerPage = [25, 50, 100], onPerPageChange = () => null, pagesCount, onPageChange = () => null, className, dataTestId, ...restPaginationProps }) => {
    const { wrapperRef } = useContext(TableContext);
    const options = useMemo(() => Array.from(new Set(possiblePerPage.concat(perPage)))
        .sort((a, b) => a - b)
        .map(value => ({
        key: value.toString(),
        content: `Показывать по ${value}`,
    })), [perPage, possiblePerPage]);
    const handlePerPageChange = useCallback(({ selected }) => {
        onPerPageChange(Number(selected?.key));
    }, [onPerPageChange]);
    const handlePageChange = useCallback((pageIndex) => {
        onPageChange(pageIndex);
        setTimeout(() => {
            if (wrapperRef.current) {
                wrapperRef.current.scrollIntoView();
            }
        }, 0);
    }, [onPageChange, wrapperRef]);
    if (pagesCount <= 1)
        return null;
    return (React.createElement("div", { className: cn(styles.component, className), "data-test-id": dataTestId },
        React.createElement(Select, { options: options, selected: perPage.toString(), onChange: handlePerPageChange, preventFlip: false, size: 's', className: styles.select, optionsListClassName: styles.menu, optionClassName: styles.option, Field: CustomSelectField }),
        React.createElement(Pagination$1, Object.assign({ pagesCount: pagesCount, onPageChange: handlePageChange }, restPaginationProps))));
};

export { Pagination };
