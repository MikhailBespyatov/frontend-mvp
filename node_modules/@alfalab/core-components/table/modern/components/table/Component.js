import React, { forwardRef, useRef, useMemo } from 'react';
import cn from 'classnames';
import '../thead/Component.js';
import '../../utils.js';
import { findAllHeadCellsProps } from './utils.js';
import { TableContext } from '../table-context/index.js';

var styles = {"component":"table__component_1q7yw","wrapper":"table__wrapper_1q7yw","hasPagination":"table__hasPagination_1q7yw","table":"table__table_1q7yw"};
require('./index.css');

const Table = forwardRef(({ className, children, compactView = false, wrapper = true, pagination, dataTestId, ...restProps }, ref) => {
    const wrapperRef = useRef(null);
    const columnsConfiguration = useMemo(() => findAllHeadCellsProps(children).map((columnProps, index) => ({
        width: columnProps.width,
        textAlign: columnProps.textAlign,
        hidden: columnProps.hidden,
        index,
    })), [children]);
    return (React.createElement(TableContext.Provider, { value: { columnsConfiguration, compactView, wrapperRef } },
        React.createElement("div", { ref: wrapperRef, className: cn(styles.component, className, {
                [styles.wrapper]: wrapper,
                [styles.hasPagination]: !!pagination,
            }), "data-test-id": dataTestId },
            React.createElement("table", Object.assign({ ref: ref, className: styles.table }, restProps), children),
            pagination)));
});

export { Table };
