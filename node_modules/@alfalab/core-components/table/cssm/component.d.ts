/// <reference types="react" />
declare const Table: import("react").ForwardRefExoticComponent<import("react").TableHTMLAttributes<HTMLTableElement> & {
    compactView?: boolean | undefined;
    className?: string | undefined;
    children: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)>[];
    wrapper?: boolean | undefined;
    pagination?: import("react").ReactNode;
    dataTestId?: string | undefined;
} & import("react").RefAttributes<HTMLTableElement>> & {
    TBody: import("react").FC<import("./components/index").TBodyProps>;
    THead: import("react").FC<import("./components/index").THeadProps>;
    THeadCell: ({ children, className, dataTestId, style, width, textAlign, hidden, ...restProps }: import("./components/index").THeadCellProps) => JSX.Element;
    TSortableHeadCell: ({ children, className, defaultIsSortedDesc, isSortedDesc, textAlign, onSort, ...restProps }: import("./components/index").TSortableHeadCellProps) => JSX.Element;
    TCell: ({ className, style, dataTestId, children, index, ...restProps }: import("./components/index").TCellProps) => JSX.Element;
    TRow: ({ children, className, selected, withoutBorder, dataTestId, ...restProps }: import("./components/index").TRowProps) => JSX.Element;
    TExpandableRow: ({ className, selected, expanded, defaultExpanded, onToggle, renderContent, ...restProps }: import("./components/index").TExpandableRowProps) => JSX.Element;
    Pagination: import("react").FC<import("packages/pagination/src").PaginationProps & {
        perPage?: number | undefined;
        possiblePerPage?: number[] | undefined;
        onPerPageChange?: ((perPage: number) => void) | undefined;
        dataTestId?: string | undefined;
    }>;
};
export { Table };
