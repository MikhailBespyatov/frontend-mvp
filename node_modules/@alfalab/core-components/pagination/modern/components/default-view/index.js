import React, { useCallback } from 'react';
import 'classnames';
import '../../../../tag/modern';
import { Tag } from '../tag/index.js';

var styles = {"dots":"pagination__dots_hzik7"};
require('./index.css');

const DefaultView = ({ sidePadding = 2, activePadding = 1, pagesCount, currentPageIndex, onPageChange = () => null, }) => {
    const maxHalfCount = sidePadding + activePadding + 1;
    const maxElementsCount = maxHalfCount * 2 + 1;
    const itemsFit = pagesCount <= maxElementsCount;
    const elementsCount = itemsFit ? pagesCount : maxElementsCount;
    const getPageIndex = useCallback((elementIndex) => {
        const lastIndex = pagesCount - 1;
        const reverseIndex = lastIndex - currentPageIndex;
        const lastElementIndex = elementsCount - 1;
        const reverseElementIndex = lastElementIndex - elementIndex;
        const hasCollapsedItems = (index) => !itemsFit && index >= maxHalfCount;
        if (elementIndex < sidePadding) {
            return elementIndex;
        }
        if (elementIndex === sidePadding && hasCollapsedItems(currentPageIndex)) {
            return null;
        }
        if (reverseElementIndex === sidePadding && hasCollapsedItems(reverseIndex)) {
            return null;
        }
        if (reverseElementIndex < sidePadding) {
            return lastIndex - reverseElementIndex;
        }
        const computedIndex = currentPageIndex - maxHalfCount + elementIndex;
        return Math.min(lastIndex - reverseElementIndex, Math.max(elementIndex, computedIndex));
    }, [currentPageIndex, elementsCount, itemsFit, maxHalfCount, pagesCount, sidePadding]);
    return (React.createElement(React.Fragment, null, Array(elementsCount)
        .fill('')
        .map((_, i) => {
        const pageIndex = getPageIndex(i);
        if (pageIndex === null) {
            return (React.createElement("div", { key: i.toString(), className: styles.dots }, "..."));
        }
        const active = currentPageIndex === pageIndex;
        return (React.createElement(Tag, { key: i.toString(), checked: active, disabled: active, onClick: () => onPageChange(pageIndex) }, pageIndex + 1));
    })));
};

export { DefaultView };
