Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var cn = require('classnames');
var coreComponentsButton = require('../../../../button/cssm');
var utils = require('@alfalab/utils');
var hooks = require('@alfalab/hooks');
require('../countdown-loader/index.module.css');
var components_countdownLoader_component = require('../countdown-loader/component.js');
var styles = require('./index.module.css');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);
var styles__default = /*#__PURE__*/_interopDefaultLegacy(styles);

/**
 * TODO: Вынести это в utils
 * Форматирование миллисекунд в hh:mm:ss.
 *
 * @param {Number} ms миллисекунды
 * @returns {String} время в формате mm:ss
 */
function formatMsAsMinutes(ms) {
    var totalSeconds = Math.ceil(ms / 1000);
    var totalMinutes = Math.floor(totalSeconds / 60);
    var totalHours = Math.floor(totalMinutes / 60);
    var seconds = totalSeconds % 60;
    var paddedSeconds = ("00" + seconds).slice(-2);
    if (totalHours > 0) {
        var minutes = totalMinutes % 60;
        var paddedMinutes_1 = ("00" + minutes).slice(-2);
        var paddedHours = ("00" + totalHours).slice(-2);
        return paddedHours + ":" + paddedMinutes_1 + ":" + paddedSeconds;
    }
    var paddedMinutes = ("00" + totalMinutes).slice(-2);
    return paddedMinutes + ":" + paddedSeconds;
}
var Container = function (_a) {
    var _b;
    var alignContent = _a.alignContent, hasError = _a.hasError, children = _a.children;
    return (React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].component, styles__default['default'][alignContent], (_b = {},
            _b[styles__default['default'].hasError] = hasError,
            _b)) }, children));
};
var Countdown = function (_a) {
    var _b = _a.duration, duration = _b === void 0 ? 5000 : _b, _c = _a.phone, phone = _c === void 0 ? '' : _c, _d = _a.hasPhoneMask, hasPhoneMask = _d === void 0 ? true : _d, buttonRetryText = _a.buttonRetryText, alignContent = _a.alignContent, noAttemptsLeftMessage = _a.noAttemptsLeftMessage, hasError = _a.hasError, content = _a.content, onRepeatSms = _a.onRepeatSms, onCountdownFinished = _a.onCountdownFinished;
    var timerId = React.useRef(0);
    var start = React.useRef(0);
    var _e = React.useState(false), repeatSmsButtonShow = _e[0], setRepeatSmsButtonShow = _e[1];
    var _f = React.useState(0), timePassed = _f[0], setTimePassed = _f[1];
    var noAttemptsLeftMessagePrev = hooks.usePrevious(noAttemptsLeftMessage);
    var stopTimer = React.useCallback(function () {
        window.clearInterval(timerId.current);
    }, []);
    var updateProgress = React.useCallback(function () {
        var passed = Date.now() - start.current;
        if (passed >= duration) {
            setRepeatSmsButtonShow(true);
            if (onCountdownFinished) {
                onCountdownFinished();
            }
            stopTimer();
        }
        else {
            setTimePassed(passed);
        }
    }, [duration, onCountdownFinished, stopTimer]);
    var startTimer = React.useCallback(function () {
        start.current = Date.now();
        updateProgress();
        timerId.current = window.setInterval(updateProgress, 50);
    }, [updateProgress]);
    var handleRepeatSmsButtonClick = React.useCallback(function (event) {
        setRepeatSmsButtonShow(false);
        if (onRepeatSms) {
            onRepeatSms(event);
        }
        startTimer();
    }, [onRepeatSms, startTimer]);
    React.useEffect(function () {
        startTimer();
        return function () {
            stopTimer();
        };
    }, [startTimer, stopTimer]);
    React.useEffect(function () {
        // Если кончились попытки ввода кода, то останавливаем таймер
        if (!noAttemptsLeftMessagePrev && noAttemptsLeftMessage) {
            stopTimer();
        }
    }, [noAttemptsLeftMessage, noAttemptsLeftMessagePrev, stopTimer]);
    var progress = timePassed / duration;
    var formattedPhone = utils.phoneNumber.format(phone);
    var retryButton = (React__default['default'].createElement(coreComponentsButton.Button, { size: 'xs', view: 'secondary', onClick: handleRepeatSmsButtonClick, className: styles__default['default'].getCodeButton }, buttonRetryText));
    if (content) {
        return (React__default['default'].createElement(Container, { alignContent: alignContent, hasError: hasError },
            React__default['default'].createElement("div", { className: styles__default['default'].customContent }, content),
            retryButton));
    }
    return (React__default['default'].createElement(Container, { alignContent: alignContent, hasError: hasError },
        phone && !hasError && (React__default['default'].createElement("div", null,
            "\u041A\u043E\u0434 \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D \u043D\u0430",
            ' ',
            hasPhoneMask ? utils.phoneNumber.mask(formattedPhone) : formattedPhone)),
        noAttemptsLeftMessage ? (React__default['default'].createElement("div", { className: styles__default['default'].noAttemptsLeftMessage }, noAttemptsLeftMessage)) : repeatSmsButtonShow ? (retryButton) : (React__default['default'].createElement("div", null,
            React__default['default'].createElement("div", { className: styles__default['default'].info }, "\u0417\u0430\u043F\u0440\u043E\u0441\u0438\u0442\u044C \u043F\u043E\u0432\u0442\u043E\u0440\u043D\u043E \u043C\u043E\u0436\u043D\u043E \u0447\u0435\u0440\u0435\u0437"),
            React__default['default'].createElement("div", { className: styles__default['default'].loaderWrap },
                React__default['default'].createElement(components_countdownLoader_component.CountdownLoader, { progress: progress, className: styles__default['default'].loader }),
                React__default['default'].createElement("div", { className: styles__default['default'].timePassed }, formatMsAsMinutes(duration - timePassed)))))));
};

exports.Countdown = Countdown;
exports.formatMsAsMinutes = formatMsAsMinutes;
