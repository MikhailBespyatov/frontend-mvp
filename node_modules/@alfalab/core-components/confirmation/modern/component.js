import React, { forwardRef, useState, useRef, useCallback, useEffect } from 'react';
import cn from 'classnames';
import '@alfalab/utils';
import '@alfalab/hooks';
import '@alfalab/icons-glyph';
import { Button } from '../../button/modern';
import { Link } from '../../link/modern';
import './components/countdown-loader/component.js';
import './components/countdown/component.js';
import '../../loader/modern';
import './components/code-input/utils.js';
import './components/code-input/component.js';
import { SignConfirmation } from './components/sign-confirmation/component.js';
import { Overlimit } from './components/overlimit/component.js';

var styles = {"component":"confirmation__component_4crub","error":"confirmation__error_4crub","errorHeader":"confirmation__errorHeader_4crub","errorText":"confirmation__errorText_4crub","phoneHintWrap":"confirmation__phoneHintWrap_4crub","phoneHintText":"confirmation__phoneHintText_4crub","phonesWrap":"confirmation__phonesWrap_4crub","phoneWrap":"confirmation__phoneWrap_4crub","phoneDescription":"confirmation__phoneDescription_4crub","center":"confirmation__center_4crub"};
require('./index.css');

const Confirmation = forwardRef(({ additionalContent, className, countdownDuration = 60000, dataTestId, errorIsFatal, errorTitle = 'Превышено количество попыток ввода кода', error = false, errorOverlimit = false, errorOverlimitIsFatal = false, errorText, hasPhoneMask = true, hasSmsCountdown = true, phone, requiredCharAmount = 5, signTitle = 'Введите код из\xa0сообщения', overlimitTitle = 'Превышено количество\n попыток ввода кода', overlimitText = 'Повторное подтверждение кодом из SMS\n будет возможно через', overlimitCountdownDuration, code, codeSending = false, codeChecking = false, codeCheckingText = 'Проверка кода', codeSendingText = 'Отправляем код', buttonErrorText = 'Понятно', buttonReturnText = 'Вернуться назад', buttonRetryText = 'Запросить новый код', alignContent = 'left', noAttemptsLeftMessage, countdownContent, onInputFinished, onSmsRetryClick, onOverlimitSmsRetryClick, onActionWithFatalError, onCountdownFinished, onOverlimitCountdownFinished, onInputChange, onSmsHintLinkClick, }, ref) => {
    const [showHint, setShowHint] = useState(false);
    const shouldShowFatalError = errorIsFatal && Boolean(errorText);
    const shouldShowOverlimitError = !errorIsFatal && !showHint && errorOverlimit;
    const shouldShowSignComponent = !showHint && !shouldShowFatalError && !shouldShowOverlimitError;
    const shouldShowHint = showHint && !shouldShowFatalError && !shouldShowOverlimitError;
    const nonFatalError = errorIsFatal ? '' : errorText;
    const inputRef = useRef(null);
    const handleSmsRetryClick = useCallback(() => {
        onSmsRetryClick();
    }, [onSmsRetryClick]);
    const handleOverlimitSmsRetryClick = useCallback(() => {
        if (onOverlimitSmsRetryClick) {
            onOverlimitSmsRetryClick();
        }
    }, [onOverlimitSmsRetryClick]);
    const handleSmsRetryFromHintClick = useCallback(() => {
        setShowHint(false);
        if (!noAttemptsLeftMessage) {
            onSmsRetryClick();
        }
    }, [onSmsRetryClick, noAttemptsLeftMessage]);
    const handleCountdownFinished = useCallback(() => {
        if (onCountdownFinished) {
            onCountdownFinished();
        }
    }, [onCountdownFinished]);
    const handleOverlimitCountdownFinished = useCallback(() => {
        if (onOverlimitCountdownFinished) {
            onOverlimitCountdownFinished();
        }
    }, [onOverlimitCountdownFinished]);
    const handleSmsHintLinkClick = useCallback(() => {
        setShowHint(true);
        if (onSmsHintLinkClick) {
            onSmsHintLinkClick();
        }
    }, [onSmsHintLinkClick]);
    const handleErrorSmsRetryClick = useCallback(() => {
        if (onActionWithFatalError) {
            onActionWithFatalError();
        }
        else {
            onSmsRetryClick();
        }
    }, [onActionWithFatalError, onSmsRetryClick]);
    useEffect(() => {
        if (inputRef.current) {
            inputRef.current.focus();
        }
    }, []);
    return (React.createElement("div", { className: cn(styles.component, styles[alignContent], className), ref: ref, "data-test-id": dataTestId },
        shouldShowSignComponent && (React.createElement(SignConfirmation, { codeChecking: codeChecking, codeSending: codeSending, smsHintVisible: !codeChecking, additionalContent: additionalContent, requiredCharAmount: requiredCharAmount, hasSmsCountdown: hasSmsCountdown, countdownDuration: countdownDuration, phone: phone, code: code, hasPhoneMask: hasPhoneMask, errorText: nonFatalError || '', error: error, title: signTitle, buttonRetryText: buttonRetryText, inputRef: inputRef, codeCheckingText: codeCheckingText, codeSendingText: codeSendingText, alignContent: alignContent, noAttemptsLeftMessage: noAttemptsLeftMessage, countdownContent: countdownContent, onInputFinished: onInputFinished, onInputChange: onInputChange, onSmsRetryClick: handleSmsRetryClick, onCountdownFinished: handleCountdownFinished, onSmsHintLinkClick: handleSmsHintLinkClick })),
        shouldShowOverlimitError && (React.createElement(Overlimit, { duration: overlimitCountdownDuration, title: overlimitTitle, text: overlimitText, hasFatalError: errorOverlimitIsFatal, buttonRetryText: buttonRetryText, onOverlimitRepeatSms: handleOverlimitSmsRetryClick, onOverlimitCountdownFinished: handleOverlimitCountdownFinished })),
        shouldShowFatalError && (React.createElement("div", { className: styles.error, role: 'alert' },
            React.createElement("span", { className: styles.errorHeader }, errorTitle),
            React.createElement("span", { className: styles.errorText }, errorText),
            React.createElement(Button, { size: 'xs', view: 'secondary', onClick: handleErrorSmsRetryClick }, buttonErrorText))),
        shouldShowHint && (React.createElement("div", { className: styles.phoneHintWrap },
            React.createElement("span", { className: styles.errorHeader }, "\u041D\u0435\u00A0\u043F\u0440\u0438\u0445\u043E\u0434\u0438\u0442 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435?"),
            React.createElement("span", { className: styles.phoneHintText }, "\u0415\u0441\u043B\u0438 \u0443\u00A0\u0432\u0430\u0441 \u0441\u043C\u0435\u043D\u0438\u043B\u0441\u044F \u043D\u043E\u043C\u0435\u0440 \u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0430, \u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043E\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044C \u0432\u00A0\u043B\u044E\u0431\u043E\u0435 \u043E\u0442\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0431\u0430\u043D\u043A\u0430."),
            React.createElement("div", { className: styles.phonesWrap },
                React.createElement("div", { className: styles.phoneWrap },
                    React.createElement(Link, { className: styles.phoneLink, href: 'tel:+78002000000' }, "8 800 200-00-00"),
                    React.createElement("span", { className: styles.phoneDescription },
                        ' ',
                        "\u2014\u00A0\u0434\u043B\u044F \u0437\u0432\u043E\u043D\u043A\u043E\u0432 \u043F\u043E\u00A0\u0420\u043E\u0441\u0441\u0438\u0438")),
                React.createElement("div", { className: styles.phoneWrap },
                    React.createElement(Link, { className: styles.phoneLink, href: 'tel:+74957888878' }, "+7 495 788-88-78"),
                    React.createElement("span", { className: styles.phoneDescription },
                        ' ',
                        "\u2014\u00A0\u0432\u00A0\u041C\u043E\u0441\u043A\u0432\u0435 \u0438\u00A0\u0437\u0430\u00A0\u0433\u0440\u0430\u043D\u0438\u0446\u0435\u0439"))),
            React.createElement(Button, { className: styles.repeatButton, size: 'xs', view: 'secondary', onClick: handleSmsRetryFromHintClick }, buttonReturnText)))));
});
/**
 * Для отображения в сторибуке
 */
Confirmation.defaultProps = {
    countdownDuration: 60000,
    errorTitle: 'Превышено количество попыток ввода кода',
    hasPhoneMask: true,
    hasSmsCountdown: true,
    requiredCharAmount: 5,
    signTitle: 'Введите код из\xa0сообщения',
    codeSending: false,
    codeChecking: false,
    codeCheckingText: 'Проверка кода',
    codeSendingText: 'Отправляем код',
    buttonErrorText: 'Понятно',
    buttonReturnText: 'Вернуться назад',
    buttonRetryText: 'Запросить новый код',
    alignContent: 'left',
};

export { Confirmation };
