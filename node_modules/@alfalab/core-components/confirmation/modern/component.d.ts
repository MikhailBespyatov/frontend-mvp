/// <reference types="react" />
import React from 'react';
import { ReactNode } from "react";
type ContentAlign = 'left' | 'center';
type ConfirmationProps = {
    /**
     * Значение поля ввода
     */
    code: string;
    /**
     * Флаг состояния обработки введенного кода.
     */
    codeChecking?: boolean;
    /**
     * Флаг состояния отправки кода.
     */
    codeSending?: boolean;
    /**
     * Состояние ошибки подписания
     */
    error?: boolean;
    /**
     * Состояние ошибки лимитов - превышено кол-во попыток ввода или запросов кода
     */
    errorOverlimit?: boolean;
    /**
     * Состояние критической ошибки лимитов - превышены все лимиты и попытки, пользователя блокируют
     */
    errorOverlimitIsFatal?: boolean;
    /**
     * Текст ошибки подписания
     */
    errorText?: string;
    /**
     * Дополнительный контент
     */
    additionalContent?: ReactNode;
    /**
     * Флаг критичности ошибки подписания.
     * Если true - ошибка подписания рисуется на экране без поля ввода, но с кнопкой "Запросить код"
     * Если false - ошибка подписания рисуется под полем ввода кода
     */
    errorIsFatal?: boolean;
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Номер телефона, на который отправляется сообщение.
     */
    phone?: string;
    /**
     * Управление необходимостью маскировать номер телефона
     */
    hasPhoneMask?: boolean;
    /**
     * Количество символов, которое можно ввести в поле ввода подписания до того, как произойдет автоотправка
     */
    requiredCharAmount?: number;
    /**
     * Управление отображением таймера с кнопкой "Запросить код"
     */
    hasSmsCountdown?: boolean;
    /**
     * Длительность обратного отсчета на кнопке повторного запроса сообщения, в милисекундах
     */
    countdownDuration?: number;
    /**
     * Заголовок экрана подписания
     */
    signTitle?: string | React.ReactNode;
    /**
     * Заголовок экрана ошибки лимитов
     */
    overlimitTitle?: string;
    /**
     * Текстовое описание блокировки формы при превышении лимитов
     */
    overlimitText?: string;
    /**
     * Длительно блокировки при превышении лимитов, в милисекундах
     */
    overlimitCountdownDuration?: number;
    /**
     * Заголовок экрана блокирующей ошибки
     */
    errorTitle?: string;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    dataTestId?: string;
    /**
     * Текст лоадера при проверке кода
     */
    codeCheckingText?: string;
    /**
     * Текст лоадера при отправке кода
     */
    codeSendingText?: string;
    /**
     * Текст кнопки при блокирующей ошибке
     */
    buttonErrorText?: string;
    /**
     * Текст кнопки "Вернуться назад" на экране помощи
     */
    buttonReturnText?: string;
    /**
     * Текст кнопки "Запросить новый код"
     */
    buttonRetryText?: string;
    /**
     * Позиционирование контента
     */
    alignContent?: ContentAlign;
    /**
     * Сообщение, если не осталось попыток ввода кода.
     * Кнопка повторной отправки смс при этом скрывается.
     */
    noAttemptsLeftMessage?: string;
    /**
     * Кастомный контент для компонента Countdown
     */
    countdownContent?: ReactNode;
    /**
     * Обработчик события завершения ввода кода подписания
     */
    onInputFinished: ({ code }: {
        code: string;
    }) => void;
    /**
     * Обработчик события изменения значения поля ввода кода подписания
     */
    onInputChange: ({ code }: {
        code: string;
    }) => void;
    /**
     * Обработчик события нажатия на кнопку "Запросить код"
     */
    onSmsRetryClick: () => void;
    /**
     * Обработчик события нажатия на кнопку "Запросить код" в блоке превышение лимитов
     */
    onOverlimitSmsRetryClick?: () => void;
    /**
     * Обработчик события завершения обратного отсчета для повторного запроса сообщения
     */
    onCountdownFinished?: () => void;
    /**
     * Обработчик события завершения обратного отсчета для блокировки формы
     */
    onOverlimitCountdownFinished?: () => void;
    /**
     * Обработчик события нажатия на ссылку "не приходит сообщение?"
     */
    onSmsHintLinkClick?: () => void;
    /**
     * Обработчик события нажатия на кнопку buttonErrorText (по дефолту "Понятно"), которая появляется при критической ошибке.
     * Если не передан, то вызывается onSmsRetryClick
     */
    onActionWithFatalError?: () => void;
};
declare const Confirmation: React.ForwardRefExoticComponent<ConfirmationProps & React.RefAttributes<HTMLDivElement>>;
export { ContentAlign, ConfirmationProps, Confirmation };
