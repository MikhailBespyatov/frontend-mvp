import React, { forwardRef, useState, useRef, useCallback, useEffect } from 'react';
import cn from 'classnames';
import { Button } from '../../button/esm';
import { Link } from '../../link/esm';
import '@alfalab/utils';
import '@alfalab/hooks';
import './components/countdown-loader/component.js';
import './components/countdown/component.js';
import '../../loader/esm';
import './components/code-input/utils.js';
import './components/code-input/component.js';
import { SignConfirmation } from './components/sign-confirmation/component.js';
import '@alfalab/icons-glyph';
import { Overlimit } from './components/overlimit/component.js';

var styles = {"component":"confirmation__component_4crub","error":"confirmation__error_4crub","errorHeader":"confirmation__errorHeader_4crub","errorText":"confirmation__errorText_4crub","phoneHintWrap":"confirmation__phoneHintWrap_4crub","phoneHintText":"confirmation__phoneHintText_4crub","phonesWrap":"confirmation__phonesWrap_4crub","phoneWrap":"confirmation__phoneWrap_4crub","phoneDescription":"confirmation__phoneDescription_4crub","center":"confirmation__center_4crub"};
require('./index.css');

var Confirmation = forwardRef(function (_a, ref) {
    var additionalContent = _a.additionalContent, className = _a.className, _b = _a.countdownDuration, countdownDuration = _b === void 0 ? 60000 : _b, dataTestId = _a.dataTestId, errorIsFatal = _a.errorIsFatal, _c = _a.errorTitle, errorTitle = _c === void 0 ? 'Превышено количество попыток ввода кода' : _c, _d = _a.error, error = _d === void 0 ? false : _d, _e = _a.errorOverlimit, errorOverlimit = _e === void 0 ? false : _e, _f = _a.errorOverlimitIsFatal, errorOverlimitIsFatal = _f === void 0 ? false : _f, errorText = _a.errorText, _g = _a.hasPhoneMask, hasPhoneMask = _g === void 0 ? true : _g, _h = _a.hasSmsCountdown, hasSmsCountdown = _h === void 0 ? true : _h, phone = _a.phone, _j = _a.requiredCharAmount, requiredCharAmount = _j === void 0 ? 5 : _j, _k = _a.signTitle, signTitle = _k === void 0 ? 'Введите код из\xa0сообщения' : _k, _l = _a.overlimitTitle, overlimitTitle = _l === void 0 ? 'Превышено количество\n попыток ввода кода' : _l, _m = _a.overlimitText, overlimitText = _m === void 0 ? 'Повторное подтверждение кодом из SMS\n будет возможно через' : _m, overlimitCountdownDuration = _a.overlimitCountdownDuration, code = _a.code, _o = _a.codeSending, codeSending = _o === void 0 ? false : _o, _p = _a.codeChecking, codeChecking = _p === void 0 ? false : _p, _q = _a.codeCheckingText, codeCheckingText = _q === void 0 ? 'Проверка кода' : _q, _r = _a.codeSendingText, codeSendingText = _r === void 0 ? 'Отправляем код' : _r, _s = _a.buttonErrorText, buttonErrorText = _s === void 0 ? 'Понятно' : _s, _t = _a.buttonReturnText, buttonReturnText = _t === void 0 ? 'Вернуться назад' : _t, _u = _a.buttonRetryText, buttonRetryText = _u === void 0 ? 'Запросить новый код' : _u, _v = _a.alignContent, alignContent = _v === void 0 ? 'left' : _v, noAttemptsLeftMessage = _a.noAttemptsLeftMessage, countdownContent = _a.countdownContent, onInputFinished = _a.onInputFinished, onSmsRetryClick = _a.onSmsRetryClick, onOverlimitSmsRetryClick = _a.onOverlimitSmsRetryClick, onActionWithFatalError = _a.onActionWithFatalError, onCountdownFinished = _a.onCountdownFinished, onOverlimitCountdownFinished = _a.onOverlimitCountdownFinished, onInputChange = _a.onInputChange, onSmsHintLinkClick = _a.onSmsHintLinkClick;
    var _w = useState(false), showHint = _w[0], setShowHint = _w[1];
    var shouldShowFatalError = errorIsFatal && Boolean(errorText);
    var shouldShowOverlimitError = !errorIsFatal && !showHint && errorOverlimit;
    var shouldShowSignComponent = !showHint && !shouldShowFatalError && !shouldShowOverlimitError;
    var shouldShowHint = showHint && !shouldShowFatalError && !shouldShowOverlimitError;
    var nonFatalError = errorIsFatal ? '' : errorText;
    var inputRef = useRef(null);
    var handleSmsRetryClick = useCallback(function () {
        onSmsRetryClick();
    }, [onSmsRetryClick]);
    var handleOverlimitSmsRetryClick = useCallback(function () {
        if (onOverlimitSmsRetryClick) {
            onOverlimitSmsRetryClick();
        }
    }, [onOverlimitSmsRetryClick]);
    var handleSmsRetryFromHintClick = useCallback(function () {
        setShowHint(false);
        if (!noAttemptsLeftMessage) {
            onSmsRetryClick();
        }
    }, [onSmsRetryClick, noAttemptsLeftMessage]);
    var handleCountdownFinished = useCallback(function () {
        if (onCountdownFinished) {
            onCountdownFinished();
        }
    }, [onCountdownFinished]);
    var handleOverlimitCountdownFinished = useCallback(function () {
        if (onOverlimitCountdownFinished) {
            onOverlimitCountdownFinished();
        }
    }, [onOverlimitCountdownFinished]);
    var handleSmsHintLinkClick = useCallback(function () {
        setShowHint(true);
        if (onSmsHintLinkClick) {
            onSmsHintLinkClick();
        }
    }, [onSmsHintLinkClick]);
    var handleErrorSmsRetryClick = useCallback(function () {
        if (onActionWithFatalError) {
            onActionWithFatalError();
        }
        else {
            onSmsRetryClick();
        }
    }, [onActionWithFatalError, onSmsRetryClick]);
    useEffect(function () {
        if (inputRef.current) {
            inputRef.current.focus();
        }
    }, []);
    return (React.createElement("div", { className: cn(styles.component, styles[alignContent], className), ref: ref, "data-test-id": dataTestId },
        shouldShowSignComponent && (React.createElement(SignConfirmation, { codeChecking: codeChecking, codeSending: codeSending, smsHintVisible: !codeChecking, additionalContent: additionalContent, requiredCharAmount: requiredCharAmount, hasSmsCountdown: hasSmsCountdown, countdownDuration: countdownDuration, phone: phone, code: code, hasPhoneMask: hasPhoneMask, errorText: nonFatalError || '', error: error, title: signTitle, buttonRetryText: buttonRetryText, inputRef: inputRef, codeCheckingText: codeCheckingText, codeSendingText: codeSendingText, alignContent: alignContent, noAttemptsLeftMessage: noAttemptsLeftMessage, countdownContent: countdownContent, onInputFinished: onInputFinished, onInputChange: onInputChange, onSmsRetryClick: handleSmsRetryClick, onCountdownFinished: handleCountdownFinished, onSmsHintLinkClick: handleSmsHintLinkClick })),
        shouldShowOverlimitError && (React.createElement(Overlimit, { duration: overlimitCountdownDuration, title: overlimitTitle, text: overlimitText, hasFatalError: errorOverlimitIsFatal, buttonRetryText: buttonRetryText, onOverlimitRepeatSms: handleOverlimitSmsRetryClick, onOverlimitCountdownFinished: handleOverlimitCountdownFinished })),
        shouldShowFatalError && (React.createElement("div", { className: styles.error, role: 'alert' },
            React.createElement("span", { className: styles.errorHeader }, errorTitle),
            React.createElement("span", { className: styles.errorText }, errorText),
            React.createElement(Button, { size: 'xs', view: 'secondary', onClick: handleErrorSmsRetryClick }, buttonErrorText))),
        shouldShowHint && (React.createElement("div", { className: styles.phoneHintWrap },
            React.createElement("span", { className: styles.errorHeader }, "\u041D\u0435\u00A0\u043F\u0440\u0438\u0445\u043E\u0434\u0438\u0442 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435?"),
            React.createElement("span", { className: styles.phoneHintText }, "\u0415\u0441\u043B\u0438 \u0443\u00A0\u0432\u0430\u0441 \u0441\u043C\u0435\u043D\u0438\u043B\u0441\u044F \u043D\u043E\u043C\u0435\u0440 \u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0430, \u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043E\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044C \u0432\u00A0\u043B\u044E\u0431\u043E\u0435 \u043E\u0442\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0431\u0430\u043D\u043A\u0430."),
            React.createElement("div", { className: styles.phonesWrap },
                React.createElement("div", { className: styles.phoneWrap },
                    React.createElement(Link, { className: styles.phoneLink, href: 'tel:+78002000000' }, "8 800 200-00-00"),
                    React.createElement("span", { className: styles.phoneDescription },
                        ' ',
                        "\u2014\u00A0\u0434\u043B\u044F \u0437\u0432\u043E\u043D\u043A\u043E\u0432 \u043F\u043E\u00A0\u0420\u043E\u0441\u0441\u0438\u0438")),
                React.createElement("div", { className: styles.phoneWrap },
                    React.createElement(Link, { className: styles.phoneLink, href: 'tel:+74957888878' }, "+7 495 788-88-78"),
                    React.createElement("span", { className: styles.phoneDescription },
                        ' ',
                        "\u2014\u00A0\u0432\u00A0\u041C\u043E\u0441\u043A\u0432\u0435 \u0438\u00A0\u0437\u0430\u00A0\u0433\u0440\u0430\u043D\u0438\u0446\u0435\u0439"))),
            React.createElement(Button, { className: styles.repeatButton, size: 'xs', view: 'secondary', onClick: handleSmsRetryFromHintClick }, buttonReturnText)))));
});
/**
 * Для отображения в сторибуке
 */
Confirmation.defaultProps = {
    countdownDuration: 60000,
    errorTitle: 'Превышено количество попыток ввода кода',
    hasPhoneMask: true,
    hasSmsCountdown: true,
    requiredCharAmount: 5,
    signTitle: 'Введите код из\xa0сообщения',
    codeSending: false,
    codeChecking: false,
    codeCheckingText: 'Проверка кода',
    codeSendingText: 'Отправляем код',
    buttonErrorText: 'Понятно',
    buttonReturnText: 'Вернуться назад',
    buttonRetryText: 'Запросить новый код',
    alignContent: 'left',
};

export { Confirmation };
