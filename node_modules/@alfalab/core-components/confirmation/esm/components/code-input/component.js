import React, { forwardRef, useRef, useImperativeHandle, useCallback, useEffect } from 'react';
import cn from 'classnames';
import { usePrevious } from '@alfalab/hooks';
import { mergeArrays } from './utils.js';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

var styles = {"component":"confirmation__component_1s527","input":"confirmation__input_1s527","hasError":"confirmation__hasError_1s527","center":"confirmation__center_1s527","disabled":"confirmation__disabled_1s527","compact":"confirmation__compact_1s527","shake":"confirmation__shake_1s527"};
require('./index.css');

var Input = function (_a) {
    var _b;
    var index = _a.index, slotsCount = _a.slotsCount, error = _a.error, processing = _a.processing, value = _a.value, alignContent = _a.alignContent, handleChange = _a.handleChange, handleInputKeyDown = _a.handleInputKeyDown, setRef = _a.setRef, focus = _a.focus;
    var splittedValue = value.split('');
    var inputRef = useRef(null);
    var onChange = function (event) {
        var targetValue = event.target.value;
        if (/^\d$/.test(targetValue)) {
            var newValues = __spreadArrays(splittedValue);
            newValues[index] = targetValue;
            handleChange(newValues.join(''));
        }
        else if (/^\d{1,}$/.test(targetValue) && index !== slotsCount - 1) {
            /*
             * если пользователь хочет ввести более 1 цифры в инпут,
             * то предполагаем, что это вставка кода (например, из смс)
             */
            var newValues = mergeArrays({
                sourceArray: splittedValue,
                targetArray: targetValue.split(''),
                startIndex: index,
                resultArrayLength: slotsCount,
            });
            handleChange(newValues.join(''));
        }
    };
    var onInputKeyDown = function (event) {
        var key = event.key;
        var newValues = __spreadArrays(splittedValue);
        switch (key) {
            case 'Backspace':
            case 'Delete':
                newValues[index] = '';
                handleChange(newValues.join('').trim());
                if (index !== 0) {
                    focus(index - 1);
                }
                break;
            case 'ArrowRight':
                if (index !== slotsCount - 1) {
                    focus(index + 1);
                }
                break;
            case 'ArrowLeft':
                if (index !== 0) {
                    focus(index - 1);
                }
                break;
            case 'Home':
                focus(0);
                break;
            case 'End':
                focus(slotsCount - 1);
                break;
        }
        handleInputKeyDown(event);
    };
    var handleRef = function (node) {
        inputRef.current = node;
        setRef({ node: node, index: index });
    };
    return (React.createElement("input", { className: cn(styles.input, styles[alignContent], (_b = {},
            _b[styles.hasError] = error,
            _b[styles.disabled] = processing,
            _b)), disabled: processing, value: splittedValue[index] || '', autoComplete: index === 0 ? 'one-time-code' : '', inputMode: 'numeric', pattern: '[0-9]*', onChange: onChange, onKeyDown: onInputKeyDown, ref: handleRef }));
};
var CodeInput = forwardRef(function (_a, ref) {
    var _b;
    var processing = _a.processing, _c = _a.value, value = _c === void 0 ? '' : _c, slotsCount = _a.slotsCount, error = _a.error, handleInputKeyDown = _a.handleInputKeyDown, handleChange = _a.handleChange, className = _a.className, alignContent = _a.alignContent;
    var inputs = useRef([]);
    useImperativeHandle(ref, function () { return inputs.current[0]; });
    var prevValue = usePrevious(value) || '';
    var focus = useCallback(function (index) {
        var input = inputs.current[index];
        if (input) {
            input.focus();
            input.setSelectionRange(1, 1);
        }
    }, []);
    var setRef = useCallback(function (_a) {
        var node = _a.node, index = _a.index;
        inputs.current[index] = node;
    }, []);
    /**
     * Устанавливаем фокус на инпуте:
     * 1) если код введен неверно
     * 2) по нажатию кнопки 'Запросить код'
     */
    useEffect(function () {
        var inputIndex = value.length === slotsCount ? value.length - 1 : value.length;
        var needFocus = !processing || error;
        if (needFocus && value.length === prevValue.length) {
            focus(inputIndex);
        }
    }, [focus, error, slotsCount, value.length, prevValue.length, processing]);
    useEffect(function () {
        if (value.length > prevValue.length && value.length < slotsCount) {
            /**
             * Если value.length увеличился - ставим фокус на следующем инпуте
             */
            var nextInputIndex = value.length;
            focus(nextInputIndex);
        }
        else if (value.length <= prevValue.length && value.length > 0) {
            /**
             * Если value.length уменьшился - ставим фокус на предыдущем инпуте
             */
            var nextInputIndex = value.length - 1;
            focus(nextInputIndex);
        }
    }, [value.length, prevValue.length, slotsCount, focus]);
    return (React.createElement("div", { className: cn(styles.component, className, (_b = {},
            _b[styles.shake] = Boolean(error),
            _b[styles.compact] = slotsCount > 6,
            _b)) }, new Array(slotsCount).fill('').map(function (_, index) { return (React.createElement(Input, { value: value, index: index, error: error, processing: processing, slotsCount: slotsCount, alignContent: alignContent, handleChange: handleChange, handleInputKeyDown: handleInputKeyDown, setRef: setRef, focus: focus, 
        // eslint-disable-next-line react/no-array-index-key
        key: index })); })));
});

export { CodeInput };
