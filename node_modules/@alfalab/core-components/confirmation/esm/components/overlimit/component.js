import React, { useRef, useState, useCallback, useEffect } from 'react';
import 'classnames';
import { Button } from '../../../../button/esm';
import '@alfalab/utils';
import '@alfalab/hooks';
import { CountdownLoader } from '../countdown-loader/component.js';
import { formatMsAsMinutes } from '../countdown/component.js';
import { CrossCircleMIcon } from '@alfalab/icons-glyph';

var styles = {"component":"confirmation__component_1iqq7","title":"confirmation__title_1iqq7","description":"confirmation__description_1iqq7","countdown":"confirmation__countdown_1iqq7","loader":"confirmation__loader_1iqq7","timePassed":"confirmation__timePassed_1iqq7","getCodeButton":"confirmation__getCodeButton_1iqq7","alertIcon":"confirmation__alertIcon_1iqq7"};
require('./index.css');

var Overlimit = function (_a) {
    var _b = _a.duration, duration = _b === void 0 ? 60000 : _b, buttonRetryText = _a.buttonRetryText, hasFatalError = _a.hasFatalError, onOverlimitRepeatSms = _a.onOverlimitRepeatSms, onOverlimitCountdownFinished = _a.onOverlimitCountdownFinished, text = _a.text, title = _a.title;
    var timerId = useRef(0);
    var start = useRef(0);
    var _c = useState(false), isBlockingOver = _c[0], setIsBlockingOver = _c[1];
    var _d = useState(0), timePassed = _d[0], setTimePassed = _d[1];
    var stopTimer = useCallback(function () {
        window.clearInterval(timerId.current);
    }, []);
    var updateProgress = useCallback(function () {
        var passed = Date.now() - start.current;
        if (passed >= duration) {
            setIsBlockingOver(true);
            if (onOverlimitCountdownFinished) {
                onOverlimitCountdownFinished();
            }
            stopTimer();
        }
        else {
            setTimePassed(passed);
        }
    }, [duration, onOverlimitCountdownFinished, stopTimer]);
    var startTimer = useCallback(function () {
        start.current = Date.now();
        updateProgress();
        timerId.current = window.setInterval(updateProgress, 50);
    }, [updateProgress]);
    var handleRepeatSmsButtonClick = useCallback(function (event) {
        setIsBlockingOver(false);
        if (onOverlimitRepeatSms) {
            onOverlimitRepeatSms(event);
        }
        startTimer();
    }, [onOverlimitRepeatSms, startTimer]);
    useEffect(function () {
        startTimer();
        return function () {
            stopTimer();
        };
    }, [startTimer, stopTimer]);
    var progress = timePassed / duration;
    return (React.createElement("div", { className: styles.component },
        hasFatalError && (React.createElement("div", { className: styles.alertIcon },
            React.createElement(CrossCircleMIcon, { "data-test-id": 'alert-icon', width: 64, height: 64 }))),
        React.createElement("span", { className: styles.title }, title),
        React.createElement("div", { className: styles.description },
            React.createElement("div", null, text),
            isBlockingOver ? (React.createElement(Button, { size: 'xs', view: 'secondary', onClick: handleRepeatSmsButtonClick, className: styles.getCodeButton }, buttonRetryText)) : (React.createElement("div", { className: styles.countdown },
                React.createElement(CountdownLoader, { progress: progress, className: styles.loader }),
                React.createElement("div", { className: styles.timePassed }, formatMsAsMinutes(duration - timePassed)))))));
};

export { Overlimit };
