import React, { Children, isValidElement, cloneElement } from 'react';
import cn from 'classnames';

var styles = {"component":"checkbox-group__component_1g6n5","error":"checkbox-group__error_1g6n5","checkboxList":"checkbox-group__checkboxList_1g6n5","vertical":"checkbox-group__vertical_1g6n5","checkbox":"checkbox-group__checkbox_1g6n5","horizontal":"checkbox-group__horizontal_1g6n5","tag":"checkbox-group__tag_1g6n5","tagLabel":"checkbox-group__tagLabel_1g6n5","label":"checkbox-group__label_1g6n5","sub":"checkbox-group__sub_1g6n5","errorMessage":"checkbox-group__errorMessage_1g6n5","hint":"checkbox-group__hint_1g6n5","hiddenInput":"checkbox-group__hiddenInput_1g6n5"};
require('./index.css');

const CheckboxGroup = ({ children, className, direction = 'vertical', label, error, hint, onChange, type = 'checkbox', dataTestId, disabled = false, }) => {
    const renderCheckbox = (child) => {
        const { name, checked, className: childClassName } = child.props;
        const handleChange = (event) => {
            if (onChange) {
                onChange(event, { name, checked: !checked });
            }
        };
        return cloneElement(child, {
            onChange: handleChange,
            disabled,
            ...child.props,
            className: cn(childClassName, styles.checkbox),
        });
    };
    const renderTag = (child) => {
        const { name, checked } = child.props;
        const handleChange = (event) => {
            if (onChange) {
                onChange(event, { name, checked: !checked });
            }
        };
        const clone = cloneElement(child, { onClick: handleChange, disabled, ...child.props });
        return (
        // eslint-disable-next-line jsx-a11y/label-has-associated-control
        React.createElement("label", { className: cn(styles.checkbox, styles.tagLabel) },
            clone,
            React.createElement("input", { type: 'checkbox', autoComplete: 'off', onChange: handleChange, disabled: disabled || child.props.disabled, checked: checked, className: styles.hiddenInput })));
    };
    const errorMessage = typeof error === 'boolean' ? '' : error;
    return (React.createElement("div", { className: cn(styles.component, styles[type], styles[direction], { [styles.error]: error }, className), "data-test-id": dataTestId },
        label ? React.createElement("span", { className: styles.label }, label) : null,
        children ? (React.createElement("div", { className: styles.checkboxList }, Children.map(children, child => {
            if (isValidElement(child)) {
                return type === 'checkbox' ? renderCheckbox(child) : renderTag(child);
            }
            return null;
        }))) : null,
        errorMessage && (React.createElement("span", { className: cn(styles.sub, styles.errorMessage), role: 'alert' }, errorMessage)),
        hint && !errorMessage && React.createElement("span", { className: cn(styles.sub, styles.hint) }, hint)));
};

export { CheckboxGroup };
