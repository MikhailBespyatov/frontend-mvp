Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var textMaskCore = require('text-mask-core');
var coreComponentsMaskedInput = require('../../masked-input/cssm');
var utils_index = require('./utils/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var __assign = function () {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

var mask = [
    '+',
    '7',
    ' ',
    /([0-6]|[8-9])/,
    /\d/,
    /\d/,
    ' ',
    /\d/,
    /\d/,
    /\d/,
    '-',
    /\d/,
    /\d/,
    '-',
    /\d/,
    /\d/,
];
var countryPrefix = '+7 ';
var PhoneInput = React__default['default'].forwardRef(function (_a, ref) {
    var _b = _a.clearableCountryCode, clearableCountryCode = _b === void 0 ? true : _b, restProps = __rest(_a, ["clearableCountryCode"]);
    var inputRef = React.useRef(null);
    // Оставляет возможность прокинуть ref извне
    React.useImperativeHandle(ref, function () { return inputRef.current; });
    var handleBeforeDisplay = React.useCallback(function (conformedValue, config) {
        var rawValue = config.rawValue, previousConformedValue = config.previousConformedValue, currentCaretPosition = config.currentCaretPosition;
        /*
         * код ниже нужен для фикса следующих багов библиотеки text-mask:
         * 1) так как код страны указан в маске жестко как "+7",
         * то при удалении цифры перед ним каретка устанавливается перед кодом страны
         * 2) в номере телефона есть пробелы и дефисы,
         * при редактировании цифр рядом с этими символами каретка перескакивает через них,
         * а не остается на том же месте, на котором была до редактирования
         */
        var previousValueWithoutFormatting = previousConformedValue
            ? utils_index.deleteFormatting(previousConformedValue)
            : '';
        var currentValueWithoutFormatting = utils_index.deleteFormatting(conformedValue) || '';
        if (previousConformedValue &&
            (([3, 6].includes(currentCaretPosition) &&
                Math.abs(previousValueWithoutFormatting.length -
                    currentValueWithoutFormatting.length) === 1) ||
                ([7, 10, 13].includes(currentCaretPosition) &&
                    previousConformedValue.length > currentCaretPosition))) {
            utils_index.setCaretPosition({ position: currentCaretPosition, inputRef: inputRef });
        }
        // Удаление цифры перед кодом страны удаляет только саму цифру, код остается ("+7 1" -> "+7 ")
        if (rawValue === countryPrefix) {
            return rawValue;
        }
        // Вставка номера с 10 цифрами без кода страны
        if (rawValue.length === 10 && conformedValue.length === mask.length) {
            var masked = textMaskCore.conformToMask("+7" + rawValue, mask, config);
            return masked.conformedValue;
        }
        var insertedNumber = utils_index.getInsertedNumber({
            rawValue: rawValue,
            clearableCountryCode: clearableCountryCode,
            countryPrefix: countryPrefix,
            previousConformedValue: previousConformedValue,
        });
        // Вставка номера, начинающегося с 8 или 7: 89990313131, 71112223344
        if (conformedValue.length === mask.length &&
            (insertedNumber.startsWith('8') || insertedNumber.startsWith('7'))) {
            var masked = textMaskCore.conformToMask("+7" + insertedNumber.slice(1), mask, config);
            return masked.conformedValue;
        }
        // Если ввод начат с 7 или 8 - выводит "+7 " и дает продолжить ввод со след. цифры
        if (rawValue.length === 1 && ['7', '8'].includes(rawValue[0])) {
            return countryPrefix;
        }
        var abortCountryCodeClearing = !clearableCountryCode && !conformedValue;
        if (abortCountryCodeClearing) {
            utils_index.setCaretPosition({ position: countryPrefix.length, inputRef: inputRef });
            if (!rawValue.length)
                return countryPrefix;
            return false;
        }
        return conformedValue;
    }, [clearableCountryCode]);
    return (React__default['default'].createElement(coreComponentsMaskedInput.MaskedInput, __assign({}, restProps, { defaultValue: clearableCountryCode ? restProps.defaultValue : countryPrefix, mask: mask, onBeforeDisplay: handleBeforeDisplay, type: 'tel', ref: inputRef })));
});

exports.PhoneInput = PhoneInput;
