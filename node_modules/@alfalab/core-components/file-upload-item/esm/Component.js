import React, { useCallback } from 'react';
import cn from 'classnames';
import { IconButton } from '../../icon-button/esm';
import { Link } from '../../link/esm';
import { Spinner } from '../../spinner/esm';
import { CrossMIcon } from '@alfalab/icons-glyph/CrossMIcon';
import { CheckmarkCircleMIcon } from '@alfalab/icons-glyph/CheckmarkCircleMIcon';
import { AlertCircleMIcon } from '@alfalab/icons-glyph/AlertCircleMIcon';
import { PointerDownMIcon } from '@alfalab/icons-glyph/PointerDownMIcon';
import { ClockMIcon } from '@alfalab/icons-glyph';
import { fileIcon, humanFileSize } from './utils.js';

var styles = {"component":"file-upload-item__component_7r1jc","infoSection":"file-upload-item__infoSection_7r1jc","info":"file-upload-item__info_7r1jc","icon":"file-upload-item__icon_7r1jc","errorIcon":"file-upload-item__errorIcon_7r1jc","successIcon":"file-upload-item__successIcon_7r1jc","name":"file-upload-item__name_7r1jc","meta":"file-upload-item__meta_7r1jc","size":"file-upload-item__size_7r1jc","delete":"file-upload-item__delete_7r1jc","download":"file-upload-item__download_7r1jc","errorWrapper":"file-upload-item__errorWrapper_7r1jc","restore":"file-upload-item__restore_7r1jc","spinnerWrapper":"file-upload-item__spinnerWrapper_7r1jc","spinner":"file-upload-item__spinner_7r1jc","uploadPercent":"file-upload-item__uploadPercent_7r1jc"};
require('./index.css');

var FileUploadItem = function (_a) {
    var className = _a.className, children = _a.children, _b = _a.id, id = _b === void 0 ? '0' : _b, _c = _a.name, name = _c === void 0 ? '' : _c, size = _a.size, _d = _a.icon, Icon = _d === void 0 ? fileIcon(name) : _d, uploadDate = _a.uploadDate, downloadLink = _a.downloadLink, download = _a.download, uploadStatus = _a.uploadStatus, _e = _a.uploadPercent, uploadPercent = _e === void 0 ? 0 : _e, _f = _a.error, error = _f === void 0 ? uploadStatus === 'ERROR' ? 'Не удалось загрузить файл' : undefined : _f, showDelete = _a.showDelete, showRestore = _a.showRestore, onDelete = _a.onDelete, onDownload = _a.onDownload, onRestore = _a.onRestore, dataTestId = _a.dataTestId;
    var handleDownload = useCallback(function (event) {
        if (onDownload) {
            event.preventDefault();
            onDownload(id);
        }
    }, [id, onDownload]);
    var handleDelete = useCallback(function () {
        if (onDelete)
            onDelete(id);
    }, [id, onDelete]);
    var handleRestore = useCallback(function () {
        if (onRestore)
            onRestore(id);
    }, [id, onRestore]);
    var renderIcon = useCallback(function () {
        if (showRestore) {
            return React.createElement(ClockMIcon, { className: styles.restoreIcon });
        }
        switch (uploadStatus) {
            case 'ERROR':
                return React.createElement(AlertCircleMIcon, { className: styles.errorIcon });
            case 'SUCCESS':
                return React.createElement(CheckmarkCircleMIcon, { className: styles.successIcon });
            case 'LOADING':
            case 'UPLOADING':
                return (React.createElement("div", { className: styles.spinnerWrapper },
                    React.createElement(Spinner, { visible: true, className: styles.spinner })));
            default: {
                return React.createElement(Icon, { className: styles.icon });
            }
        }
    }, [showRestore, uploadStatus]);
    var renderInfoSection = useCallback(function () { return (React.createElement("div", { className: styles.infoSection },
        React.createElement("div", { className: styles.name }, name),
        uploadStatus === 'ERROR' && error && (React.createElement("div", { className: styles.errorWrapper, role: 'alert' }, error)))); }, [name, uploadStatus, error]);
    var showMeta = !showRestore && (!uploadStatus || uploadStatus === 'SUCCESS');
    var showDownload = Boolean(downloadLink) && !showRestore;
    return (React.createElement("div", { className: cn(className, styles.component, uploadStatus && styles[uploadStatus.toLocaleLowerCase()]), "data-test-id": dataTestId },
        React.createElement("div", { className: styles.info },
            renderIcon(),
            renderInfoSection(),
            children,
            uploadStatus === 'UPLOADING' && (React.createElement("span", { className: styles.uploadPercent }, Math.round(uploadPercent) + "%")),
            showMeta && (React.createElement("div", { className: styles.meta },
                uploadDate && React.createElement("span", { key: uploadDate }, uploadDate),
                size && (React.createElement("span", { key: size, className: styles.size }, humanFileSize(size)))))),
        showRestore && (React.createElement(Link, { pseudo: true, className: styles.restore, onClick: handleRestore }, "\u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C")),
        showDownload && (React.createElement(IconButton, { size: 'xxs', icon: PointerDownMIcon, className: styles.download, "aria-label": '\u0441\u043A\u0430\u0447\u0430\u0442\u044C', href: downloadLink, onClick: handleDownload, download: download })),
        showDelete && !showRestore && (React.createElement(IconButton, { size: 'xxs', icon: CrossMIcon, onClick: handleDelete, className: styles.delete, "aria-label": '\u0443\u0434\u0430\u043B\u0438\u0442\u044C' }))));
};

export { FileUploadItem };
