import React, { useRef, useState, useCallback, useEffect } from 'react';
import cn from 'classnames';
import mergeRefs from 'react-merge-refs';
import { createTextMaskInputElement } from 'text-mask-core';
import { Input } from '../../input/modern';

var styles = {"textHidden":"masked-input__textHidden_1nzaa"};
require('./index.css');

// Символ плейсхолдера не может входить в маску, поэтому вместо пробела используется \u2000
const PLACEHOLDER_CHAR = '\u2000';
const MaskedInput = React.forwardRef(({ mask, keepCharPositions = false, value, defaultValue, className, onBeforeDisplay, onChange, onClear, ...restProps }, ref) => {
    const inputRef = useRef(null);
    const textMask = useRef(null);
    const [inputValue, setInputValue] = useState(value || defaultValue || '');
    // Не показываем сырое значение до применения маски
    const [textHidden, setTextHidden] = useState(true);
    const update = useCallback((newValue = '') => {
        if (textMask.current && inputRef.current) {
            try {
                textMask.current.update(newValue);
            }
            catch (e) {
                // ignore masking errors
            }
            setInputValue(inputRef.current.value);
        }
    }, []);
    const handleInputChange = useCallback((event) => {
        update(event.target.value);
        if (onChange) {
            onChange(event, {
                value: event.target.value,
            });
        }
    }, [onChange, update]);
    const handleClear = useCallback((event) => {
        update('');
        if (onClear)
            onClear(event);
    }, [onClear, update]);
    useEffect(() => {
        if (inputRef.current) {
            textMask.current = createTextMaskInputElement({
                mask,
                inputElement: inputRef.current,
                pipe: onBeforeDisplay,
                guide: false,
                keepCharPositions,
                showMask: false,
                placeholderChar: PLACEHOLDER_CHAR,
                rawValue: '',
                currentCaretPosition: 0,
                previousConformedValue: '',
            });
        }
    }, [onBeforeDisplay, mask, keepCharPositions]);
    useEffect(() => {
        update(value || defaultValue);
    }, [value, update, defaultValue]);
    useEffect(() => {
        setTextHidden(false);
    }, []);
    return (React.createElement(Input, Object.assign({}, restProps, { className: cn(className, { [styles.textHidden]: textHidden }), value: inputValue, onChange: handleInputChange, onClear: handleClear, ref: mergeRefs([ref, inputRef]) })));
});

export { MaskedInput, PLACEHOLDER_CHAR };
