import React, { forwardRef, useState, Children, isValidElement, cloneElement } from 'react';
import cn from 'classnames';

var styles = {"component":"radio-group__component_vhl49","error":"radio-group__error_vhl49","radioList":"radio-group__radioList_vhl49","vertical":"radio-group__vertical_vhl49","radio":"radio-group__radio_vhl49","horizontal":"radio-group__horizontal_vhl49","tag":"radio-group__tag_vhl49","tagLabel":"radio-group__tagLabel_vhl49","label":"radio-group__label_vhl49","sub":"radio-group__sub_vhl49","errorMessage":"radio-group__errorMessage_vhl49","hint":"radio-group__hint_vhl49","hiddenInput":"radio-group__hiddenInput_vhl49"};
require('./index.css');

const RadioGroup = forwardRef(({ children, className, direction = 'vertical', label, error, hint, onChange, type = 'radio', dataTestId, disabled = false, name, value, }, ref) => {
    const [stateValue, setStateValue] = useState('');
    const renderRadio = (child) => {
        const { className: childClassName } = child.props;
        const checked = (value || stateValue) === child.props.value;
        const handleChange = (event) => {
            setStateValue(child.props.value);
            if (onChange) {
                onChange(event, { name, value: child.props.value });
            }
        };
        return cloneElement(child, {
            onChange: handleChange,
            disabled,
            ...child.props,
            checked,
            name,
            className: cn(childClassName, styles.radio),
        });
    };
    const renderTag = (child) => {
        const checked = (value || stateValue) === child.props.value;
        const handleChange = (event) => {
            setStateValue(child.props.value);
            if (onChange) {
                onChange(event, { name, value: child.props.value });
            }
        };
        const clone = cloneElement(child, {
            onClick: handleChange,
            disabled,
            ...child.props,
            checked,
            name,
        });
        return (
        // eslint-disable-next-line jsx-a11y/label-has-associated-control
        React.createElement("label", { className: cn(styles.radio, styles.tagLabel) },
            clone,
            React.createElement("input", { type: 'radio', autoComplete: 'off', onChange: handleChange, disabled: disabled || child.props.disabled, name: name, checked: checked, className: styles.hiddenInput })));
    };
    const errorMessage = typeof error === 'boolean' ? '' : error;
    return (React.createElement("div", { className: cn(styles.component, styles[type], styles[direction], { [styles.error]: error }, className), "data-test-id": dataTestId, ref: ref },
        label ? React.createElement("span", { className: styles.label }, label) : null,
        children ? (React.createElement("div", { className: styles.radioList }, Children.map(children, child => {
            if (isValidElement(child)) {
                return type === 'radio' ? renderRadio(child) : renderTag(child);
            }
            return null;
        }))) : null,
        errorMessage && (React.createElement("span", { className: cn(styles.sub, styles.errorMessage), role: 'alert' }, errorMessage)),
        hint && !errorMessage && (React.createElement("span", { className: cn(styles.sub, styles.hint) }, hint))));
});
/**
 * Для отображения в сторибуке
 */
RadioGroup.defaultProps = {
    direction: 'vertical',
    type: 'radio',
    disabled: false,
};

export { RadioGroup };
