import { _ as __assign } from './tslib.es6-529cfa8d.js';
import React, { useState, useRef, useMemo, useCallback, useEffect } from 'react';
import cn from 'classnames';
import { Legend, CartesianGrid, XAxis, YAxis, Brush, Tooltip, Area, Line, Bar, LabelList, Cell, ResponsiveContainer, ComposedChart } from 'recharts';
import { LinearGradient } from './components/LinearGradient.js';
import '../../typography/esm';
import './icons/Circle.js';
import './icons/CircleLine.js';
import './icons/FilledCircle.js';
import './icons/StrokeCircle.js';
import { Legends } from './components/Legends/index.js';
import './icons/Point.js';
import { Dot } from './components/Dot/index.js';
import './hooks/useSettings/utils/setComposedChartsMargin.js';
import './hooks/useSettings/utils/setDatas.js';
import './hooks/useSettings/utils/setGradientCharts.js';
import './hooks/useSettings/utils/setLegendMargin.js';
import './hooks/useSettings/utils/sortByIndex.js';
import { useSettings } from './hooks/useSettings/index.js';
import './hooks/usePathBar/utils/getRadius.js';
import './hooks/usePathBar/index.js';
import { CustomizedLabel } from './components/CustomizedLabel.js';
import { RectBar } from './components/RectBar.js';
import { Tick } from './components/Tick/index.js';
import { TooltipContent } from './components/TooltipContent/index.js';

var CustomizedHOC = function (Component, options) {
    var NewComponent = function (props) {
        return React.createElement(Component, __assign({}, props, options));
    };
    return NewComponent;
};

var styles = {"coreChart":"chart__coreChart_1wngk","bar":"chart__bar_1wngk","unfocused":"chart__unfocused_1wngk"};
require('./index.css');

var Chart = function (props) {
    var _a;
    var _b = useSettings(props), _c = _b[0], state = _c.state, data = _c.data, charts = _c.charts, filterCount = _c.filterCount, _d = _b[1], setCharts = _d.setCharts, setFilterCount = _d.setFilterCount;
    var _e = useState({
        prev: null,
        active: null,
    }), activeDotsState = _e[0], setActiveDotsState = _e[1];
    var _f = useState(null), yBrush = _f[0], setYBrush = _f[1];
    var _g = useState(null), tooltipArrowSide = _g[0], setTooltipArrowSide = _g[1];
    var _h = useState(0), heightLegend = _h[0], setHeightLegend = _h[1];
    var svgRef = useRef(null);
    var tooltipRef = useRef(null);
    var renderGradient = useMemo(function () {
        if (!state)
            return null;
        return state.series.map(function (item) {
            var chart = item.chart, gradient = item.gradient;
            if (chart !== 'gradient' || !gradient)
                return null;
            var gid = gradient.gid, points = gradient.points;
            return (React.createElement(LinearGradient, { key: state.id + "-" + gid, id: state.id, gid: gid, points: points }));
        });
    }, [state]);
    var toggleChart = useCallback(function (item) {
        var chart = item.chart, dataKey = item.properties.dataKey;
        var withGrad = chart === 'area';
        var changed = false;
        if (charts["" + dataKey] && filterCount > 1) {
            changed = true;
            setFilterCount(function (prev) { return prev - 1; });
        }
        if (!charts["" + dataKey]) {
            changed = true;
            setFilterCount(function (prev) { return prev + 1; });
        }
        if (!changed)
            return;
        setCharts(function (prev) {
            var newState = __assign({}, prev);
            newState["" + dataKey] = !newState["" + dataKey];
            if (withGrad)
                newState[dataKey + "-gradient"] = !newState[dataKey + "-gradient"];
            return newState;
        });
    }, [charts, filterCount, setCharts, setFilterCount]);
    var legendRef = useCallback(function (node) {
        if (node !== null) {
            setTimeout(function () {
                var height = node.getBoundingClientRect().height;
                setHeightLegend(height);
            }, 0);
        }
    }, []);
    var renderLegend = useMemo(function () {
        var _a, _b, _c;
        if (!(state === null || state === void 0 ? void 0 : state.legend))
            return null;
        var translate = ((_a = state === null || state === void 0 ? void 0 : state.xAxis) === null || _a === void 0 ? void 0 : _a.tickMargin) && ((_b = state === null || state === void 0 ? void 0 : state.legend) === null || _b === void 0 ? void 0 : _b.verticalAlign) !== 'top'
            ? state.xAxis.tickMargin + (((_c = state === null || state === void 0 ? void 0 : state.brush) === null || _c === void 0 ? void 0 : _c.brushMargin) || 0)
            : 0;
        return (React.createElement(Legend, __assign({}, (state.legend || null), { content: React.createElement(Legends, { legend: state.legend, series: state.series, id: state.id, toggleChart: toggleChart, ref: legendRef, charts: charts }), wrapperStyle: {
                transform: "translateY(" + translate + "px)",
            } })));
    }, [state, charts, toggleChart, legendRef]);
    var renderCartesianGrid = useMemo(function () {
        if (!(state === null || state === void 0 ? void 0 : state.cartesianGrid))
            return null;
        return React.createElement(CartesianGrid, __assign({}, state.cartesianGrid));
    }, [state]);
    var renderXAxis = useMemo(function () {
        var _a;
        if (!(state === null || state === void 0 ? void 0 : state.xAxis))
            return null;
        var tick;
        if (((_a = state === null || state === void 0 ? void 0 : state.xAxis) === null || _a === void 0 ? void 0 : _a.tickType) === 'point') {
            tick = CustomizedHOC(Tick, { xAxis: state.xAxis });
        }
        else if (typeof state.xAxis.tick === 'boolean') {
            tick = state.xAxis.tick;
        }
        else {
            tick = true;
        }
        return React.createElement(XAxis, __assign({}, state.xAxis, { tick: tick }));
    }, [state]);
    var renderYAxis = useMemo(function () {
        var _a;
        if (!(state === null || state === void 0 ? void 0 : state.yAxis))
            return null;
        var tick;
        if ((_a = state === null || state === void 0 ? void 0 : state.yAxis) === null || _a === void 0 ? void 0 : _a.tick) {
            tick = CustomizedHOC(state.yAxis.tick, { state: state });
        }
        else if (typeof state.yAxis.tick === 'boolean') {
            tick = state.yAxis.tick;
        }
        else {
            tick = true;
        }
        return React.createElement(YAxis, __assign({}, state.yAxis, { tick: tick }));
    }, [state]);
    var renderBrush = useMemo(function () {
        if (!(state === null || state === void 0 ? void 0 : state.brush))
            return null;
        return React.createElement(Brush, __assign({ y: typeof yBrush === 'number' ? yBrush : 0 }, state.brush));
    }, [state, yBrush]);
    var renderTooltip = useMemo(function () {
        if (!(state === null || state === void 0 ? void 0 : state.tooltip))
            return null;
        return (React.createElement(Tooltip, __assign({ ref: tooltipRef }, state.tooltip, { content: CustomizedHOC(TooltipContent, { series: state.series, tooltipArrowSide: tooltipArrowSide }) })));
    }, [state, tooltipArrowSide]);
    var renderChartsItems = useMemo(function () {
        if (!state || !charts)
            return null;
        return state.series.map(function (item) {
            var chart = item.chart, properties = item.properties, radius = item.radius, labelList = item.labelList;
            var show = charts["" + properties.dataKey];
            switch (chart) {
                case 'bar':
                    return show && !(item === null || item === void 0 ? void 0 : item.hide) ? (React.createElement(Bar, __assign({ key: state.id + "-" + properties.dataKey }, properties, { shape: React.createElement(RectBar, { radius: radius }) }),
                        labelList && (React.createElement(LabelList, __assign({ dataKey: properties.dataKey.toString() }, labelList, { content: React.createElement(CustomizedLabel, { radius: radius }) }))),
                        data.map(function (_, index) {
                            var key = state.id + "-" + properties.dataKey + "-" + index;
                            return (React.createElement(Cell, { key: key, className: cn(styles.bar, typeof activeDotsState.active === 'number' &&
                                    activeDotsState.active !== index
                                    ? styles.unfocused
                                    : '') }));
                        }))) : null;
                case 'area':
                case 'line':
                    return show && !(item === null || item === void 0 ? void 0 : item.hide) ? (React.createElement(Line, __assign({ key: state.id + "-" + properties.dataKey }, properties, { dot: properties.dot && properties.dotSettings
                            ? CustomizedHOC(Dot, {
                                activeDot: activeDotsState.active,
                                dotSettings: properties.dotSettings,
                                inherit: (properties === null || properties === void 0 ? void 0 : properties.inheritStroke) ? properties.inheritStroke
                                    : false,
                            })
                            : false, activeDot: false }))) : null;
                case 'gradient':
                    return show && !(item === null || item === void 0 ? void 0 : item.hide) ? (React.createElement(Area, __assign({}, item.properties, { key: state.id + "-" + item.properties.dataKey, dataKey: "" + item.properties.dataKey, stroke: 'transparent', fill: item.gradient.gid
                            ? "url(#" + state.id + "-" + item.gradient.gid + ")"
                            : item.properties.fill, dot: false, activeDot: false }))) : null;
                default:
                    return null;
            }
        });
    }, [charts, state, activeDotsState, data]);
    // Позиционирование brush
    useEffect(function () {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!state || !state.brush)
            return;
        if (!heightLegend || heightLegend === 0)
            return;
        var align = (_a = state === null || state === void 0 ? void 0 : state.legend) === null || _a === void 0 ? void 0 : _a.verticalAlign;
        var legendHeight = align === 'top' ? 0 : heightLegend;
        var marginTick = ((_b = state === null || state === void 0 ? void 0 : state.xAxis) === null || _b === void 0 ? void 0 : _b.tickMargin) ? (_c = state === null || state === void 0 ? void 0 : state.xAxis) === null || _c === void 0 ? void 0 : _c.tickMargin : 0;
        var brushY = (((_d = svgRef.current) === null || _d === void 0 ? void 0 : _d.clientHeight) ? svgRef.current.clientHeight : 0) -
            legendHeight -
            state.brush.height -
            (((_f = (_e = state === null || state === void 0 ? void 0 : state.composeChart) === null || _e === void 0 ? void 0 : _e.margin) === null || _f === void 0 ? void 0 : _f.bottom) ? state.composeChart.margin.bottom : 0) +
            marginTick +
            (((_g = state.brush) === null || _g === void 0 ? void 0 : _g.brushMargin) ? state.brush.brushMargin : 0);
        setYBrush(brushY);
    }, [heightLegend, state]);
    var leaveEvent = function (isTooltipActive) {
        if (isTooltipActive)
            return;
        if (typeof activeDotsState.prev !== 'number' || typeof activeDotsState.active !== 'number')
            return;
        setActiveDotsState({
            prev: null,
            active: null,
        });
    };
    var arrowTooltipEvent = function (activeCoordinate) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!((_a = state === null || state === void 0 ? void 0 : state.tooltip) === null || _a === void 0 ? void 0 : _a.arrow))
            return;
        if (((_b = state === null || state === void 0 ? void 0 : state.tooltip) === null || _b === void 0 ? void 0 : _b.arrow) && (activeCoordinate === null || activeCoordinate === void 0 ? void 0 : activeCoordinate.x)) {
            var side = (((_c = svgRef === null || svgRef === void 0 ? void 0 : svgRef.current) === null || _c === void 0 ? void 0 : _c.clientWidth) || 0) -
                (((_e = (_d = state === null || state === void 0 ? void 0 : state.composeChart) === null || _d === void 0 ? void 0 : _d.margin) === null || _e === void 0 ? void 0 : _e.right) || 0) -
                activeCoordinate.x -
                (((_g = (_f = tooltipRef.current) === null || _f === void 0 ? void 0 : _f.state) === null || _g === void 0 ? void 0 : _g.boxWidth) || 0) >
                20;
            setTooltipArrowSide(side);
        }
    };
    var hoverEvent = function (isTooltipActive, activeTooltipIndex) {
        if (!isTooltipActive)
            return;
        if (typeof activeDotsState.active === 'number' &&
            activeTooltipIndex === activeDotsState.active)
            return;
        if (typeof activeTooltipIndex === 'number' && typeof activeDotsState.active !== 'number') {
            setActiveDotsState({
                prev: activeTooltipIndex,
                active: activeTooltipIndex,
            });
        }
        if (typeof activeTooltipIndex === 'number' && typeof activeDotsState.prev === 'number') {
            setActiveDotsState(function (prev) {
                return {
                    prev: prev.active,
                    active: activeTooltipIndex,
                };
            });
        }
    };
    var mouseMove = function (e) {
        if (!(state === null || state === void 0 ? void 0 : state.tooltip))
            return;
        arrowTooltipEvent(e.activeCoordinate);
        hoverEvent(e.isTooltipActive, e.activeTooltipIndex);
        leaveEvent(e.isTooltipActive);
    };
    var mouseLeave = function (e) {
        if (!(state === null || state === void 0 ? void 0 : state.tooltip))
            return;
        leaveEvent(e.isTooltipActive);
    };
    if (!data || !charts || !state)
        return null;
    return (React.createElement("div", { className: styles.coreChart, ref: svgRef, id: (state === null || state === void 0 ? void 0 : state.id) || '', style: { width: '100%', height: '100%' } },
        React.createElement(ResponsiveContainer, { debounce: ((_a = state === null || state === void 0 ? void 0 : state.responsiveContainer) === null || _a === void 0 ? void 0 : _a.debounce) ? state.responsiveContainer.debounce : 0, width: '100%' },
            React.createElement(ComposedChart, __assign({}, state === null || state === void 0 ? void 0 : state.composeChart, { onMouseMove: mouseMove, onMouseLeave: mouseLeave, data: data }),
                React.createElement("defs", null, renderGradient),
                state.cartesianGrid && renderCartesianGrid,
                state.xAxis && renderXAxis,
                state.yAxis && renderYAxis,
                renderChartsItems,
                state.tooltip && renderTooltip,
                state.brush && renderBrush,
                state.legend && renderLegend))));
};

export { Chart };
