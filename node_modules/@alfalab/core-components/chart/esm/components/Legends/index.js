import React from 'react';
import cn from 'classnames';
import { Typography } from '../../../../typography/esm';
import { CircleIcon } from '../../icons/Circle.js';
import { CircleLineIcon } from '../../icons/CircleLine.js';
import { FilledCircleIcon } from '../../icons/FilledCircle.js';
import { StrokeCircleIcon } from '../../icons/StrokeCircle.js';

var styles = {"legendContent":"chart__legendContent_v07qw","legendWrap":"chart__legendWrap_v07qw","legendItem":"chart__legendItem_v07qw","legendUnactive":"chart__legendUnactive_v07qw","legendIcon":"chart__legendIcon_v07qw","legendValue":"chart__legendValue_v07qw"};
require('./index.css');

var icons = {
    circleLine: CircleLineIcon,
    filledCircle: FilledCircleIcon,
    strokeCircle: StrokeCircleIcon,
    circle: CircleIcon,
};
var Legends = React.forwardRef(function (_a, ref) {
    var legend = _a.legend, series = _a.series, id = _a.id, charts = _a.charts, toggleChart = _a.toggleChart;
    var style = {
        textAlign: legend.align || 'center',
        transform: "translateY(" + ((legend === null || legend === void 0 ? void 0 : legend.marginTop) ? legend.marginTop : 0) *
            (legend.verticalAlign === 'top' ? -1 : 1) + "px)",
    };
    return (React.createElement("ul", { ref: ref, className: cn(styles.legendWrap), style: style }, series.map(function (item) {
        var _a, _b;
        if (item.hideLegend || item.hide)
            return null;
        var Icon = icons[item.icon] || CircleIcon;
        return (React.createElement("li", { role: 'presentation', key: id + "-" + item.properties.dataKey, className: cn(styles.legendItem, charts["" + item.properties.dataKey] ? '' : styles.legendUnactive), onClick: function () { return toggleChart(item); } },
            React.createElement("div", { className: cn(styles.legendContent) },
                Icon ? (React.createElement("i", { className: cn(styles.legendIcon) },
                    React.createElement(Icon, { fill: ((_a = item.properties) === null || _a === void 0 ? void 0 : _a.fill) || ((_b = item.properties) === null || _b === void 0 ? void 0 : _b.stroke) ||
                            '', height: legend.iconHeight || 16 }))) : null,
                React.createElement(Typography.Text, { view: 'primary-medium', tag: 'span', className: cn(styles.legendValue) }, item.properties.name))));
    })));
});

export { Legends };
