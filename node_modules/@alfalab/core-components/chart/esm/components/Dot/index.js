import React, { useState, useEffect } from 'react';
import cn from 'classnames';
import { PointIcon } from '../../icons/Point.js';

var styles = {"dotUnfocused":"chart__dotUnfocused_kd8f1","dot":"chart__dot_kd8f1","dotItem":"chart__dotItem_kd8f1","dotWrap":"chart__dotWrap_kd8f1","showDot":"chart__showDot_kd8f1"};
require('./index.css');

var Dot = React.forwardRef(function (_a, ref) {
    var cx = _a.cx, cy = _a.cy, index = _a.index, activeDot = _a.activeDot, dataKey = _a.dataKey, dotSettings = _a.dotSettings, value = _a.value, stroke = _a.stroke;
    var _b = useState(0), windowWidth = _b[0], setWindowWidth = _b[1];
    var _c = useState(0), height = _c[0], setHeight = _c[1];
    var _d = useState(0), width = _d[0], setWidth = _d[1];
    var _e = useState(null), option = _e[0], setOption = _e[1];
    useEffect(function () {
        var dotSetting = Array.isArray(dotSettings) && dotSettings.length > 0
            ? dotSettings.find(function (item) { return item.media && windowWidth < item.media; })
            : dotSettings;
        if (Array.isArray(dotSettings) && dotSettings.length > 0 && !dotSetting) {
            dotSetting = dotSettings[dotSettings.length - 1];
        }
        setWindowWidth(window.innerWidth);
        setOption(dotSetting);
    }, [dotSettings, windowWidth]);
    useEffect(function () {
        if (!option)
            return;
        if (typeof activeDot === 'number' && activeDot === index) {
            setHeight(option.height * option.scale);
            setWidth(option.width * option.scale);
        }
        else {
            setHeight(option.height * option.initScale);
            setWidth(option.width * option.initScale);
        }
    }, [activeDot, index, option]);
    if (!value)
        return null;
    return (React.createElement("g", { ref: ref, className: cn(styles.dot), transform: "translate(" + (cx - width / 2) + ", " + (cy - height / 2) + ")" },
        React.createElement("g", { className: cn(styles.dotWrap), transform: "scale(" + (activeDot === index ? (option === null || option === void 0 ? void 0 : option.scale) || 0 : (option === null || option === void 0 ? void 0 : option.initScale) || 0) + ")" },
            React.createElement("svg", { className: cn(styles.dotItem, activeDot === index ? styles.dotActive : '', typeof activeDot === 'number' && activeDot !== index
                    ? styles.dotUnfocused
                    : ''), "data-id": index, "data-name": dataKey, width: (option === null || option === void 0 ? void 0 : option.width) || 0, height: (option === null || option === void 0 ? void 0 : option.height) || 0 },
                React.createElement(PointIcon, { fill: stroke })))));
});

export { Dot };
