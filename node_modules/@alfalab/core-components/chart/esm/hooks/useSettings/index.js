import { _ as __assign } from '../../tslib.es6-529cfa8d.js';
import { useState, useEffect } from 'react';
import { setComposedChartsMargin } from './utils/setComposedChartsMargin.js';
import { setDatas } from './utils/setDatas.js';
import { setGradientCharts } from './utils/setGradientCharts.js';
import { setLegendMargin } from './utils/setLegendMargin.js';
import { sortByIndex } from './utils/sortByIndex.js';

var useSettings = function (options) {
    var _a = useState(null), state = _a[0], setState = _a[1];
    var _b = useState({}), charts = _b[0], setCharts = _b[1];
    var _c = useState([]), data = _c[0], setData = _c[1];
    var _d = useState(0), filterCount = _d[0], setFilterCount = _d[1];
    useEffect(function () {
        var _a;
        var settings = __assign({}, options);
        var brush = settings.brush, legend = settings.legend, series = settings.series, labels = settings.labels, composeChart = settings.composeChart, xAxis = settings.xAxis;
        if (((_a = settings.legend) === null || _a === void 0 ? void 0 : _a.margin) && brush && legend)
            settings.legend.margin.top = setLegendMargin(brush, legend);
        settings.series = setGradientCharts(series);
        var _b = setDatas(settings.series, labels), initData = _b[0], chartsNames = _b[1], count = _b[2];
        settings.composeChart.margin = setComposedChartsMargin(composeChart, legend, brush, xAxis);
        settings.series = sortByIndex(settings.series);
        setState(settings);
        setData(initData);
        setCharts(chartsNames);
        setFilterCount(count);
    }, [options]);
    return [
        {
            state: state,
            data: data,
            charts: charts,
            filterCount: filterCount,
        },
        {
            setState: setState,
            setData: setData,
            setCharts: setCharts,
            setFilterCount: setFilterCount,
        },
    ];
};

export { useSettings };
