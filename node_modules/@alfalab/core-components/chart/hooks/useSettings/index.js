Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../../tslib.es6-95e70a8c.js');
var React = require('react');
var hooks_useSettings_utils_setComposedChartsMargin = require('./utils/setComposedChartsMargin.js');
var hooks_useSettings_utils_setDatas = require('./utils/setDatas.js');
var hooks_useSettings_utils_setGradientCharts = require('./utils/setGradientCharts.js');
var hooks_useSettings_utils_setLegendMargin = require('./utils/setLegendMargin.js');
var hooks_useSettings_utils_sortByIndex = require('./utils/sortByIndex.js');

var useSettings = function (options) {
    var _a = React.useState(null), state = _a[0], setState = _a[1];
    var _b = React.useState({}), charts = _b[0], setCharts = _b[1];
    var _c = React.useState([]), data = _c[0], setData = _c[1];
    var _d = React.useState(0), filterCount = _d[0], setFilterCount = _d[1];
    React.useEffect(function () {
        var _a;
        var settings = tslib_es6.__assign({}, options);
        var brush = settings.brush, legend = settings.legend, series = settings.series, labels = settings.labels, composeChart = settings.composeChart, xAxis = settings.xAxis;
        if (((_a = settings.legend) === null || _a === void 0 ? void 0 : _a.margin) && brush && legend)
            settings.legend.margin.top = hooks_useSettings_utils_setLegendMargin.setLegendMargin(brush, legend);
        settings.series = hooks_useSettings_utils_setGradientCharts.setGradientCharts(series);
        var _b = hooks_useSettings_utils_setDatas.setDatas(settings.series, labels), initData = _b[0], chartsNames = _b[1], count = _b[2];
        settings.composeChart.margin = hooks_useSettings_utils_setComposedChartsMargin.setComposedChartsMargin(composeChart, legend, brush, xAxis);
        settings.series = hooks_useSettings_utils_sortByIndex.sortByIndex(settings.series);
        setState(settings);
        setData(initData);
        setCharts(chartsNames);
        setFilterCount(count);
    }, [options]);
    return [
        {
            state: state,
            data: data,
            charts: charts,
            filterCount: filterCount,
        },
        {
            setState: setState,
            setData: setData,
            setCharts: setCharts,
            setFilterCount: setFilterCount,
        },
    ];
};

exports.useSettings = useSettings;
