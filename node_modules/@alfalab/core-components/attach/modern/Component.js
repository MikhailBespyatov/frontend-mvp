import React, { useState, useRef, useCallback, useEffect } from 'react';
import cn from 'classnames';
import mergeRefs from 'react-merge-refs';
import { AttachmentSBlackIcon } from '@alfalab/icons-classic/AttachmentSBlackIcon';
import { AttachmentMBlackIcon } from '@alfalab/icons-classic/AttachmentMBlackIcon';
import { pluralize } from '@alfalab/utils';
import { Button } from '../../button/modern';
import { ProgressBar } from '../../progress-bar/modern';
import { KeyboardFocusable } from '../../keyboard-focusable/modern';
import { truncateFilename } from './utils/index.js';

var styles = {"component":"attach__component_5a27c","label":"attach__label_5a27c","control":"attach__control_5a27c","xs":"attach__xs_5a27c","file":"attach__file_5a27c","noFile":"attach__noFile_5a27c","s":"attach__s_5a27c","m":"attach__m_5a27c","l":"attach__l_5a27c","clear":"attach__clear_5a27c","progressBar":"attach__progressBar_5a27c","disabled":"attach__disabled_5a27c","icon":"attach__icon_5a27c","focused":"attach__focused_5a27c"};
require('./index.css');

const MULTIPLE_TEXTS = ['файл', 'файла', 'файлов'];
const Attach = React.forwardRef(({ size = 's', accept, buttonContent = 'Выберите файл', buttonProps = {}, className, fileClassName, noFileClassName, disabled, dataTestId, id, maxFilenameLength, multiple, noFileText = 'Нет файла', progressBarPercent, defaultValue, value, onChange, onClear, ...restProps }, ref) => {
    const uncontrolled = value === undefined;
    const [files, setFiles] = useState(defaultValue || []);
    const inputRef = useRef(null);
    const labelRef = useRef(null);
    const buttonRef = useRef(null);
    const handleInputChange = useCallback((event) => {
        const filesArray = event.target.files ? Array.from(event.target.files) : [];
        if (onChange) {
            onChange(event, { files: filesArray });
        }
        if (uncontrolled && event.target.files) {
            setFiles(filesArray);
        }
    }, [onChange, uncontrolled]);
    const handleButtonClick = useCallback(event => {
        if (labelRef.current) {
            labelRef.current.click();
        }
        if (buttonRef.current) {
            buttonRef.current.focus();
        }
        if (buttonProps.onClick) {
            buttonProps.onClick(event);
        }
    }, [buttonProps]);
    const handleClearClick = useCallback(ev => {
        if (uncontrolled) {
            if (inputRef.current) {
                inputRef.current.value = '';
            }
            setFiles([]);
        }
        if (onClear) {
            onClear(ev);
        }
    }, [onClear, uncontrolled]);
    const Icon = size === 'xs' ? AttachmentSBlackIcon : AttachmentMBlackIcon;
    const statusTextContent = files.length === 1 ? (truncateFilename(files[0].name, maxFilenameLength)) : (React.createElement("abbr", { title: files.map(file => file.name).join() },
        files.length,
        " ",
        pluralize(files.length, ...MULTIPLE_TEXTS)));
    useEffect(() => {
        if (!uncontrolled) {
            setFiles(value || []);
        }
    }, [uncontrolled, value]);
    return (React.createElement("div", { className: cn(styles.component, styles[size], {
            [styles.disabled]: disabled,
        }, className) },
        React.createElement(Button, Object.assign({}, buttonProps, { size: size, disabled: disabled, view: (buttonProps && buttonProps.view) || 'tertiary', leftAddons: (buttonProps && buttonProps.leftAddons) || React.createElement(Icon, { className: styles.icon }), onClick: handleButtonClick, ref: buttonRef }),
            React.createElement("span", null, buttonContent)),
        React.createElement("label", { className: styles.label, htmlFor: id, ref: labelRef },
            React.createElement("input", Object.assign({}, restProps, { className: styles.control, accept: accept, disabled: disabled, id: id, multiple: multiple, tabIndex: -1, type: 'file', onChange: handleInputChange, ref: mergeRefs([ref, inputRef]), "data-test-id": dataTestId }))),
        files && files.length > 0 ? (React.createElement("div", { className: cn(styles.file, fileClassName) },
            React.createElement("span", null, statusTextContent),
            React.createElement(KeyboardFocusable, null, (targetRef, focused) => (React.createElement("button", { "aria-label": '\u043E\u0447\u0438\u0441\u0442\u0438\u0442\u044C', type: 'button', className: cn(styles.clear, {
                    [styles.focused]: focused,
                }), onClick: handleClearClick, ref: targetRef }))),
            progressBarPercent && (React.createElement(ProgressBar, { className: styles.progressBar, value: progressBarPercent, view: 'positive' })))) : (React.createElement("div", { className: cn(styles.noFile, noFileClassName) }, noFileText))));
});
/**
 * Для отображения в сторибуке
 */
Attach.defaultProps = {
    size: 's',
    buttonContent: 'Выберите файл',
    noFileText: 'Нет файла',
};

export { Attach };
