Object.defineProperty(exports, '__esModule', { value: true });

var getElementSize = function (element, property) {
    var size = +window
        .getComputedStyle(element)
        .getPropertyValue(property)
        .replace('px', '');
    return Number.isNaN(size) ? 0 : size;
};
var getTagWidth = function (tag) {
    var tagMarginLeft = getElementSize(tag, 'margin-left');
    var tagMarginRight = getElementSize(tag, 'margin-right');
    return tag.getBoundingClientRect().width + tagMarginRight + tagMarginLeft;
};
var calculateTotalElementsPerRow = function (container, input) {
    var containerWidth = container.getBoundingClientRect().width;
    var containerPaddingLeft = getElementSize(container, 'padding-left');
    var containerPaddingRight = getElementSize(container, 'padding-right');
    containerWidth -= containerPaddingLeft + containerPaddingRight;
    if (input) {
        var inputMinWidth = getElementSize(input, 'min-width');
        var inputMarginLeft = getElementSize(input, 'margin-left');
        var inputMarginRight = getElementSize(input, 'margin-right');
        var minInputWidth = inputMarginLeft + inputMarginRight + inputMinWidth;
        containerWidth -= minInputWidth;
    }
    var tags = container.getElementsByTagName('button');
    var latestTag = tags[tags.length - 1];
    if (latestTag && latestTag.getAttribute('data-collapse') === 'collapse-last-tag-element') {
        containerWidth -= getTagWidth(latestTag);
    }
    var totalTagsWidth = 0;
    var totalVisibleElements = 0;
    for (var i = 0; i < tags.length; i++) {
        var tag = tags[i];
        if (tag.getAttribute('data-collapse') === 'collapse-last-tag-element') {
            break;
        }
        totalTagsWidth += getTagWidth(tag);
        if (totalTagsWidth < containerWidth) {
            totalVisibleElements += 1;
        }
    }
    return totalVisibleElements;
};

exports.calculateTotalElementsPerRow = calculateTotalElementsPerRow;
