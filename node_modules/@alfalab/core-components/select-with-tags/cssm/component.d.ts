/// <reference types="react" />
import React from 'react';
import { BaseSelectProps } from "../../select";
declare const SelectWithTags: React.ForwardRefExoticComponent<Pick<BaseSelectProps, "block" | "size" | "className" | "fieldClassName" | "disabled" | "error" | "hint" | "label" | "dataTestId" | "id" | "placeholder" | "onFocus" | "onBlur" | "onScroll" | "preventFlip" | "popperClassName" | "open" | "name" | "options" | "valueRenderer" | "Optgroup" | "visibleOptions" | "Arrow" | "Option" | "optionsListClassName" | "optionClassName" | "allowUnselect" | "closeOnSelect" | "circularNavigation" | "defaultOpen" | "popoverPosition" | "optionsListWidth" | "optionsSize" | "fieldProps" | "optionsListProps" | "optionProps" | "onOpen" | "OptionsList" | "updatePopover" | "zIndexPopover" | "showEmptyOptionsList"> & {
    value: string;
    onInput: (event: React.ChangeEvent<HTMLInputElement>) => void;
    selected?: (string | import("../../select").OptionShape)[] | undefined;
    onChange?: ((payload: {
        selectedMultiple: (string | import("../../select").OptionShape)[];
        name?: string | undefined;
    }) => void) | undefined;
    autocomplete?: boolean | undefined;
    match?: import("./types").OptionMatcher | undefined;
    emptyListPlaceholder?: string | undefined;
    Tag?: React.FC<import("./types").TagProps> | undefined;
    collapseTagList?: boolean | undefined;
    moveInputToNewLine?: boolean | undefined;
    transformCollapsedTagText?: ((collapsedCount: number) => string) | undefined;
    transformTagText?: ((tagText?: React.ReactNode) => React.ReactNode) | undefined;
} & React.RefAttributes<HTMLInputElement>>;
export { SelectWithTags };
