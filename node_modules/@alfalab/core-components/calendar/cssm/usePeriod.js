Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var hooks = require('@alfalab/hooks');

function usePeriod(_a) {
    var onPeriodChange = _a.onPeriodChange, initialSelectedFrom = _a.initialSelectedFrom, initialSelectedTo = _a.initialSelectedTo;
    var _b = React.useState(initialSelectedFrom), selectedFrom = _b[0], setSelectedFrom = _b[1];
    var _c = React.useState(initialSelectedTo), selectedTo = _c[0], setSelectedTo = _c[1];
    var resetPeriod = React.useCallback(function () {
        setSelectedFrom(undefined);
        setSelectedTo(undefined);
    }, []);
    var setStart = React.useCallback(function (date) {
        setSelectedFrom(date);
    }, []);
    var setEnd = React.useCallback(function (date) {
        setSelectedTo(date);
    }, []);
    var updatePeriod = React.useCallback(function (date) {
        // сбрасываем выделение
        if (date === undefined) {
            resetPeriod();
            return;
        }
        // начинаем выделение
        if (!selectedFrom) {
            setSelectedFrom(date);
            return;
        }
        // заканчиваем выделение
        if (!selectedTo) {
            setSelectedFrom(Math.min(date, selectedFrom));
            setSelectedTo(Math.max(date, selectedFrom));
            return;
        }
        // если новая дата за выделенным периодом — расширяем интервал
        if (date > selectedFrom) {
            setSelectedTo(date);
            return;
        }
        /**
         * если новая дата находится раньше начала выделения —
         * сбрасываем конец периода и начинаем выделение с этой даты
         */
        if (date < selectedFrom) {
            setSelectedTo(undefined);
            setSelectedFrom(date);
        }
    }, [resetPeriod, selectedFrom, selectedTo]);
    hooks.useDidUpdateEffect(function () {
        if (onPeriodChange) {
            onPeriodChange(selectedFrom, selectedTo);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [selectedFrom, selectedTo]);
    return {
        selectedFrom: selectedFrom,
        selectedTo: selectedTo,
        setStart: setStart,
        setEnd: setEnd,
        resetPeriod: resetPeriod,
        updatePeriod: updatePeriod,
    };
}

exports.usePeriod = usePeriod;
