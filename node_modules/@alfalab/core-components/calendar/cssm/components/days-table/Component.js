Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../../tslib.es6-ce870b46.js');
var React = require('react');
var cn = require('classnames');
var dateFns = require('date-fns');
var hooks = require('@alfalab/hooks');
var coreComponentsButton = require('../../../../button/cssm');
var reactTransitionGroup = require('react-transition-group');
var utils = require('../../utils.js');
var styles = require('./index.module.css');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);
var styles__default = /*#__PURE__*/_interopDefaultLegacy(styles);

var DaysTable = function (_a) {
    var _b = _a.weeks, weeks = _b === void 0 ? [] : _b, _c = _a.activeMonth, activeMonth = _c === void 0 ? new Date() : _c, highlighted = _a.highlighted, selectedFrom = _a.selectedFrom, selectedTo = _a.selectedTo, getDayProps = _a.getDayProps;
    var activeMonthRef = React.useRef(activeMonth);
    activeMonthRef.current = activeMonth;
    var prevActiveMonth = hooks.usePrevious(activeMonth);
    var direction = prevActiveMonth && (activeMonth < prevActiveMonth ? 'right' : 'left');
    var selection = utils.getSelectionRange(selectedFrom, selectedTo, highlighted);
    var renderHeader = React.useCallback(function () {
        return utils.WEEKDAYS.map(function (dayName) { return (React__default['default'].createElement("th", { className: styles__default['default'].dayName, key: dayName }, dayName)); });
    }, []);
    var renderDay = function (day) {
        var _a;
        var daySelected = day.selected ||
            (selectedFrom && dateFns.isSameDay(day.date, selectedFrom)) ||
            (selectedTo && dateFns.isSameDay(day.date, selectedTo));
        var inRange = !daySelected && selection && dateFns.isWithinInterval(day.date, selection);
        var firstDay = day.date.getDate() === 1;
        var lastDay = dateFns.isLastDayOfMonth(day.date);
        var transitLeft = firstDay && inRange && selection && day.date > selection.start;
        var transitRight = lastDay && inRange && selection && day.date < selection.end;
        var rangeStart = selection && dateFns.isSameDay(day.date, selection.start);
        var dayProps = getDayProps(day);
        return (React__default['default'].createElement(coreComponentsButton.Button, tslib_es6.__assign({}, dayProps, { ref: function (node) {
                /**
                 * После анимации реф-коллбэк вызывается еще раз, и в него передается null и старый activeMonth.
                 * Поэтому приходится хранить актуальный месяц в рефе и сравнивать с ним.
                 */
                if (dateFns.startOfMonth(day.date).getTime() === activeMonthRef.current.getTime()) {
                    dayProps.ref(node);
                }
            }, type: 'button', view: 'ghost', size: 'xs', disabled: day.disabled, className: cn__default['default'](styles__default['default'].day, (_a = {},
                _a[styles__default['default'].selected] = daySelected,
                _a[styles__default['default'].range] = inRange,
                _a[styles__default['default'].rangeStart] = rangeStart,
                _a[styles__default['default'].transitLeft] = transitLeft,
                _a[styles__default['default'].transitRight] = transitRight,
                _a[styles__default['default'].today] = dateFns.isToday(day.date),
                _a[styles__default['default'].firstDay] = firstDay,
                _a[styles__default['default'].lastDay] = lastDay,
                _a[styles__default['default'].event] = day.event,
                _a[styles__default['default'].disabled] = day.disabled,
                _a[styles__default['default'].highlighted] = highlighted && dateFns.isEqual(day.date, highlighted),
                _a)) }), day.date.getDate()));
    };
    var renderWeek = function (week, weekIdx) { return (React__default['default'].createElement("tr", { key: weekIdx }, week.map(function (day, dayIdx) { return (React__default['default'].createElement("td", { key: day ? day.date.getTime() : dayIdx }, day && renderDay(day))); }))); };
    return (React__default['default'].createElement("table", { className: cn__default['default'](styles__default['default'].daysTable, direction && styles__default['default'][direction]) },
        React__default['default'].createElement("thead", null,
            React__default['default'].createElement("tr", null, renderHeader())),
        React__default['default'].createElement(reactTransitionGroup.TransitionGroup, { component: null },
            React__default['default'].createElement(reactTransitionGroup.CSSTransition, { key: activeMonth.getTime(), timeout: 300, classNames: {
                    enter: styles__default['default'].daysEnter,
                    enterActive: styles__default['default'].daysEnterActive,
                    exit: styles__default['default'].daysExit,
                    exitActive: styles__default['default'].daysExitActive,
                } },
                React__default['default'].createElement("tbody", null, weeks.map(renderWeek))))));
};

exports.DaysTable = DaysTable;
