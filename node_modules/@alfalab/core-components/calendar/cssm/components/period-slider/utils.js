Object.defineProperty(exports, '__esModule', { value: true });

var dateFns = require('date-fns');
var utils = require('../../utils.js');

var formatPeriod = function (valueFrom, valueTo, periodType) {
    if (periodType === 'day') {
        if (dateFns.isToday(valueFrom))
            return 'Сегодня';
        if (dateFns.isYesterday(valueFrom))
            return 'Вчера';
        return utils.formatDate(valueFrom);
    }
    if (periodType === 'month') {
        var year = dateFns.getYear(valueFrom);
        return year === dateFns.getYear(new Date())
            ? utils.monthName(valueFrom)
            : utils.monthName(valueFrom) + " " + dateFns.getYear(valueFrom);
    }
    if (periodType === 'quarter') {
        return dateFns.getQuarter(valueFrom) + " \u043A\u0432\u0430\u0440\u0442\u0430\u043B " + dateFns.getYear(valueFrom);
    }
    if (periodType === 'year') {
        return dateFns.getYear(valueFrom) + " \u0433\u043E\u0434";
    }
    return utils.formatDate(valueFrom) + " - " + utils.formatDate(valueTo);
};
var shiftValues = function (valueFrom, valueTo, periodType, direction) {
    var newValueFrom = valueFrom;
    var newValueTo = valueTo;
    var amount = direction === 'next' ? 1 : -1;
    switch (periodType) {
        case 'day':
            newValueFrom = dateFns.addDays(valueFrom, amount);
            newValueTo = dateFns.addDays(valueFrom, amount);
            break;
        case 'week':
            newValueFrom = dateFns.startOfWeek(dateFns.addWeeks(valueFrom, amount), { weekStartsOn: 1 });
            newValueTo = dateFns.endOfWeek(newValueFrom, { weekStartsOn: 1 });
            break;
        case 'month':
            newValueFrom = dateFns.startOfMonth(dateFns.addMonths(valueFrom, amount));
            newValueTo = dateFns.endOfMonth(newValueFrom);
            break;
        case 'quarter':
            newValueFrom = dateFns.startOfQuarter(dateFns.addQuarters(valueFrom, amount));
            newValueTo = dateFns.endOfQuarter(newValueFrom);
            break;
        case 'year':
            newValueFrom = dateFns.startOfYear(dateFns.addYears(valueFrom, amount));
            newValueTo = dateFns.endOfYear(newValueFrom);
            break;
    }
    return {
        valueFrom: newValueFrom,
        valueTo: newValueTo,
    };
};

exports.formatPeriod = formatPeriod;
exports.shiftValues = shiftValues;
