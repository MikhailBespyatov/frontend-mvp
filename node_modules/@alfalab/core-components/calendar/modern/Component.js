import React, { forwardRef, useState, useMemo, useCallback } from 'react';
import cn from 'classnames';
import { startOfMonth, startOfDay, endOfDay } from 'date-fns';
import { useDidUpdateEffect } from '@alfalab/hooks';
import 'react-transition-group';
import 'react-merge-refs';
import { Header } from './components/header/Component.js';
import '../../button/modern';
import { limitDate } from './utils.js';
import { DaysTable } from './components/days-table/Component.js';
import './components/select-button/Component.js';
import { MonthsTable } from './components/months-table/Component.js';
import { YearsTable } from './components/years-table/Component.js';
import './components/period-slider/utils.js';
import { PeriodSlider } from './components/period-slider/Component.js';
import { useCalendar } from './useCalendar.js';

var styles = {"component":"calendar__component_1b8hx","container":"calendar__container_1b8hx","sixWeeks":"calendar__sixWeeks_1b8hx","period":"calendar__period_1b8hx"};
require('./index.css');

const Calendar = forwardRef(({ className, defaultView = 'days', selectorView = 'full', value, month: monthTimestamp, minDate: minDateTimestamp, maxDate: maxDateTimestamp, defaultMonth: defaultMonthTimestamp = +new Date(), selectedFrom, selectedTo, offDays, events, onChange, onMonthChange, dataTestId, }, ref) => {
    const [view, setView] = useState(defaultView);
    const [scrolled, setScrolled] = useState(false);
    const selected = useMemo(() => (value ? new Date(value) : undefined), [value]);
    const defaultMonth = useMemo(() => startOfMonth(selected ||
        limitDate(defaultMonthTimestamp, minDateTimestamp, maxDateTimestamp)), 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []);
    const month = useMemo(() => (monthTimestamp ? new Date(monthTimestamp) : undefined), [
        monthTimestamp,
    ]);
    const minDate = useMemo(() => (minDateTimestamp ? startOfDay(minDateTimestamp) : undefined), [minDateTimestamp]);
    const maxDate = useMemo(() => (maxDateTimestamp ? endOfDay(maxDateTimestamp) : undefined), [
        maxDateTimestamp,
    ]);
    const { activeMonth, weeks, months, years, canSetPrevMonth, canSetNextMonth, setMonthByDate, setPrevMonth, setNextMonth, highlighted, getDayProps, getMonthProps, getYearProps, getRootProps, } = useCalendar({
        month,
        defaultMonth,
        view,
        minDate,
        maxDate,
        selected,
        offDays,
        events,
        onChange,
        onMonthChange,
    });
    const toggleView = useCallback((newView) => {
        setView(view === newView ? 'days' : newView);
    }, [view]);
    const handleScroll = useCallback((scrollTop) => {
        setScrolled(scrollTop > 0);
    }, []);
    const handlePrevArrowClick = useCallback(() => {
        // TODO: Что должны делать стрелки при view !== days?
        setPrevMonth();
    }, [setPrevMonth]);
    const handleNextArrowClick = useCallback(() => {
        setNextMonth();
    }, [setNextMonth]);
    const handleMonthClick = useCallback(() => {
        toggleView('months');
    }, [toggleView]);
    const handleYearClick = useCallback(() => {
        toggleView('years');
    }, [toggleView]);
    useDidUpdateEffect(() => {
        setView('days');
    }, [activeMonth]);
    useDidUpdateEffect(() => {
        setScrolled(false);
    }, [view]);
    useDidUpdateEffect(() => {
        const newMonth = value && startOfMonth(value);
        if (newMonth && newMonth.getTime() !== activeMonth.getTime()) {
            setMonthByDate(newMonth);
        }
    }, [value]);
    return (React.createElement("div", Object.assign({}, getRootProps({ ref }), { className: cn(styles.component, className, {
            [styles.sixWeeks]: weeks.length === 6,
        }), "data-test-id": dataTestId }),
        React.createElement(Header, { view: selectorView, withShadow: scrolled },
            React.createElement(PeriodSlider, { className: styles.period, value: activeMonth, periodType: 'month', prevArrowDisabled: !canSetPrevMonth, nextArrowDisabled: !canSetNextMonth, hideDisabledArrows: true, onPrevArrowClick: handlePrevArrowClick, onNextArrowClick: handleNextArrowClick, onMonthClick: handleMonthClick, onYearClick: handleYearClick, view: selectorView === 'month-only' ? 'period' : 'full' })),
        React.createElement("div", { className: styles.container },
            view === 'days' && (React.createElement(DaysTable, { weeks: weeks, activeMonth: activeMonth, selectedFrom: selectedFrom, selectedTo: selectedTo, getDayProps: getDayProps, highlighted: highlighted })),
            view === 'months' && (React.createElement(MonthsTable, { selectedMonth: activeMonth, months: months, getMonthProps: getMonthProps })),
            view === 'years' && (React.createElement(YearsTable, { selectedYear: activeMonth, years: years, getYearProps: getYearProps, onScroll: handleScroll })))));
});

export { Calendar };
