import React from 'react';
import cn from 'classnames';
import { startOfWeek, endOfWeek } from 'date-fns';
import { Button } from '../../../../button/modern';
import { monthName } from '../../utils.js';
import { SelectButton } from '../select-button/Component.js';
import { formatPeriod, shiftValues } from './utils.js';

var styles = {"component":"calendar__component_s40ku","month":"calendar__month_s40ku","year":"calendar__year_s40ku","buttonContent":"calendar__buttonContent_s40ku","period":"calendar__period_s40ku","upDownIcon":"calendar__upDownIcon_s40ku","arrow":"calendar__arrow_s40ku","full":"calendar__full_s40ku"};
require('./index.css');

const PeriodSlider = ({ value, view = 'month-only', periodType = 'month', className, periodFormatter = formatPeriod, prevArrowDisabled = false, nextArrowDisabled = false, hideDisabledArrows = false, onPrevArrowClick = () => null, onNextArrowClick = () => null, onMonthClick, onYearClick, dataTestId, }) => {
    let valueFrom;
    let valueTo;
    if (Array.isArray(value)) {
        [valueFrom, valueTo] = value;
    }
    else {
        [valueFrom, valueTo] = [value, value];
        if (periodType === 'week') {
            valueFrom = startOfWeek(valueFrom, { weekStartsOn: 1 });
            valueTo = endOfWeek(valueFrom, { weekStartsOn: 1 });
        }
    }
    const month = monthName(valueFrom);
    const year = valueFrom.getFullYear().toString();
    const showPrevButton = !(hideDisabledArrows && prevArrowDisabled);
    const showNextButton = !(hideDisabledArrows && nextArrowDisabled);
    const handleNextArrowClick = (event) => {
        const newValues = shiftValues(valueFrom, valueTo, periodType, 'next');
        onNextArrowClick(event, {
            value: newValues.valueFrom,
            valueFrom: newValues.valueFrom,
            valueTo: newValues.valueTo,
            periodType,
        });
    };
    const handlePrevArrowClick = (event) => {
        const newValues = shiftValues(valueFrom, valueTo, periodType, 'prev');
        onPrevArrowClick(event, {
            value: newValues.valueFrom,
            valueFrom: newValues.valueFrom,
            valueTo: newValues.valueTo,
            periodType,
        });
    };
    return (React.createElement("div", { className: cn(styles.component, className, {
            [styles.full]: view === 'full',
        }), "aria-live": 'polite', "data-test-id": dataTestId },
        showPrevButton && (React.createElement(Button, { view: 'ghost', className: styles.arrow, onClick: handlePrevArrowClick, disabled: prevArrowDisabled, "aria-label": '\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 \u043F\u0435\u0440\u0438\u043E\u0434' })),
        view === 'full' ? (React.createElement(React.Fragment, null,
            React.createElement(SelectButton, { view: 'filled', className: styles.month, onClick: onMonthClick },
                React.createElement("span", { className: styles.buttonContent },
                    month,
                    React.createElement("span", { className: styles.upDownIcon }))),
            React.createElement(SelectButton, { view: 'filled', className: styles.year, onClick: onYearClick },
                React.createElement("span", { className: styles.buttonContent },
                    year,
                    React.createElement("span", { className: styles.upDownIcon }))))) : (React.createElement("span", { className: styles.period }, periodFormatter(valueFrom, valueTo, periodType))),
        showNextButton && (React.createElement(Button, { view: 'ghost', className: styles.arrow, onClick: handleNextArrowClick, disabled: nextArrowDisabled, "aria-label": '\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u043F\u0435\u0440\u0438\u043E\u0434' }))));
};

export { PeriodSlider };
