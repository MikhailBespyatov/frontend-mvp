Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./tslib.es6-4b772a84.js');
var React = require('react');
var cn = require('classnames');
var dateFns = require('date-fns');
var hooks = require('@alfalab/hooks');
var components_header_Component = require('./components/header/Component.js');
require('../button');
require('react-transition-group');
var utils = require('./utils.js');
var components_daysTable_Component = require('./components/days-table/Component.js');
require('./components/select-button/Component.js');
var components_monthsTable_Component = require('./components/months-table/Component.js');
var components_yearsTable_Component = require('./components/years-table/Component.js');
require('./components/period-slider/utils.js');
var components_periodSlider_Component = require('./components/period-slider/Component.js');
require('react-merge-refs');
var useCalendar = require('./useCalendar.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);

var styles = {"component":"calendar__component_1b8hx","container":"calendar__container_1b8hx","sixWeeks":"calendar__sixWeeks_1b8hx","period":"calendar__period_1b8hx"};
require('./index.css');

var Calendar = React.forwardRef(function (_a, ref) {
    var _b;
    var className = _a.className, _c = _a.defaultView, defaultView = _c === void 0 ? 'days' : _c, _d = _a.selectorView, selectorView = _d === void 0 ? 'full' : _d, value = _a.value, monthTimestamp = _a.month, minDateTimestamp = _a.minDate, maxDateTimestamp = _a.maxDate, _e = _a.defaultMonth, defaultMonthTimestamp = _e === void 0 ? +new Date() : _e, selectedFrom = _a.selectedFrom, selectedTo = _a.selectedTo, offDays = _a.offDays, events = _a.events, onChange = _a.onChange, onMonthChange = _a.onMonthChange, dataTestId = _a.dataTestId;
    var _f = React.useState(defaultView), view = _f[0], setView = _f[1];
    var _g = React.useState(false), scrolled = _g[0], setScrolled = _g[1];
    var selected = React.useMemo(function () { return (value ? new Date(value) : undefined); }, [value]);
    var defaultMonth = React.useMemo(function () {
        return dateFns.startOfMonth(selected ||
            utils.limitDate(defaultMonthTimestamp, minDateTimestamp, maxDateTimestamp));
    }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []);
    var month = React.useMemo(function () { return (monthTimestamp ? new Date(monthTimestamp) : undefined); }, [
        monthTimestamp,
    ]);
    var minDate = React.useMemo(function () { return (minDateTimestamp ? dateFns.startOfDay(minDateTimestamp) : undefined); }, [minDateTimestamp]);
    var maxDate = React.useMemo(function () { return (maxDateTimestamp ? dateFns.endOfDay(maxDateTimestamp) : undefined); }, [
        maxDateTimestamp,
    ]);
    var _h = useCalendar.useCalendar({
        month: month,
        defaultMonth: defaultMonth,
        view: view,
        minDate: minDate,
        maxDate: maxDate,
        selected: selected,
        offDays: offDays,
        events: events,
        onChange: onChange,
        onMonthChange: onMonthChange,
    }), activeMonth = _h.activeMonth, weeks = _h.weeks, months = _h.months, years = _h.years, canSetPrevMonth = _h.canSetPrevMonth, canSetNextMonth = _h.canSetNextMonth, setMonthByDate = _h.setMonthByDate, setPrevMonth = _h.setPrevMonth, setNextMonth = _h.setNextMonth, highlighted = _h.highlighted, getDayProps = _h.getDayProps, getMonthProps = _h.getMonthProps, getYearProps = _h.getYearProps, getRootProps = _h.getRootProps;
    var toggleView = React.useCallback(function (newView) {
        setView(view === newView ? 'days' : newView);
    }, [view]);
    var handleScroll = React.useCallback(function (scrollTop) {
        setScrolled(scrollTop > 0);
    }, []);
    var handlePrevArrowClick = React.useCallback(function () {
        // TODO: Что должны делать стрелки при view !== days?
        setPrevMonth();
    }, [setPrevMonth]);
    var handleNextArrowClick = React.useCallback(function () {
        setNextMonth();
    }, [setNextMonth]);
    var handleMonthClick = React.useCallback(function () {
        toggleView('months');
    }, [toggleView]);
    var handleYearClick = React.useCallback(function () {
        toggleView('years');
    }, [toggleView]);
    hooks.useDidUpdateEffect(function () {
        setView('days');
    }, [activeMonth]);
    hooks.useDidUpdateEffect(function () {
        setScrolled(false);
    }, [view]);
    hooks.useDidUpdateEffect(function () {
        var newMonth = value && dateFns.startOfMonth(value);
        if (newMonth && newMonth.getTime() !== activeMonth.getTime()) {
            setMonthByDate(newMonth);
        }
    }, [value]);
    return (React__default['default'].createElement("div", tslib_es6.__assign({}, getRootProps({ ref: ref }), { className: cn__default['default'](styles.component, className, (_b = {},
            _b[styles.sixWeeks] = weeks.length === 6,
            _b)), "data-test-id": dataTestId }),
        React__default['default'].createElement(components_header_Component.Header, { view: selectorView, withShadow: scrolled },
            React__default['default'].createElement(components_periodSlider_Component.PeriodSlider, { className: styles.period, value: activeMonth, periodType: 'month', prevArrowDisabled: !canSetPrevMonth, nextArrowDisabled: !canSetNextMonth, hideDisabledArrows: true, onPrevArrowClick: handlePrevArrowClick, onNextArrowClick: handleNextArrowClick, onMonthClick: handleMonthClick, onYearClick: handleYearClick, view: selectorView === 'month-only' ? 'period' : 'full' })),
        React__default['default'].createElement("div", { className: styles.container },
            view === 'days' && (React__default['default'].createElement(components_daysTable_Component.DaysTable, { weeks: weeks, activeMonth: activeMonth, selectedFrom: selectedFrom, selectedTo: selectedTo, getDayProps: getDayProps, highlighted: highlighted })),
            view === 'months' && (React__default['default'].createElement(components_monthsTable_Component.MonthsTable, { selectedMonth: activeMonth, months: months, getMonthProps: getMonthProps })),
            view === 'years' && (React__default['default'].createElement(components_yearsTable_Component.YearsTable, { selectedYear: activeMonth, years: years, getYearProps: getYearProps, onScroll: handleScroll })))));
});

exports.Calendar = Calendar;
