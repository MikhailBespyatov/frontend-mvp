Object.defineProperty(exports, '__esModule', { value: true });

require('../../tslib.es6-4b772a84.js');
var React = require('react');
var cn = require('classnames');
var dateFns = require('date-fns');
var coreComponentsButton = require('../../../button');
var utils = require('../../utils.js');
var components_selectButton_Component = require('../select-button/Component.js');
var components_periodSlider_utils = require('./utils.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);

var styles = {"component":"calendar__component_s40ku","month":"calendar__month_s40ku","year":"calendar__year_s40ku","buttonContent":"calendar__buttonContent_s40ku","period":"calendar__period_s40ku","upDownIcon":"calendar__upDownIcon_s40ku","arrow":"calendar__arrow_s40ku","full":"calendar__full_s40ku"};
require('./index.css');

var PeriodSlider = function (_a) {
    var _b, _c;
    var value = _a.value, _d = _a.view, view = _d === void 0 ? 'month-only' : _d, _e = _a.periodType, periodType = _e === void 0 ? 'month' : _e, className = _a.className, _f = _a.periodFormatter, periodFormatter = _f === void 0 ? components_periodSlider_utils.formatPeriod : _f, _g = _a.prevArrowDisabled, prevArrowDisabled = _g === void 0 ? false : _g, _h = _a.nextArrowDisabled, nextArrowDisabled = _h === void 0 ? false : _h, _j = _a.hideDisabledArrows, hideDisabledArrows = _j === void 0 ? false : _j, _k = _a.onPrevArrowClick, onPrevArrowClick = _k === void 0 ? function () { return null; } : _k, _l = _a.onNextArrowClick, onNextArrowClick = _l === void 0 ? function () { return null; } : _l, onMonthClick = _a.onMonthClick, onYearClick = _a.onYearClick, dataTestId = _a.dataTestId;
    var valueFrom;
    var valueTo;
    if (Array.isArray(value)) {
        valueFrom = value[0], valueTo = value[1];
    }
    else {
        _b = [value, value], valueFrom = _b[0], valueTo = _b[1];
        if (periodType === 'week') {
            valueFrom = dateFns.startOfWeek(valueFrom, { weekStartsOn: 1 });
            valueTo = dateFns.endOfWeek(valueFrom, { weekStartsOn: 1 });
        }
    }
    var month = utils.monthName(valueFrom);
    var year = valueFrom.getFullYear().toString();
    var showPrevButton = !(hideDisabledArrows && prevArrowDisabled);
    var showNextButton = !(hideDisabledArrows && nextArrowDisabled);
    var handleNextArrowClick = function (event) {
        var newValues = components_periodSlider_utils.shiftValues(valueFrom, valueTo, periodType, 'next');
        onNextArrowClick(event, {
            value: newValues.valueFrom,
            valueFrom: newValues.valueFrom,
            valueTo: newValues.valueTo,
            periodType: periodType,
        });
    };
    var handlePrevArrowClick = function (event) {
        var newValues = components_periodSlider_utils.shiftValues(valueFrom, valueTo, periodType, 'prev');
        onPrevArrowClick(event, {
            value: newValues.valueFrom,
            valueFrom: newValues.valueFrom,
            valueTo: newValues.valueTo,
            periodType: periodType,
        });
    };
    return (React__default['default'].createElement("div", { className: cn__default['default'](styles.component, className, (_c = {},
            _c[styles.full] = view === 'full',
            _c)), "aria-live": 'polite', "data-test-id": dataTestId },
        showPrevButton && (React__default['default'].createElement(coreComponentsButton.Button, { view: 'ghost', className: styles.arrow, onClick: handlePrevArrowClick, disabled: prevArrowDisabled, "aria-label": '\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 \u043F\u0435\u0440\u0438\u043E\u0434' })),
        view === 'full' ? (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement(components_selectButton_Component.SelectButton, { view: 'filled', className: styles.month, onClick: onMonthClick },
                React__default['default'].createElement("span", { className: styles.buttonContent },
                    month,
                    React__default['default'].createElement("span", { className: styles.upDownIcon }))),
            React__default['default'].createElement(components_selectButton_Component.SelectButton, { view: 'filled', className: styles.year, onClick: onYearClick },
                React__default['default'].createElement("span", { className: styles.buttonContent },
                    year,
                    React__default['default'].createElement("span", { className: styles.upDownIcon }))))) : (React__default['default'].createElement("span", { className: styles.period }, periodFormatter(valueFrom, valueTo, periodType))),
        showNextButton && (React__default['default'].createElement(coreComponentsButton.Button, { view: 'ghost', className: styles.arrow, onClick: handleNextArrowClick, disabled: nextArrowDisabled, "aria-label": '\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u043F\u0435\u0440\u0438\u043E\u0434' }))));
};

exports.PeriodSlider = PeriodSlider;
