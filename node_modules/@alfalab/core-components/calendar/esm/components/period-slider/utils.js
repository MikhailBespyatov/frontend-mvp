import { isToday, isYesterday, getYear, getQuarter, startOfYear, addYears, endOfYear, startOfQuarter, addQuarters, endOfQuarter, startOfMonth, addMonths, endOfMonth, startOfWeek, addWeeks, endOfWeek, addDays } from 'date-fns';
import { formatDate, monthName } from '../../utils.js';

var formatPeriod = function (valueFrom, valueTo, periodType) {
    if (periodType === 'day') {
        if (isToday(valueFrom))
            return 'Сегодня';
        if (isYesterday(valueFrom))
            return 'Вчера';
        return formatDate(valueFrom);
    }
    if (periodType === 'month') {
        var year = getYear(valueFrom);
        return year === getYear(new Date())
            ? monthName(valueFrom)
            : monthName(valueFrom) + " " + getYear(valueFrom);
    }
    if (periodType === 'quarter') {
        return getQuarter(valueFrom) + " \u043A\u0432\u0430\u0440\u0442\u0430\u043B " + getYear(valueFrom);
    }
    if (periodType === 'year') {
        return getYear(valueFrom) + " \u0433\u043E\u0434";
    }
    return formatDate(valueFrom) + " - " + formatDate(valueTo);
};
var shiftValues = function (valueFrom, valueTo, periodType, direction) {
    var newValueFrom = valueFrom;
    var newValueTo = valueTo;
    var amount = direction === 'next' ? 1 : -1;
    switch (periodType) {
        case 'day':
            newValueFrom = addDays(valueFrom, amount);
            newValueTo = addDays(valueFrom, amount);
            break;
        case 'week':
            newValueFrom = startOfWeek(addWeeks(valueFrom, amount), { weekStartsOn: 1 });
            newValueTo = endOfWeek(newValueFrom, { weekStartsOn: 1 });
            break;
        case 'month':
            newValueFrom = startOfMonth(addMonths(valueFrom, amount));
            newValueTo = endOfMonth(newValueFrom);
            break;
        case 'quarter':
            newValueFrom = startOfQuarter(addQuarters(valueFrom, amount));
            newValueTo = endOfQuarter(newValueFrom);
            break;
        case 'year':
            newValueFrom = startOfYear(addYears(valueFrom, amount));
            newValueTo = endOfYear(newValueFrom);
            break;
    }
    return {
        valueFrom: newValueFrom,
        valueTo: newValueTo,
    };
};

export { formatPeriod, shiftValues };
