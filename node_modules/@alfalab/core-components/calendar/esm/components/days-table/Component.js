import { _ as __assign } from '../../tslib.es6-b934f8ee.js';
import React, { useRef, useCallback } from 'react';
import cn from 'classnames';
import { startOfMonth, isToday, isEqual, isSameDay, isWithinInterval, isLastDayOfMonth } from 'date-fns';
import { usePrevious } from '@alfalab/hooks';
import { Button } from '../../../../button/esm';
import { TransitionGroup, CSSTransition } from 'react-transition-group';
import { getSelectionRange, WEEKDAYS } from '../../utils.js';

var styles = {"daysTable":"calendar__daysTable_1vsi3","transitLeft":"calendar__transitLeft_1vsi3","transitRight":"calendar__transitRight_1vsi3","dayName":"calendar__dayName_1vsi3","day":"calendar__day_1vsi3","event":"calendar__event_1vsi3","today":"calendar__today_1vsi3","highlighted":"calendar__highlighted_1vsi3","disabled":"calendar__disabled_1vsi3","range":"calendar__range_1vsi3","selected":"calendar__selected_1vsi3","rangeStart":"calendar__rangeStart_1vsi3","firstDay":"calendar__firstDay_1vsi3","lastDay":"calendar__lastDay_1vsi3","left":"calendar__left_1vsi3","daysEnter":"calendar__daysEnter_1vsi3","daysEnterActive":"calendar__daysEnterActive_1vsi3","daysExit":"calendar__daysExit_1vsi3","daysExitActive":"calendar__daysExitActive_1vsi3","right":"calendar__right_1vsi3"};
require('./index.css');

var DaysTable = function (_a) {
    var _b = _a.weeks, weeks = _b === void 0 ? [] : _b, _c = _a.activeMonth, activeMonth = _c === void 0 ? new Date() : _c, highlighted = _a.highlighted, selectedFrom = _a.selectedFrom, selectedTo = _a.selectedTo, getDayProps = _a.getDayProps;
    var activeMonthRef = useRef(activeMonth);
    activeMonthRef.current = activeMonth;
    var prevActiveMonth = usePrevious(activeMonth);
    var direction = prevActiveMonth && (activeMonth < prevActiveMonth ? 'right' : 'left');
    var selection = getSelectionRange(selectedFrom, selectedTo, highlighted);
    var renderHeader = useCallback(function () {
        return WEEKDAYS.map(function (dayName) { return (React.createElement("th", { className: styles.dayName, key: dayName }, dayName)); });
    }, []);
    var renderDay = function (day) {
        var _a;
        var daySelected = day.selected ||
            (selectedFrom && isSameDay(day.date, selectedFrom)) ||
            (selectedTo && isSameDay(day.date, selectedTo));
        var inRange = !daySelected && selection && isWithinInterval(day.date, selection);
        var firstDay = day.date.getDate() === 1;
        var lastDay = isLastDayOfMonth(day.date);
        var transitLeft = firstDay && inRange && selection && day.date > selection.start;
        var transitRight = lastDay && inRange && selection && day.date < selection.end;
        var rangeStart = selection && isSameDay(day.date, selection.start);
        var dayProps = getDayProps(day);
        return (React.createElement(Button, __assign({}, dayProps, { ref: function (node) {
                /**
                 * После анимации реф-коллбэк вызывается еще раз, и в него передается null и старый activeMonth.
                 * Поэтому приходится хранить актуальный месяц в рефе и сравнивать с ним.
                 */
                if (startOfMonth(day.date).getTime() === activeMonthRef.current.getTime()) {
                    dayProps.ref(node);
                }
            }, type: 'button', view: 'ghost', size: 'xs', disabled: day.disabled, className: cn(styles.day, (_a = {},
                _a[styles.selected] = daySelected,
                _a[styles.range] = inRange,
                _a[styles.rangeStart] = rangeStart,
                _a[styles.transitLeft] = transitLeft,
                _a[styles.transitRight] = transitRight,
                _a[styles.today] = isToday(day.date),
                _a[styles.firstDay] = firstDay,
                _a[styles.lastDay] = lastDay,
                _a[styles.event] = day.event,
                _a[styles.disabled] = day.disabled,
                _a[styles.highlighted] = highlighted && isEqual(day.date, highlighted),
                _a)) }), day.date.getDate()));
    };
    var renderWeek = function (week, weekIdx) { return (React.createElement("tr", { key: weekIdx }, week.map(function (day, dayIdx) { return (React.createElement("td", { key: day ? day.date.getTime() : dayIdx }, day && renderDay(day))); }))); };
    return (React.createElement("table", { className: cn(styles.daysTable, direction && styles[direction]) },
        React.createElement("thead", null,
            React.createElement("tr", null, renderHeader())),
        React.createElement(TransitionGroup, { component: null },
            React.createElement(CSSTransition, { key: activeMonth.getTime(), timeout: 300, classNames: {
                    enter: styles.daysEnter,
                    enterActive: styles.daysEnterActive,
                    exit: styles.daysExit,
                    exitActive: styles.daysExitActive,
                } },
                React.createElement("tbody", null, weeks.map(renderWeek))))));
};

export { DaysTable };
