import { _ as __assign } from './tslib.es6-b934f8ee.js';
import React, { forwardRef, useState, useMemo, useCallback } from 'react';
import cn from 'classnames';
import { startOfMonth, startOfDay, endOfDay } from 'date-fns';
import { useDidUpdateEffect } from '@alfalab/hooks';
import { Header } from './components/header/Component.js';
import '../../button/esm';
import 'react-transition-group';
import { limitDate } from './utils.js';
import { DaysTable } from './components/days-table/Component.js';
import './components/select-button/Component.js';
import { MonthsTable } from './components/months-table/Component.js';
import { YearsTable } from './components/years-table/Component.js';
import './components/period-slider/utils.js';
import { PeriodSlider } from './components/period-slider/Component.js';
import 'react-merge-refs';
import { useCalendar } from './useCalendar.js';

var styles = {"component":"calendar__component_1b8hx","container":"calendar__container_1b8hx","sixWeeks":"calendar__sixWeeks_1b8hx","period":"calendar__period_1b8hx"};
require('./index.css');

var Calendar = forwardRef(function (_a, ref) {
    var _b;
    var className = _a.className, _c = _a.defaultView, defaultView = _c === void 0 ? 'days' : _c, _d = _a.selectorView, selectorView = _d === void 0 ? 'full' : _d, value = _a.value, monthTimestamp = _a.month, minDateTimestamp = _a.minDate, maxDateTimestamp = _a.maxDate, _e = _a.defaultMonth, defaultMonthTimestamp = _e === void 0 ? +new Date() : _e, selectedFrom = _a.selectedFrom, selectedTo = _a.selectedTo, offDays = _a.offDays, events = _a.events, onChange = _a.onChange, onMonthChange = _a.onMonthChange, dataTestId = _a.dataTestId;
    var _f = useState(defaultView), view = _f[0], setView = _f[1];
    var _g = useState(false), scrolled = _g[0], setScrolled = _g[1];
    var selected = useMemo(function () { return (value ? new Date(value) : undefined); }, [value]);
    var defaultMonth = useMemo(function () {
        return startOfMonth(selected ||
            limitDate(defaultMonthTimestamp, minDateTimestamp, maxDateTimestamp));
    }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []);
    var month = useMemo(function () { return (monthTimestamp ? new Date(monthTimestamp) : undefined); }, [
        monthTimestamp,
    ]);
    var minDate = useMemo(function () { return (minDateTimestamp ? startOfDay(minDateTimestamp) : undefined); }, [minDateTimestamp]);
    var maxDate = useMemo(function () { return (maxDateTimestamp ? endOfDay(maxDateTimestamp) : undefined); }, [
        maxDateTimestamp,
    ]);
    var _h = useCalendar({
        month: month,
        defaultMonth: defaultMonth,
        view: view,
        minDate: minDate,
        maxDate: maxDate,
        selected: selected,
        offDays: offDays,
        events: events,
        onChange: onChange,
        onMonthChange: onMonthChange,
    }), activeMonth = _h.activeMonth, weeks = _h.weeks, months = _h.months, years = _h.years, canSetPrevMonth = _h.canSetPrevMonth, canSetNextMonth = _h.canSetNextMonth, setMonthByDate = _h.setMonthByDate, setPrevMonth = _h.setPrevMonth, setNextMonth = _h.setNextMonth, highlighted = _h.highlighted, getDayProps = _h.getDayProps, getMonthProps = _h.getMonthProps, getYearProps = _h.getYearProps, getRootProps = _h.getRootProps;
    var toggleView = useCallback(function (newView) {
        setView(view === newView ? 'days' : newView);
    }, [view]);
    var handleScroll = useCallback(function (scrollTop) {
        setScrolled(scrollTop > 0);
    }, []);
    var handlePrevArrowClick = useCallback(function () {
        // TODO: Что должны делать стрелки при view !== days?
        setPrevMonth();
    }, [setPrevMonth]);
    var handleNextArrowClick = useCallback(function () {
        setNextMonth();
    }, [setNextMonth]);
    var handleMonthClick = useCallback(function () {
        toggleView('months');
    }, [toggleView]);
    var handleYearClick = useCallback(function () {
        toggleView('years');
    }, [toggleView]);
    useDidUpdateEffect(function () {
        setView('days');
    }, [activeMonth]);
    useDidUpdateEffect(function () {
        setScrolled(false);
    }, [view]);
    useDidUpdateEffect(function () {
        var newMonth = value && startOfMonth(value);
        if (newMonth && newMonth.getTime() !== activeMonth.getTime()) {
            setMonthByDate(newMonth);
        }
    }, [value]);
    return (React.createElement("div", __assign({}, getRootProps({ ref: ref }), { className: cn(styles.component, className, (_b = {},
            _b[styles.sixWeeks] = weeks.length === 6,
            _b)), "data-test-id": dataTestId }),
        React.createElement(Header, { view: selectorView, withShadow: scrolled },
            React.createElement(PeriodSlider, { className: styles.period, value: activeMonth, periodType: 'month', prevArrowDisabled: !canSetPrevMonth, nextArrowDisabled: !canSetNextMonth, hideDisabledArrows: true, onPrevArrowClick: handlePrevArrowClick, onNextArrowClick: handleNextArrowClick, onMonthClick: handleMonthClick, onYearClick: handleYearClick, view: selectorView === 'month-only' ? 'period' : 'full' })),
        React.createElement("div", { className: styles.container },
            view === 'days' && (React.createElement(DaysTable, { weeks: weeks, activeMonth: activeMonth, selectedFrom: selectedFrom, selectedTo: selectedTo, getDayProps: getDayProps, highlighted: highlighted })),
            view === 'months' && (React.createElement(MonthsTable, { selectedMonth: activeMonth, months: months, getMonthProps: getMonthProps })),
            view === 'years' && (React.createElement(YearsTable, { selectedYear: activeMonth, years: years, getYearProps: getYearProps, onScroll: handleScroll })))));
});

export { Calendar };
