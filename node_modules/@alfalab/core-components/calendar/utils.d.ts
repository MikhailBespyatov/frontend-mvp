import { DateShift, Day, Month, SpecialDays } from "./typings";
declare const DAYS_IN_WEEK = 7;
declare const MONTHS_IN_YEAR = 12;
declare const SUNDAY_INDEX = 6;
declare const DATE_FORMAT = "dd.MM.yyyy";
declare const NATIVE_DATE_FORMAT = "yyyy-MM-dd";
declare const WEEKDAYS: string[];
declare const MONTHS: string[];
/**
 * Возвращает «правильный» индекс дня недели, 0 - пн, 1 - вт и так далее.
 */
declare function russianWeekDay(date: Date): number;
/**
 * Возвращает таблицу-календарь с заполненными датами для переданного месяца
 */
declare function generateWeeks(month: Date, options: {
    minDate?: Date;
    maxDate?: Date;
    selected?: Date;
    eventsMap?: SpecialDays;
    offDaysMap?: SpecialDays;
}): Day[][];
/**
 * Возвращает массив с месяцами для переданного года
 */
declare function generateMonths(year: Date, options: {
    minMonth?: Date;
    maxMonth?: Date;
}): Month[];
/**
 * Возвращает массив лет от minYear до maxYear
 */
declare function generateYears(minYear: Date, maxYear: Date): Date[];
/**
 * Добавляет метаданные для переданного дня
 */
declare function buildDay(day: Date, options: {
    minDate?: Date;
    maxDate?: Date;
    selected?: Date;
    eventsMap?: SpecialDays;
    offDaysMap?: SpecialDays;
}): Day;
/**
 * Добавляет метаданные для переданного месяца
 */
declare function buildMonth(month: Date, options: {
    minMonth?: Date;
    maxMonth?: Date;
}): Month;
/**
 * Ограничивает дату на отрезке [minDate, maxDate]
 */
declare function limitDate(date: Date | number, minDate?: Date | number, maxDate?: Date | number): Date;
/**
 * Проверяет, находится ли переданная дата в указанных границах
 */
declare function dateInLimits(date?: Date | number | null, minDate?: Date | number, maxDate?: Date | number): boolean | 0 | null | undefined;
/**
 * Возвращает русское название месяца с большой буквы
 */
declare function monthName(month: Date): string;
/**
 * Превращает массив в объект, у которого ключи составляются из элементов массива
 */
declare function dateArrayToHashTable(arr: Array<Date | number>): Record<number, boolean>;
/**
 * Возвращает корректный отрезок дат для выделения
 */
declare function getSelectionRange(from?: Date | number, to?: Date | number, highlighted?: Date | number): {
    start: Date;
    end: Date;
} | null;
declare function modifyDateByShift(shift: DateShift, date: Date, minDate?: Date, maxDate?: Date, offDaysMap?: Record<number, boolean>): Date;
/**
 * Если дата была выбрана мышкой — фокусную обводку не видно
 * TODO: добавить в useFocus возможность переключать метод ввода программно
 */
declare function simulateTab(node: HTMLElement): void;
declare const formatDate: (date: number | Date, dateFormat?: string) => string;
declare const parseDateString: (value: string, dateFormat?: string) => Date;
export { DAYS_IN_WEEK, MONTHS_IN_YEAR, SUNDAY_INDEX, DATE_FORMAT, NATIVE_DATE_FORMAT, WEEKDAYS, MONTHS, russianWeekDay, generateWeeks, generateMonths, generateYears, buildDay, buildMonth, limitDate, dateInLimits, monthName, dateArrayToHashTable, getSelectionRange, modifyDateByShift, simulateTab, formatDate, parseDateString };
