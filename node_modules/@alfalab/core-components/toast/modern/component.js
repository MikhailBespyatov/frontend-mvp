import React, { forwardRef, useRef, useCallback, useEffect } from 'react';
import mergeRefs from 'react-merge-refs';
import { CSSTransition } from 'react-transition-group';
import cn from 'classnames';
import { usePrevious, useClickOutside } from '@alfalab/hooks';
import { ToastPlate } from '../../toast-plate/modern';
import { Popover } from '../../popover/modern';
import { Portal } from '../../portal/modern';
import { stackingOrder, Stack } from '../../stack/modern';

var styles = {"toastPlate":"toast__toastPlate_1hemu","popoverInner":"toast__popoverInner_1hemu","block":"toast__block_1hemu","fixed":"toast__fixed_1hemu","enter":"toast__enter_1hemu","enterActive":"toast__enterActive_1hemu","exit":"toast__exit_1hemu","exitActive":"toast__exitActive_1hemu"};
require('./index.css');

const CSS_TRANSITION_CLASS_NAMES = {
    enter: styles.enter,
    enterActive: styles.enterActive,
    exit: styles.exit,
    exitActive: styles.exitActive,
};
const DefaultToastPlate = forwardRef((props, ref) => (React.createElement(ToastPlate, Object.assign({ ref: ref }, props))));
const Toast = forwardRef(({ anchorElement, position, offset, open, autoCloseDelay = 3000, className, bottomOffset, style = {}, block, zIndex = stackingOrder.TOAST, ToastPlate = DefaultToastPlate, onMouseEnter, onMouseLeave, onTouchStart, onClose, getPortalContainer, ...restProps }, ref) => {
    const plateRef = useRef(null);
    const timerId = useRef(0);
    const prevOpen = usePrevious(open);
    const startTimer = useCallback(() => {
        clearTimeout(timerId.current);
        timerId.current = window.setTimeout(onClose, autoCloseDelay);
    }, [autoCloseDelay, onClose]);
    const stopTimer = useCallback(() => {
        clearTimeout(timerId.current);
    }, []);
    const handleMouseEnter = useCallback(event => {
        stopTimer();
        if (onMouseEnter) {
            onMouseEnter(event);
        }
    }, [onMouseEnter, stopTimer]);
    const handleMouseLeave = useCallback(event => {
        startTimer();
        if (onMouseLeave) {
            onMouseLeave(event);
        }
    }, [onMouseLeave, startTimer]);
    const handleTouchStart = useCallback(event => {
        stopTimer();
        if (onTouchStart) {
            onTouchStart(event);
        }
    }, [onTouchStart, stopTimer]);
    const handleClickOutside = useCallback(() => {
        onClose();
        stopTimer();
    }, [onClose, stopTimer]);
    useClickOutside(plateRef, handleClickOutside);
    useEffect(() => {
        if (open !== prevOpen && open) {
            startTimer();
        }
    }, [open, prevOpen, startTimer, stopTimer]);
    const props = {
        block,
        onClose,
        onMouseEnter: handleMouseEnter,
        onMouseLeave: handleMouseLeave,
        onTouchStart: handleTouchStart,
        ref: mergeRefs([ref, plateRef]),
    };
    if (anchorElement) {
        return (React.createElement(Popover, { open: open, anchorElement: anchorElement, position: position, offset: offset, popperClassName: styles.popoverInner, className: cn({ [styles.block]: block }), transition: { timeout: 150 }, getPortalContainer: getPortalContainer, zIndex: zIndex },
            React.createElement(ToastPlate, Object.assign({}, restProps, { style: style, className: className }, props))));
    }
    return (React.createElement(Stack, { value: zIndex }, computedZIndex => (React.createElement(Portal, { getPortalContainer: getPortalContainer },
        React.createElement(CSSTransition, { unmountOnExit: true, in: open, timeout: 150, classNames: CSS_TRANSITION_CLASS_NAMES },
            React.createElement(ToastPlate, Object.assign({}, restProps, { className: cn(styles.fixed, styles.toastPlate, className), style: {
                    ...style,
                    bottom: bottomOffset && `${bottomOffset}px`,
                    zIndex: computedZIndex,
                } }, props)))))));
});

export { Toast };
