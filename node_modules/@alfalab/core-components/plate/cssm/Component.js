Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var cn = require('classnames');
var mergeRefs = require('react-merge-refs');
var hooks = require('@alfalab/hooks');
var coreComponentsButton = require('../../button/cssm');
var styles = require('./index.module.css');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);
var mergeRefs__default = /*#__PURE__*/_interopDefaultLegacy(mergeRefs);
var styles__default = /*#__PURE__*/_interopDefaultLegacy(styles);

var Plate = React.forwardRef(function (_a, ref) {
    var _b, _c, _d, _e;
    var hasCloser = _a.hasCloser, _f = _a.foldable, foldableProp = _f === void 0 ? false : _f, foldedProp = _a.folded, _g = _a.defaultFolded, defaultFolded = _g === void 0 ? true : _g, leftAddons = _a.leftAddons, children = _a.children, _h = _a.buttons, buttons = _h === void 0 ? [] : _h, title = _a.title, _j = _a.view, view = _j === void 0 ? 'common' : _j, className = _a.className, buttonsClassName = _a.buttonsClassName, contentClassName = _a.contentClassName, dataTestId = _a.dataTestId, onClick = _a.onClick, onClose = _a.onClose, onToggle = _a.onToggle;
    var plateRef = React.useRef(null);
    var contentRef = React.useRef(null);
    var focused = hooks.useFocus(plateRef, 'keyboard')[0];
    var _k = React.useState(false), isHidden = _k[0], setIsHidden = _k[1];
    var _l = React.useState(defaultFolded), foldedState = _l[0], setFoldedState = _l[1];
    var uncontrolled = foldedProp === undefined;
    var foldable = !!title && !!children && foldableProp;
    var folded = uncontrolled ? foldedState : foldedProp;
    var hasButtons = Array.isArray(buttons) && buttons.length > 0;
    var hasContent = children || hasButtons;
    var handleClick = React.useCallback(function (event) {
        var eventInsideComponent = plateRef.current && plateRef.current.contains(event.target);
        var eventInsideContent = contentRef.current && contentRef.current.contains(event.target);
        var clickSimilarKeys = ['Enter', ' '].includes(event.key);
        var shouldChangeIsFolded = eventInsideComponent &&
            !eventInsideContent &&
            (event.type === 'click' || clickSimilarKeys);
        if (foldable && shouldChangeIsFolded) {
            if (uncontrolled) {
                setFoldedState(!foldedState);
            }
            if (onToggle) {
                onToggle(event, { folded: !(uncontrolled ? foldedState : foldedProp) });
            }
        }
        if (onClick) {
            onClick(event);
        }
    }, [foldable, onClick, uncontrolled, onToggle, foldedState, foldedProp]);
    var handleClose = React.useCallback(function (event) {
        setIsHidden(true);
        if (onClose) {
            onClose(event);
        }
    }, [onClose]);
    var renderButtons = React.useCallback(function () { return (React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].buttons, buttonsClassName) }, buttons.map(function (button, index) {
        return button
            ? React__default['default'].cloneElement(button, {
                // eslint-disable-next-line react/no-array-index-key
                key: index,
                size: 'xs',
                view: index === 0 ? 'outlined' : 'link',
                className: cn__default['default'](button.props.className, styles__default['default'].button),
            })
            : null;
    }))); }, [buttons, buttonsClassName]);
    return (
    // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
    React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].component, styles__default['default'][view], (_b = {},
            _b[styles__default['default'].foldable] = foldable,
            _b[styles__default['default'].focused] = focused,
            _b[styles__default['default'].isHidden] = hasCloser && isHidden,
            _b[styles__default['default'].isFolded] = foldable && folded,
            _b), className), onClick: handleClick, onKeyDown: handleClick, role: 'alert', ref: mergeRefs__default['default']([plateRef, ref]), 
        /* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */
        tabIndex: foldable ? 0 : -1, "data-test-id": dataTestId },
        React__default['default'].createElement("div", { className: styles__default['default'].inner },
            leftAddons && React__default['default'].createElement("div", { className: styles__default['default'].leftAddons }, leftAddons),
            React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].contentContainer, contentClassName, (_c = {},
                    _c[styles__default['default'].withoutTitle] = !title,
                    _c)) },
                title && React__default['default'].createElement("div", { className: styles__default['default'].title }, title),
                hasContent && (React__default['default'].createElement("div", { ref: contentRef, className: cn__default['default'](styles__default['default'].content, (_d = {},
                        _d[styles__default['default'].isFolded] = foldable && folded,
                        _d)) },
                    React__default['default'].createElement("div", { className: styles__default['default'].contentInner },
                        children,
                        hasButtons ? renderButtons() : null)))),
            foldable && (React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].folder, (_e = {},
                    _e[styles__default['default'].isFolded] = folded,
                    _e)) })),
            hasCloser && !foldable && (React__default['default'].createElement(coreComponentsButton.Button, { className: styles__default['default'].closer, "aria-label": '\u0437\u0430\u043A\u0440\u044B\u0442\u044C', view: 'ghost', onClick: handleClose })))));
});
/**
 * Для отображения в сторибуке
 */
Plate.defaultProps = {
    foldable: false,
    defaultFolded: true,
    view: 'common',
};

exports.Plate = Plate;
