import React, { forwardRef, useRef, useState, useCallback } from 'react';
import cn from 'classnames';
import mergeRefs from 'react-merge-refs';
import { useFocus } from '@alfalab/hooks';
import { Button } from '../../button/esm';

var styles = {"component":"plate__component_1mnzm","foldable":"plate__foldable_1mnzm","focused":"plate__focused_1mnzm","inner":"plate__inner_1mnzm","common":"plate__common_1mnzm","negative":"plate__negative_1mnzm","positive":"plate__positive_1mnzm","attention":"plate__attention_1mnzm","isHidden":"plate__isHidden_1mnzm","leftAddons":"plate__leftAddons_1mnzm","title":"plate__title_1mnzm","content":"plate__content_1mnzm","isFolded":"plate__isFolded_1mnzm","contentContainer":"plate__contentContainer_1mnzm","withoutTitle":"plate__withoutTitle_1mnzm","contentInner":"plate__contentInner_1mnzm","closer":"plate__closer_1mnzm","folder":"plate__folder_1mnzm","buttons":"plate__buttons_1mnzm","button":"plate__button_1mnzm"};
require('./index.css');

var Plate = forwardRef(function (_a, ref) {
    var _b, _c, _d, _e;
    var hasCloser = _a.hasCloser, _f = _a.foldable, foldableProp = _f === void 0 ? false : _f, foldedProp = _a.folded, _g = _a.defaultFolded, defaultFolded = _g === void 0 ? true : _g, leftAddons = _a.leftAddons, children = _a.children, _h = _a.buttons, buttons = _h === void 0 ? [] : _h, title = _a.title, _j = _a.view, view = _j === void 0 ? 'common' : _j, className = _a.className, buttonsClassName = _a.buttonsClassName, contentClassName = _a.contentClassName, dataTestId = _a.dataTestId, onClick = _a.onClick, onClose = _a.onClose, onToggle = _a.onToggle;
    var plateRef = useRef(null);
    var contentRef = useRef(null);
    var focused = useFocus(plateRef, 'keyboard')[0];
    var _k = useState(false), isHidden = _k[0], setIsHidden = _k[1];
    var _l = useState(defaultFolded), foldedState = _l[0], setFoldedState = _l[1];
    var uncontrolled = foldedProp === undefined;
    var foldable = !!title && !!children && foldableProp;
    var folded = uncontrolled ? foldedState : foldedProp;
    var hasButtons = Array.isArray(buttons) && buttons.length > 0;
    var hasContent = children || hasButtons;
    var handleClick = useCallback(function (event) {
        var eventInsideComponent = plateRef.current && plateRef.current.contains(event.target);
        var eventInsideContent = contentRef.current && contentRef.current.contains(event.target);
        var clickSimilarKeys = ['Enter', ' '].includes(event.key);
        var shouldChangeIsFolded = eventInsideComponent &&
            !eventInsideContent &&
            (event.type === 'click' || clickSimilarKeys);
        if (foldable && shouldChangeIsFolded) {
            if (uncontrolled) {
                setFoldedState(!foldedState);
            }
            if (onToggle) {
                onToggle(event, { folded: !(uncontrolled ? foldedState : foldedProp) });
            }
        }
        if (onClick) {
            onClick(event);
        }
    }, [foldable, onClick, uncontrolled, onToggle, foldedState, foldedProp]);
    var handleClose = useCallback(function (event) {
        setIsHidden(true);
        if (onClose) {
            onClose(event);
        }
    }, [onClose]);
    var renderButtons = useCallback(function () { return (React.createElement("div", { className: cn(styles.buttons, buttonsClassName) }, buttons.map(function (button, index) {
        return button
            ? React.cloneElement(button, {
                // eslint-disable-next-line react/no-array-index-key
                key: index,
                size: 'xs',
                view: index === 0 ? 'outlined' : 'link',
                className: cn(button.props.className, styles.button),
            })
            : null;
    }))); }, [buttons, buttonsClassName]);
    return (
    // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
    React.createElement("div", { className: cn(styles.component, styles[view], (_b = {},
            _b[styles.foldable] = foldable,
            _b[styles.focused] = focused,
            _b[styles.isHidden] = hasCloser && isHidden,
            _b[styles.isFolded] = foldable && folded,
            _b), className), onClick: handleClick, onKeyDown: handleClick, role: 'alert', ref: mergeRefs([plateRef, ref]), 
        /* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */
        tabIndex: foldable ? 0 : -1, "data-test-id": dataTestId },
        React.createElement("div", { className: styles.inner },
            leftAddons && React.createElement("div", { className: styles.leftAddons }, leftAddons),
            React.createElement("div", { className: cn(styles.contentContainer, contentClassName, (_c = {},
                    _c[styles.withoutTitle] = !title,
                    _c)) },
                title && React.createElement("div", { className: styles.title }, title),
                hasContent && (React.createElement("div", { ref: contentRef, className: cn(styles.content, (_d = {},
                        _d[styles.isFolded] = foldable && folded,
                        _d)) },
                    React.createElement("div", { className: styles.contentInner },
                        children,
                        hasButtons ? renderButtons() : null)))),
            foldable && (React.createElement("div", { className: cn(styles.folder, (_e = {},
                    _e[styles.isFolded] = folded,
                    _e)) })),
            hasCloser && !foldable && (React.createElement(Button, { className: styles.closer, "aria-label": '\u0437\u0430\u043A\u0440\u044B\u0442\u044C', view: 'ghost', onClick: handleClose })))));
});
/**
 * Для отображения в сторибуке
 */
Plate.defaultProps = {
    foldable: false,
    defaultFolded: true,
    view: 'common',
};

export { Plate };
