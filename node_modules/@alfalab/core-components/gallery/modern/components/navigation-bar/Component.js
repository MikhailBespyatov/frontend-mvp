import React, { useRef, useContext, useCallback, useEffect } from 'react';
import 'classnames';
import '@alfalab/hooks';
import { GalleryContext } from '../../context.js';
import { ImagePreview } from '../image-preview/Component.js';
import { getImageKey } from '../../utils/utils.js';
import { TestIds } from '../../utils/constants.js';

var styles = {"component":"gallery__component_1joet","preview":"gallery__preview_1joet"};
require('./index.css');

const MIN_SCROLL_STEP = 24;
const NavigationBar = () => {
    const containerRef = useRef(null);
    const { images, currentSlideIndex, setCurrentSlideIndex, getSwiper } = useContext(GalleryContext);
    const swiper = getSwiper();
    const handlePreviewSelect = (index) => {
        setCurrentSlideIndex(index);
        if (swiper) {
            swiper.slideTo(index);
        }
    };
    const scroll = useCallback((scrollValue) => {
        if (containerRef.current) {
            containerRef.current.scroll({
                top: 0,
                left: containerRef.current.scrollLeft + scrollValue,
                behavior: 'smooth',
            });
        }
    }, []);
    const handlePreviewPosition = useCallback((preview, containerWidth) => {
        const { right, left } = preview.getBoundingClientRect();
        if (right > containerWidth) {
            const scrollValue = right - containerWidth + MIN_SCROLL_STEP;
            scroll(scrollValue);
        }
        else if (left < 0) {
            const scrollValue = left - MIN_SCROLL_STEP;
            scroll(scrollValue);
        }
    }, [scroll]);
    const handleKeyDown = event => {
        if (['ArrowLeft', 'ArrowRight'].includes(event.key)) {
            event.preventDefault();
        }
    };
    useEffect(() => {
        if (containerRef.current) {
            const { width: containerWidth } = containerRef.current.getBoundingClientRect();
            const activePreview = containerRef.current.children[currentSlideIndex];
            if (activePreview) {
                handlePreviewPosition(activePreview, containerWidth);
            }
        }
    }, [currentSlideIndex, handlePreviewPosition, scroll]);
    return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    React.createElement("div", { className: styles.component, ref: containerRef, onKeyDown: handleKeyDown, "data-test-id": TestIds.NAVIGATION_BAR }, images.map((image, index) => {
        const active = index === currentSlideIndex;
        return (React.createElement(ImagePreview, { key: getImageKey(image, index), image: image, active: active, index: index, onSelect: handlePreviewSelect, className: styles.preview }));
    })));
};

export { NavigationBar };
