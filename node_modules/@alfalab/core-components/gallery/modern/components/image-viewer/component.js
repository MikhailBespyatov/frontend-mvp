import React, { useContext, useRef, useCallback, useEffect, useMemo } from 'react';
import cn from 'classnames';
import { useFocus } from '@alfalab/hooks';
import SwiperCore, { EffectFade, A11y, Controller } from 'swiper';
import { Swiper, SwiperSlide } from 'swiper/react';
import elementClosest from 'element-closest';
import 'swiper/swiper.min.css';
import { ChevronBackHeavyMIcon } from '@alfalab/icons-glyph/ChevronBackHeavyMIcon';
import { ChevronForwardHeavyMIcon } from '@alfalab/icons-glyph/ChevronForwardHeavyMIcon';
import { GalleryContext } from '../../context.js';
import { getImageAlt, getImageKey } from '../../utils/utils.js';
import { TestIds } from '../../utils/constants.js';
import '../../../../typography/modern';
import { s as styles, S as Slide } from '../../slide-d0e4396e.js';

SwiperCore.use([EffectFade, A11y, Controller]);
const ImageViewer = () => {
    const { singleSlide, images, imagesMeta, fullScreen, currentSlideIndex, initialSlide, onClose, getCurrentImage, setImageMeta, setCurrentSlideIndex, getSwiper, setSwiper, slidePrev, slideNext, } = useContext(GalleryContext);
    const leftArrowRef = useRef(null);
    const rightArrowRef = useRef(null);
    const [leftArrowFocused] = useFocus(leftArrowRef, 'keyboard');
    const [rightArrowFocused] = useFocus(rightArrowRef, 'keyboard');
    const swiper = getSwiper();
    const handleSlideChange = useCallback(() => {
        setCurrentSlideIndex(swiper?.activeIndex ?? initialSlide);
    }, [setCurrentSlideIndex, swiper, initialSlide]);
    const handlePrevClick = () => {
        slidePrev();
    };
    const handleNextClick = () => {
        slideNext();
    };
    const handleArrowLeftKeyDown = event => {
        if (event.key === 'Enter') {
            slidePrev();
        }
    };
    const handleArrowRightKeyDown = event => {
        if (event.key === 'Enter') {
            slideNext();
        }
    };
    const handleLoad = (event, index) => {
        const target = event.currentTarget;
        const { naturalWidth, naturalHeight } = target;
        setImageMeta({ width: naturalWidth, height: naturalHeight }, index);
    };
    const handleLoadError = (index) => {
        setImageMeta({ width: 0, height: 0, broken: true }, index);
    };
    const handleWrapperClick = useCallback(event => {
        const eventTarget = event.target;
        const isArrow = leftArrowRef.current?.contains(eventTarget) ||
            rightArrowRef.current?.contains(eventTarget);
        const isPlaceholder = Boolean(eventTarget.closest(`.${styles.placeholder}`));
        const isImg = eventTarget.tagName === 'IMG';
        if (!isImg && !isPlaceholder && !isArrow) {
            onClose();
        }
    }, [onClose]);
    useEffect(() => {
        elementClosest(window);
    }, []);
    const swiperProps = useMemo(() => ({
        slidesPerView: 1,
        effect: 'fade',
        fadeEffect: {
            crossFade: true,
        },
        className: cn(styles.swiper, { [styles.hidden]: fullScreen }),
        controller: { control: swiper },
        a11y: {
            slideRole: 'img',
        },
        initialSlide,
        simulateTouch: false,
        onSwiper: setSwiper,
        onSlideChange: handleSlideChange,
    }), [swiper, fullScreen, initialSlide, handleSlideChange, setSwiper]);
    const showControls = !singleSlide && !fullScreen;
    const swiperWidth = swiper?.width || 1;
    const swiperHeight = swiper?.height || 1;
    const swiperAspectRatio = swiperWidth / swiperHeight;
    const currentImage = getCurrentImage();
    return (
    /* eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */
    React.createElement("div", { className: cn(styles.component, { [styles.singleSlide]: singleSlide }), onClick: handleWrapperClick },
        showControls && (React.createElement("div", { className: cn(styles.arrow, {
                [styles.focused]: leftArrowFocused,
            }), onClick: handlePrevClick, role: 'button', onKeyDown: handleArrowLeftKeyDown, tabIndex: 0, ref: leftArrowRef, "aria-label": '\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0435\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435', "data-test-id": TestIds.PREV_SLIDE_BUTTON },
            React.createElement(ChevronBackHeavyMIcon, null))),
        fullScreen && (React.createElement("img", { src: currentImage?.src, alt: currentImage ? getImageAlt(currentImage, currentSlideIndex) : '', className: styles.fullScreenImage })),
        React.createElement(Swiper, Object.assign({}, swiperProps), images.map((image, index) => {
            const meta = imagesMeta[index];
            const imageWidth = meta?.width || 1;
            const imageHeight = meta?.height || 1;
            const imageAspectRatio = imageWidth / imageHeight;
            const slideVisible = index === currentSlideIndex;
            return (React.createElement(SwiperSlide, { key: getImageKey(image, index), style: {
                    pointerEvents: slideVisible ? 'auto' : 'none',
                    transitionProperty: 'opacity',
                } }, ({ isActive }) => (React.createElement(Slide, { isActive: isActive, swiperAspectRatio: swiperAspectRatio, image: image, swiperHeight: swiperHeight, meta: meta, index: index, imageAspectRatio: imageAspectRatio, slideVisible: slideVisible, handleLoad: handleLoad, handleLoadError: handleLoadError }))));
        })),
        showControls && (React.createElement("div", { className: cn(styles.arrow, {
                [styles.focused]: rightArrowFocused,
            }), onClick: handleNextClick, role: 'button', onKeyDown: handleArrowRightKeyDown, tabIndex: 0, ref: rightArrowRef, "aria-label": '\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435', "data-test-id": TestIds.NEXT_SLIDE_BUTTON },
            React.createElement(ChevronForwardHeavyMIcon, null)))));
};

export { ImageViewer };
