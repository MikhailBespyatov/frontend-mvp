import React, { useRef, useContext, useCallback, useEffect } from 'react';
import 'classnames';
import '@alfalab/hooks';
import { GalleryContext } from '../../context.js';
import { ImagePreview } from '../image-preview/Component.js';
import { getImageKey } from '../../utils/utils.js';
import { TestIds } from '../../utils/constants.js';

var styles = {"component":"gallery__component_1joet","preview":"gallery__preview_1joet"};
require('./index.css');

var MIN_SCROLL_STEP = 24;
var NavigationBar = function () {
    var containerRef = useRef(null);
    var _a = useContext(GalleryContext), images = _a.images, currentSlideIndex = _a.currentSlideIndex, setCurrentSlideIndex = _a.setCurrentSlideIndex, getSwiper = _a.getSwiper;
    var swiper = getSwiper();
    var handlePreviewSelect = function (index) {
        setCurrentSlideIndex(index);
        if (swiper) {
            swiper.slideTo(index);
        }
    };
    var scroll = useCallback(function (scrollValue) {
        if (containerRef.current) {
            containerRef.current.scroll({
                top: 0,
                left: containerRef.current.scrollLeft + scrollValue,
                behavior: 'smooth',
            });
        }
    }, []);
    var handlePreviewPosition = useCallback(function (preview, containerWidth) {
        var _a = preview.getBoundingClientRect(), right = _a.right, left = _a.left;
        if (right > containerWidth) {
            var scrollValue = right - containerWidth + MIN_SCROLL_STEP;
            scroll(scrollValue);
        }
        else if (left < 0) {
            var scrollValue = left - MIN_SCROLL_STEP;
            scroll(scrollValue);
        }
    }, [scroll]);
    var handleKeyDown = function (event) {
        if (['ArrowLeft', 'ArrowRight'].includes(event.key)) {
            event.preventDefault();
        }
    };
    useEffect(function () {
        if (containerRef.current) {
            var containerWidth = containerRef.current.getBoundingClientRect().width;
            var activePreview = containerRef.current.children[currentSlideIndex];
            if (activePreview) {
                handlePreviewPosition(activePreview, containerWidth);
            }
        }
    }, [currentSlideIndex, handlePreviewPosition, scroll]);
    return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    React.createElement("div", { className: styles.component, ref: containerRef, onKeyDown: handleKeyDown, "data-test-id": TestIds.NAVIGATION_BAR }, images.map(function (image, index) {
        var active = index === currentSlideIndex;
        return (React.createElement(ImagePreview, { key: getImageKey(image, index), image: image, active: active, index: index, onSelect: handlePreviewSelect, className: styles.preview }));
    })));
};

export { NavigationBar };
