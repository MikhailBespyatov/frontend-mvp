import React, { useContext, useRef, useEffect } from 'react';
import { GalleryContext } from '../../context.js';
import { isSmallImage } from '../../utils/utils.js';
import { TestIds } from '../../utils/constants.js';
import '../../utils/split-filename.js';
import '../../../../typography/esm';
import { HeaderInfoBlock } from '../header-info-block/Component.js';
import '../../tslib.es6-6bc7eb3c.js';
import '../../../../icon-button/esm';
import '../../../../tooltip/esm';
import '@alfalab/icons-glyph/PointerDownMIcon';
import '@alfalab/icons-glyph/ArrowsOutwardMIcon';
import '@alfalab/icons-glyph/ArrowsInwardMIcon';
import '@alfalab/icons-glyph/CrossMIcon';
import { ExitFullscreen, Fullscreen, Download, Exit } from './buttons.js';

var styles = {"header":"gallery__header_zip5e","buttons":"gallery__buttons_zip5e"};
require('./index.css');

var Header = function () {
    var _a;
    var _b = useContext(GalleryContext), currentSlideIndex = _b.currentSlideIndex, singleSlide = _b.singleSlide, images = _b.images, fullScreen = _b.fullScreen, getCurrentImageMeta = _b.getCurrentImageMeta, getCurrentImage = _b.getCurrentImage, setFullScreen = _b.setFullScreen, onClose = _b.onClose;
    var toggleFullScreenButton = useRef(null);
    var closeFullScreen = function () {
        setFullScreen(false);
    };
    var openFullScreen = function () {
        setFullScreen(true);
    };
    useEffect(function () {
        if (toggleFullScreenButton.current) {
            toggleFullScreenButton.current.focus();
        }
    }, [fullScreen]);
    var currentImage = getCurrentImage();
    var canDownload = (_a = currentImage === null || currentImage === void 0 ? void 0 : currentImage.canDownload) !== null && _a !== void 0 ? _a : true;
    var filename = (currentImage === null || currentImage === void 0 ? void 0 : currentImage.name) || '';
    var description = singleSlide
        ? ''
        : "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 " + (currentSlideIndex + 1) + " \u0438\u0437 " + images.length;
    var meta = getCurrentImageMeta();
    var showFullScreenButton = !isSmallImage(meta) && !(meta === null || meta === void 0 ? void 0 : meta.broken);
    var showDownloadButton = !(meta === null || meta === void 0 ? void 0 : meta.broken) && canDownload;
    var renderToggleFullScreenButton = function () {
        return fullScreen ? (React.createElement(ExitFullscreen, { onClick: closeFullScreen, buttonRef: toggleFullScreenButton, dataTestId: TestIds.EXIT_FULLSCREEN_BUTTON })) : (React.createElement(Fullscreen, { onClick: openFullScreen, buttonRef: toggleFullScreenButton, dataTestId: TestIds.FULLSCREEN_BUTTON }));
    };
    return (React.createElement("div", { className: styles.header },
        React.createElement(HeaderInfoBlock, { filename: filename, description: description }),
        React.createElement("div", { className: styles.buttons },
            showFullScreenButton && renderToggleFullScreenButton(),
            showDownloadButton && (React.createElement(Download, { href: currentImage === null || currentImage === void 0 ? void 0 : currentImage.src, download: currentImage === null || currentImage === void 0 ? void 0 : currentImage.name, dataTestId: TestIds.DOWNLOAD_BUTTON })),
            React.createElement(Exit, { onClick: onClose, dataTestId: TestIds.CLOSE_BUTTON }))));
};

export { Header };
