Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var cn = require('classnames');
var hooks = require('@alfalab/hooks');
var context = require('../../context.js');
var utils_utils = require('../../utils/utils.js');
var utils_constants = require('../../utils/constants.js');
require('../../../../typography/cssm');
var tslib_es6 = require('../../tslib.es6-ce870b46.js');
var SwiperCore = require('swiper');
var react = require('swiper/react');
var elementClosest = require('element-closest');
require('swiper/swiper.min.css');
var ChevronBackHeavyMIcon = require('@alfalab/icons-glyph/ChevronBackHeavyMIcon');
var ChevronForwardHeavyMIcon = require('@alfalab/icons-glyph/ChevronForwardHeavyMIcon');
var styles = require('./index.module.css');
var components_imageViewer_slide = require('./slide.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);
var SwiperCore__default = /*#__PURE__*/_interopDefaultLegacy(SwiperCore);
var elementClosest__default = /*#__PURE__*/_interopDefaultLegacy(elementClosest);
var styles__default = /*#__PURE__*/_interopDefaultLegacy(styles);

SwiperCore__default['default'].use([SwiperCore.EffectFade, SwiperCore.A11y, SwiperCore.Controller]);
var ImageViewer = function () {
    var _a, _b, _c;
    var _d = React.useContext(context.GalleryContext), singleSlide = _d.singleSlide, images = _d.images, imagesMeta = _d.imagesMeta, fullScreen = _d.fullScreen, currentSlideIndex = _d.currentSlideIndex, initialSlide = _d.initialSlide, onClose = _d.onClose, getCurrentImage = _d.getCurrentImage, setImageMeta = _d.setImageMeta, setCurrentSlideIndex = _d.setCurrentSlideIndex, getSwiper = _d.getSwiper, setSwiper = _d.setSwiper, slidePrev = _d.slidePrev, slideNext = _d.slideNext;
    var leftArrowRef = React.useRef(null);
    var rightArrowRef = React.useRef(null);
    var leftArrowFocused = hooks.useFocus(leftArrowRef, 'keyboard')[0];
    var rightArrowFocused = hooks.useFocus(rightArrowRef, 'keyboard')[0];
    var swiper = getSwiper();
    var handleSlideChange = React.useCallback(function () {
        var _a;
        setCurrentSlideIndex((_a = swiper === null || swiper === void 0 ? void 0 : swiper.activeIndex) !== null && _a !== void 0 ? _a : initialSlide);
    }, [setCurrentSlideIndex, swiper, initialSlide]);
    var handlePrevClick = function () {
        slidePrev();
    };
    var handleNextClick = function () {
        slideNext();
    };
    var handleArrowLeftKeyDown = function (event) {
        if (event.key === 'Enter') {
            slidePrev();
        }
    };
    var handleArrowRightKeyDown = function (event) {
        if (event.key === 'Enter') {
            slideNext();
        }
    };
    var handleLoad = function (event, index) {
        var target = event.currentTarget;
        var naturalWidth = target.naturalWidth, naturalHeight = target.naturalHeight;
        setImageMeta({ width: naturalWidth, height: naturalHeight }, index);
    };
    var handleLoadError = function (index) {
        setImageMeta({ width: 0, height: 0, broken: true }, index);
    };
    var handleWrapperClick = React.useCallback(function (event) {
        var _a, _b;
        var eventTarget = event.target;
        var isArrow = ((_a = leftArrowRef.current) === null || _a === void 0 ? void 0 : _a.contains(eventTarget)) || ((_b = rightArrowRef.current) === null || _b === void 0 ? void 0 : _b.contains(eventTarget));
        var isPlaceholder = Boolean(eventTarget.closest("." + styles__default['default'].placeholder));
        var isImg = eventTarget.tagName === 'IMG';
        if (!isImg && !isPlaceholder && !isArrow) {
            onClose();
        }
    }, [onClose]);
    React.useEffect(function () {
        elementClosest__default['default'](window);
    }, []);
    var swiperProps = React.useMemo(function () {
        var _a;
        return ({
            slidesPerView: 1,
            effect: 'fade',
            fadeEffect: {
                crossFade: true,
            },
            className: cn__default['default'](styles__default['default'].swiper, (_a = {}, _a[styles__default['default'].hidden] = fullScreen, _a)),
            controller: { control: swiper },
            a11y: {
                slideRole: 'img',
            },
            initialSlide: initialSlide,
            simulateTouch: false,
            onSwiper: setSwiper,
            onSlideChange: handleSlideChange,
        });
    }, [swiper, fullScreen, initialSlide, handleSlideChange, setSwiper]);
    var showControls = !singleSlide && !fullScreen;
    var swiperWidth = (swiper === null || swiper === void 0 ? void 0 : swiper.width) || 1;
    var swiperHeight = (swiper === null || swiper === void 0 ? void 0 : swiper.height) || 1;
    var swiperAspectRatio = swiperWidth / swiperHeight;
    var currentImage = getCurrentImage();
    return (
    /* eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */
    React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].component, (_a = {}, _a[styles__default['default'].singleSlide] = singleSlide, _a)), onClick: handleWrapperClick },
        showControls && (React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].arrow, (_b = {},
                _b[styles__default['default'].focused] = leftArrowFocused,
                _b)), onClick: handlePrevClick, role: 'button', onKeyDown: handleArrowLeftKeyDown, tabIndex: 0, ref: leftArrowRef, "aria-label": '\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0435\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435', "data-test-id": utils_constants.TestIds.PREV_SLIDE_BUTTON },
            React__default['default'].createElement(ChevronBackHeavyMIcon.ChevronBackHeavyMIcon, null))),
        fullScreen && (React__default['default'].createElement("img", { src: currentImage === null || currentImage === void 0 ? void 0 : currentImage.src, alt: currentImage ? utils_utils.getImageAlt(currentImage, currentSlideIndex) : '', className: styles__default['default'].fullScreenImage })),
        React__default['default'].createElement(react.Swiper, tslib_es6.__assign({}, swiperProps), images.map(function (image, index) {
            var meta = imagesMeta[index];
            var imageWidth = (meta === null || meta === void 0 ? void 0 : meta.width) || 1;
            var imageHeight = (meta === null || meta === void 0 ? void 0 : meta.height) || 1;
            var imageAspectRatio = imageWidth / imageHeight;
            var slideVisible = index === currentSlideIndex;
            return (React__default['default'].createElement(react.SwiperSlide, { key: utils_utils.getImageKey(image, index), style: {
                    pointerEvents: slideVisible ? 'auto' : 'none',
                    transitionProperty: 'opacity',
                } }, function (_a) {
                var isActive = _a.isActive;
                return (React__default['default'].createElement(components_imageViewer_slide.Slide, { isActive: isActive, swiperAspectRatio: swiperAspectRatio, image: image, swiperHeight: swiperHeight, meta: meta, index: index, imageAspectRatio: imageAspectRatio, slideVisible: slideVisible, handleLoad: handleLoad, handleLoadError: handleLoadError }));
            }));
        })),
        showControls && (React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].arrow, (_c = {},
                _c[styles__default['default'].focused] = rightArrowFocused,
                _c)), onClick: handleNextClick, role: 'button', onKeyDown: handleArrowRightKeyDown, tabIndex: 0, ref: rightArrowRef, "aria-label": '\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435', "data-test-id": utils_constants.TestIds.NEXT_SLIDE_BUTTON },
            React__default['default'].createElement(ChevronForwardHeavyMIcon.ChevronForwardHeavyMIcon, null)))));
};

exports.ImageViewer = ImageViewer;
