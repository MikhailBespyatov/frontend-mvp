Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var context = require('../../context.js');
require('../../utils/split-filename.js');
var utils_utils = require('../../utils/utils.js');
var utils_constants = require('../../utils/constants.js');
require('../../../typography');
var components_headerInfoBlock_Component = require('../header-info-block/Component.js');
require('../../tslib.es6-d3690215.js');
require('../../../icon-button');
require('../../../tooltip');
require('@alfalab/icons-glyph/PointerDownMIcon');
require('@alfalab/icons-glyph/ArrowsOutwardMIcon');
require('@alfalab/icons-glyph/ArrowsInwardMIcon');
require('@alfalab/icons-glyph/CrossMIcon');
var components_header_buttons = require('./buttons.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var styles = {"header":"gallery__header_zip5e","buttons":"gallery__buttons_zip5e"};
require('./index.css');

var Header = function () {
    var _a;
    var _b = React.useContext(context.GalleryContext), currentSlideIndex = _b.currentSlideIndex, singleSlide = _b.singleSlide, images = _b.images, fullScreen = _b.fullScreen, getCurrentImageMeta = _b.getCurrentImageMeta, getCurrentImage = _b.getCurrentImage, setFullScreen = _b.setFullScreen, onClose = _b.onClose;
    var toggleFullScreenButton = React.useRef(null);
    var closeFullScreen = function () {
        setFullScreen(false);
    };
    var openFullScreen = function () {
        setFullScreen(true);
    };
    React.useEffect(function () {
        if (toggleFullScreenButton.current) {
            toggleFullScreenButton.current.focus();
        }
    }, [fullScreen]);
    var currentImage = getCurrentImage();
    var canDownload = (_a = currentImage === null || currentImage === void 0 ? void 0 : currentImage.canDownload) !== null && _a !== void 0 ? _a : true;
    var filename = (currentImage === null || currentImage === void 0 ? void 0 : currentImage.name) || '';
    var description = singleSlide
        ? ''
        : "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 " + (currentSlideIndex + 1) + " \u0438\u0437 " + images.length;
    var meta = getCurrentImageMeta();
    var showFullScreenButton = !utils_utils.isSmallImage(meta) && !(meta === null || meta === void 0 ? void 0 : meta.broken);
    var showDownloadButton = !(meta === null || meta === void 0 ? void 0 : meta.broken) && canDownload;
    var renderToggleFullScreenButton = function () {
        return fullScreen ? (React__default['default'].createElement(components_header_buttons.ExitFullscreen, { onClick: closeFullScreen, buttonRef: toggleFullScreenButton, dataTestId: utils_constants.TestIds.EXIT_FULLSCREEN_BUTTON })) : (React__default['default'].createElement(components_header_buttons.Fullscreen, { onClick: openFullScreen, buttonRef: toggleFullScreenButton, dataTestId: utils_constants.TestIds.FULLSCREEN_BUTTON }));
    };
    return (React__default['default'].createElement("div", { className: styles.header },
        React__default['default'].createElement(components_headerInfoBlock_Component.HeaderInfoBlock, { filename: filename, description: description }),
        React__default['default'].createElement("div", { className: styles.buttons },
            showFullScreenButton && renderToggleFullScreenButton(),
            showDownloadButton && (React__default['default'].createElement(components_header_buttons.Download, { href: currentImage === null || currentImage === void 0 ? void 0 : currentImage.src, download: currentImage === null || currentImage === void 0 ? void 0 : currentImage.name, dataTestId: utils_constants.TestIds.DOWNLOAD_BUTTON })),
            React__default['default'].createElement(components_header_buttons.Exit, { onClick: onClose, dataTestId: utils_constants.TestIds.CLOSE_BUTTON }))));
};

exports.Header = Header;
