Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('classnames');
require('@alfalab/hooks');
var context = require('../../context.js');
var components_imagePreview_Component = require('../image-preview/Component.js');
var utils_utils = require('../../utils/utils.js');
var utils_constants = require('../../utils/constants.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var styles = {"component":"gallery__component_1joet","preview":"gallery__preview_1joet"};
require('./index.css');

var MIN_SCROLL_STEP = 24;
var NavigationBar = function () {
    var containerRef = React.useRef(null);
    var _a = React.useContext(context.GalleryContext), images = _a.images, currentSlideIndex = _a.currentSlideIndex, setCurrentSlideIndex = _a.setCurrentSlideIndex, getSwiper = _a.getSwiper;
    var swiper = getSwiper();
    var handlePreviewSelect = function (index) {
        setCurrentSlideIndex(index);
        if (swiper) {
            swiper.slideTo(index);
        }
    };
    var scroll = React.useCallback(function (scrollValue) {
        if (containerRef.current) {
            containerRef.current.scroll({
                top: 0,
                left: containerRef.current.scrollLeft + scrollValue,
                behavior: 'smooth',
            });
        }
    }, []);
    var handlePreviewPosition = React.useCallback(function (preview, containerWidth) {
        var _a = preview.getBoundingClientRect(), right = _a.right, left = _a.left;
        if (right > containerWidth) {
            var scrollValue = right - containerWidth + MIN_SCROLL_STEP;
            scroll(scrollValue);
        }
        else if (left < 0) {
            var scrollValue = left - MIN_SCROLL_STEP;
            scroll(scrollValue);
        }
    }, [scroll]);
    var handleKeyDown = function (event) {
        if (['ArrowLeft', 'ArrowRight'].includes(event.key)) {
            event.preventDefault();
        }
    };
    React.useEffect(function () {
        if (containerRef.current) {
            var containerWidth = containerRef.current.getBoundingClientRect().width;
            var activePreview = containerRef.current.children[currentSlideIndex];
            if (activePreview) {
                handlePreviewPosition(activePreview, containerWidth);
            }
        }
    }, [currentSlideIndex, handlePreviewPosition, scroll]);
    return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    React__default['default'].createElement("div", { className: styles.component, ref: containerRef, onKeyDown: handleKeyDown, "data-test-id": utils_constants.TestIds.NAVIGATION_BAR }, images.map(function (image, index) {
        var active = index === currentSlideIndex;
        return (React__default['default'].createElement(components_imagePreview_Component.ImagePreview, { key: utils_utils.getImageKey(image, index), image: image, active: active, index: index, onSelect: handlePreviewSelect, className: styles.preview }));
    })));
};

exports.NavigationBar = NavigationBar;
