Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var coreComponentsBaseModal = require('../base-modal');
require('classnames');
require('@alfalab/hooks');
var context = require('./context.js');
require('./components/image-preview/Component.js');
var components_navigationBar_Component = require('./components/navigation-bar/Component.js');
require('./utils/split-filename.js');
require('./utils/utils.js');
require('./utils/constants.js');
require('../typography');
require('./components/header-info-block/Component.js');
require('./tslib.es6-d3690215.js');
require('../icon-button');
require('../tooltip');
require('@alfalab/icons-glyph/PointerDownMIcon');
require('@alfalab/icons-glyph/ArrowsOutwardMIcon');
require('@alfalab/icons-glyph/ArrowsInwardMIcon');
require('@alfalab/icons-glyph/CrossMIcon');
require('./components/header/buttons.js');
var components_header_Component = require('./components/header/Component.js');
require('swiper');
require('swiper/react');
require('element-closest');
require('swiper/swiper.min.css');
require('@alfalab/icons-glyph/ChevronBackHeavyMIcon');
require('@alfalab/icons-glyph/ChevronForwardHeavyMIcon');
require('./slide-a9c3edf5.js');
var components_imageViewer_component = require('./components/image-viewer/component.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var styles = {"container":"gallery__container_7c9k6","modal":"gallery__modal_7c9k6"};
require('./index.css');

var Backdrop = function () { return null; };
var Gallery = function (_a) {
    var open = _a.open, images = _a.images, _b = _a.initialSlide, initialSlide = _b === void 0 ? 0 : _b, _c = _a.loop, loop = _c === void 0 ? true : _c, onClose = _a.onClose;
    var _d = React.useState(initialSlide), currentSlideIndex = _d[0], setCurrentSlideIndex = _d[1];
    var _e = React.useState(), swiper = _e[0], setSwiper = _e[1];
    var _f = React.useState([]), imagesMeta = _f[0], setImagesMeta = _f[1];
    var _g = React.useState(false), fullScreen = _g[0], setFullScreen = _g[1];
    var slideTo = React.useCallback(function (index) {
        if (images[index]) {
            setCurrentSlideIndex(index);
            if (swiper) {
                swiper.slideTo(index);
            }
        }
    }, [images, swiper]);
    var slideNext = React.useCallback(function () {
        var lastIndex = images.length - 1;
        var nextIndex = currentSlideIndex + 1;
        if (nextIndex >= images.length) {
            nextIndex = loop ? 0 : lastIndex;
        }
        slideTo(nextIndex);
    }, [images.length, loop, currentSlideIndex, slideTo]);
    var slidePrev = React.useCallback(function () {
        var lastIndex = images.length - 1;
        var nextIndex = currentSlideIndex - 1;
        if (nextIndex < 0) {
            nextIndex = loop ? lastIndex : 0;
        }
        slideTo(nextIndex);
    }, [images.length, loop, currentSlideIndex, slideTo]);
    var setImageMeta = React.useCallback(function (meta, index) {
        imagesMeta[index] = meta;
        setImagesMeta(imagesMeta.slice());
    }, [imagesMeta]);
    var handleClose = React.useCallback(function () {
        onClose();
        setCurrentSlideIndex(initialSlide);
        setFullScreen(false);
    }, [initialSlide, onClose]);
    var handleEscapeKeyDown = function () {
        if (fullScreen) {
            setFullScreen(false);
        }
        else {
            handleClose();
        }
    };
    var handleKeyDown = React.useCallback(function (event) {
        if (!open || fullScreen) {
            return;
        }
        switch (event.key) {
            case 'ArrowLeft':
                slidePrev();
                break;
            case 'ArrowRight':
                slideNext();
                break;
        }
    }, [fullScreen, open, slideNext, slidePrev]);
    React.useEffect(function () {
        document.addEventListener('keydown', handleKeyDown);
        return function () {
            document.removeEventListener('keydown', handleKeyDown);
        };
    }, [handleKeyDown]);
    var singleSlide = images.length === 1;
    var showNavigationBar = !singleSlide && !fullScreen;
    var galleryContext = {
        singleSlide: singleSlide,
        currentSlideIndex: currentSlideIndex,
        images: images,
        imagesMeta: imagesMeta,
        fullScreen: fullScreen,
        initialSlide: initialSlide,
        setFullScreen: setFullScreen,
        setImageMeta: setImageMeta,
        slideNext: slideNext,
        slidePrev: slidePrev,
        slideTo: slideTo,
        getSwiper: function () { return swiper; },
        setSwiper: setSwiper,
        onClose: handleClose,
        setCurrentSlideIndex: setCurrentSlideIndex,
        getCurrentImage: function () { return images[currentSlideIndex]; },
        getCurrentImageMeta: function () { return imagesMeta[currentSlideIndex]; },
    };
    return (React__default['default'].createElement(context.GalleryContext.Provider, { value: galleryContext },
        React__default['default'].createElement(coreComponentsBaseModal.BaseModal, { open: open, className: styles.modal, onEscapeKeyDown: handleEscapeKeyDown, Backdrop: Backdrop },
            React__default['default'].createElement("div", { className: styles.container },
                React__default['default'].createElement(components_header_Component.Header, null),
                React__default['default'].createElement(components_imageViewer_component.ImageViewer, null),
                showNavigationBar && React__default['default'].createElement(components_navigationBar_Component.NavigationBar, null)))));
};

exports.Gallery = Gallery;
