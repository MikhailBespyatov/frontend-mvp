import React, { forwardRef, useRef, useState, useEffect, useCallback } from 'react';
import cn from 'classnames';
import TextareaAutosize from 'react-textarea-autosize';
import mergeRefs from 'react-merge-refs';
import { useFocus } from '@alfalab/hooks';
import { FormControl } from '../../form-control/esm';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var __assign = function () {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

var styles = {"textarea":"textarea__textarea_z2kz2","s":"textarea__s_z2kz2","m":"textarea__m_z2kz2","l":"textarea__l_z2kz2","xl":"textarea__xl_z2kz2","hasLabel":"textarea__hasLabel_z2kz2","resizeVertical":"textarea__resizeVertical_z2kz2","focusVisible":"textarea__focusVisible_z2kz2","filled":"textarea__filled_z2kz2"};
require('./index.css');

var defaultColors = {"input":"textarea__input_225lz","hasLabel":"textarea__hasLabel_225lz","clearIcon":"textarea__clearIcon_225lz","errorIcon":"textarea__errorIcon_225lz","successIcon":"textarea__successIcon_225lz","error":"textarea__error_225lz","textarea":"textarea__textarea_225lz"};
require('./default.css');

var invertedColors = {"input":"textarea__input_14pa0","hasLabel":"textarea__hasLabel_14pa0","clearIcon":"textarea__clearIcon_14pa0","errorIcon":"textarea__errorIcon_14pa0","successIcon":"textarea__successIcon_14pa0","error":"textarea__error_14pa0","textarea":"textarea__textarea_14pa0"};
require('./inverted.css');

var colorStyles = {
    default: defaultColors,
    inverted: invertedColors,
};
var getDefaultCounterText = function (textLength, maxLength) {
    if (maxLength === void 0) { maxLength = 0; }
    return textLength + "/" + maxLength + " \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432";
};
var Textarea = forwardRef(function (_a, ref) {
    var _b, _c;
    var _d = _a.autoComplete, autoComplete = _d === void 0 ? 'on' : _d, _e = _a.autosize, autosize = _e === void 0 ? true : _e, _f = _a.size, size = _f === void 0 ? 's' : _f, _g = _a.colors, colors = _g === void 0 ? 'default' : _g, _h = _a.block, block = _h === void 0 ? false : _h, bottomAddons = _a.bottomAddons, fieldClassName = _a.fieldClassName, className = _a.className, dataTestId = _a.dataTestId, disabled = _a.disabled, error = _a.error, hint = _a.hint, textareaClassName = _a.textareaClassName, label = _a.label, leftAddons = _a.leftAddons, onFocus = _a.onFocus, onBlur = _a.onBlur, onChange = _a.onChange, onHeightChange = _a.onHeightChange, rightAddons = _a.rightAddons, maxRows = _a.maxRows, minRows = _a.minRows, maxHeight = _a.maxHeight, _j = _a.resize, resize = _j === void 0 ? 'none' : _j, value = _a.value, defaultValue = _a.defaultValue, _k = _a.rows, rows = _k === void 0 ? autosize ? 1 : 3 : _k, _l = _a.showCounter, showCounter = _l === void 0 ? false : _l, _m = _a.getCounterText, getCounterText = _m === void 0 ? getDefaultCounterText : _m, maxLength = _a.maxLength, restProps = __rest(_a, ["autoComplete", "autosize", "size", "colors", "block", "bottomAddons", "fieldClassName", "className", "dataTestId", "disabled", "error", "hint", "textareaClassName", "label", "leftAddons", "onFocus", "onBlur", "onChange", "onHeightChange", "rightAddons", "maxRows", "minRows", "maxHeight", "resize", "value", "defaultValue", "rows", "showCounter", "getCounterText", "maxLength"]);
    var uncontrolled = value === undefined;
    var textareaRef = useRef(null);
    var _o = useState(false), focused = _o[0], setFocused = _o[1];
    var _p = useState(defaultValue || ''), stateValue = _p[0], setStateValue = _p[1];
    var focusVisible = useFocus(textareaRef, 'keyboard')[0];
    var filled = Boolean(uncontrolled ? stateValue : value);
    // Хак, так как react-textarea-autosize перестал поддерживать maxHeight
    useEffect(function () {
        if (autosize && maxHeight && textareaRef.current && textareaRef.current.style) {
            textareaRef.current.style.maxHeight = maxHeight + "px";
        }
    }, [textareaRef, autosize, maxHeight]);
    var handleTextareaFocus = useCallback(function (event) {
        setFocused(true);
        if (onFocus) {
            onFocus(event);
        }
    }, [onFocus]);
    var handleTextareaBlur = useCallback(function (event) {
        setFocused(false);
        if (onBlur) {
            onBlur(event);
        }
    }, [onBlur]);
    var handleTextareaChange = useCallback(function (event) {
        if (onChange) {
            onChange(event, { value: event.target.value });
        }
        if (uncontrolled) {
            setStateValue(event.target.value);
        }
    }, [onChange, uncontrolled]);
    var getValueLength = function () {
        if (uncontrolled) {
            return stateValue.length;
        }
        return value.length;
    };
    var getHint = function () {
        if (showCounter) {
            return getCounterText(getValueLength(), maxLength);
        }
        return hint;
    };
    var textareaProps = __assign(__assign({}, restProps), { className: cn(styles.textarea, colorStyles[colors].textarea, styles[size], (_b = {},
            _b[styles.hasLabel] = label,
            _b[colorStyles[colors].hasLabel] = label,
            _b[styles.filled] = filled,
            _b[styles.resizeVertical] = resize === 'vertical',
            _b), textareaClassName), autoComplete: autoComplete,
        disabled: disabled, onBlur: handleTextareaBlur, onFocus: handleTextareaFocus, onChange: handleTextareaChange, value: uncontrolled ? stateValue : value, rows: rows, ref: mergeRefs([ref, textareaRef]), 'data-test-id': dataTestId, maxLength: maxLength });
    return (React.createElement(FormControl, { className: cn(className), fieldClassName: cn(fieldClassName, (_c = {},
            _c[styles.focusVisible] = focusVisible,
            _c)), size: size, colors: colors, block: block, disabled: disabled, filled: filled || focused, focused: focused, error: error, label: label, hint: getHint(), leftAddons: leftAddons, rightAddons: rightAddons, bottomAddons: bottomAddons }, autosize ? (React.createElement(TextareaAutosize, __assign({}, textareaProps, { maxRows: maxRows, minRows: minRows, onHeightChange: onHeightChange }))) : (React.createElement("textarea", __assign({}, textareaProps, { style: { maxHeight: maxHeight } })))));
});
/**
 * Для отображения в сторибуке
 */
Textarea.defaultProps = {
    autoComplete: 'on',
    autosize: true,
    size: 's',
    block: false,
    resize: 'none',
};

export { Textarea, getDefaultCounterText };
