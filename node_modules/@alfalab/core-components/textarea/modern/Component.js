import React, { forwardRef, useRef, useState, useEffect, useCallback } from 'react';
import cn from 'classnames';
import TextareaAutosize from 'react-textarea-autosize';
import mergeRefs from 'react-merge-refs';
import { useFocus } from '@alfalab/hooks';
import { FormControl } from '../../form-control/modern';

var styles = {"textarea":"textarea__textarea_z2kz2","s":"textarea__s_z2kz2","m":"textarea__m_z2kz2","l":"textarea__l_z2kz2","xl":"textarea__xl_z2kz2","hasLabel":"textarea__hasLabel_z2kz2","resizeVertical":"textarea__resizeVertical_z2kz2","focusVisible":"textarea__focusVisible_z2kz2","filled":"textarea__filled_z2kz2"};
require('./index.css');

var defaultColors = {"input":"textarea__input_225lz","hasLabel":"textarea__hasLabel_225lz","clearIcon":"textarea__clearIcon_225lz","errorIcon":"textarea__errorIcon_225lz","successIcon":"textarea__successIcon_225lz","error":"textarea__error_225lz","textarea":"textarea__textarea_225lz"};
require('./default.css');

var invertedColors = {"input":"textarea__input_14pa0","hasLabel":"textarea__hasLabel_14pa0","clearIcon":"textarea__clearIcon_14pa0","errorIcon":"textarea__errorIcon_14pa0","successIcon":"textarea__successIcon_14pa0","error":"textarea__error_14pa0","textarea":"textarea__textarea_14pa0"};
require('./inverted.css');

const colorStyles = {
    default: defaultColors,
    inverted: invertedColors,
};
const getDefaultCounterText = (textLength, maxLength = 0) => `${textLength}/${maxLength} символов`;
const Textarea = forwardRef(({ autoComplete = 'on', autosize = true, size = 's', colors = 'default', block = false, bottomAddons, fieldClassName, className, dataTestId, disabled, error, hint, textareaClassName, label, leftAddons, onFocus, onBlur, onChange, onHeightChange, rightAddons, maxRows, minRows, maxHeight, resize = 'none', value, defaultValue, rows = autosize ? 1 : 3, showCounter = false, getCounterText = getDefaultCounterText, maxLength, ...restProps }, ref) => {
    const uncontrolled = value === undefined;
    const textareaRef = useRef(null);
    const [focused, setFocused] = useState(false);
    const [stateValue, setStateValue] = useState(defaultValue || '');
    const [focusVisible] = useFocus(textareaRef, 'keyboard');
    const filled = Boolean(uncontrolled ? stateValue : value);
    // Хак, так как react-textarea-autosize перестал поддерживать maxHeight
    useEffect(() => {
        if (autosize && maxHeight && textareaRef.current && textareaRef.current.style) {
            textareaRef.current.style.maxHeight = `${maxHeight}px`;
        }
    }, [textareaRef, autosize, maxHeight]);
    const handleTextareaFocus = useCallback((event) => {
        setFocused(true);
        if (onFocus) {
            onFocus(event);
        }
    }, [onFocus]);
    const handleTextareaBlur = useCallback((event) => {
        setFocused(false);
        if (onBlur) {
            onBlur(event);
        }
    }, [onBlur]);
    const handleTextareaChange = useCallback((event) => {
        if (onChange) {
            onChange(event, { value: event.target.value });
        }
        if (uncontrolled) {
            setStateValue(event.target.value);
        }
    }, [onChange, uncontrolled]);
    const getValueLength = () => {
        if (uncontrolled) {
            return stateValue.length;
        }
        return value.length;
    };
    const getHint = () => {
        if (showCounter) {
            return getCounterText(getValueLength(), maxLength);
        }
        return hint;
    };
    const textareaProps = {
        ...restProps,
        className: cn(styles.textarea, colorStyles[colors].textarea, styles[size], {
            [styles.hasLabel]: label,
            [colorStyles[colors].hasLabel]: label,
            [styles.filled]: filled,
            [styles.resizeVertical]: resize === 'vertical',
        }, textareaClassName),
        autoComplete,
        disabled,
        onBlur: handleTextareaBlur,
        onFocus: handleTextareaFocus,
        onChange: handleTextareaChange,
        value: uncontrolled ? stateValue : value,
        rows,
        ref: mergeRefs([ref, textareaRef]),
        'data-test-id': dataTestId,
        maxLength,
    };
    return (React.createElement(FormControl, { className: cn(className), fieldClassName: cn(fieldClassName, {
            [styles.focusVisible]: focusVisible,
        }), size: size, colors: colors, block: block, disabled: disabled, filled: filled || focused, focused: focused, error: error, label: label, hint: getHint(), leftAddons: leftAddons, rightAddons: rightAddons, bottomAddons: bottomAddons }, autosize ? (React.createElement(TextareaAutosize, Object.assign({}, textareaProps, { maxRows: maxRows, minRows: minRows, onHeightChange: onHeightChange }))) : (React.createElement("textarea", Object.assign({}, textareaProps, { style: { maxHeight } })))));
});
/**
 * Для отображения в сторибуке
 */
Textarea.defaultProps = {
    autoComplete: 'on',
    autosize: true,
    size: 's',
    block: false,
    resize: 'none',
};

export { Textarea, getDefaultCounterText };
