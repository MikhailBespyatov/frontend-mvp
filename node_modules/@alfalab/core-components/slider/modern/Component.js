import React, { forwardRef, useRef, useCallback } from 'react';
import cn from 'classnames';
import mergeRefs from 'react-merge-refs';
import { useFocus } from '@alfalab/hooks';

var styles = {"component":"slider__component_1gibz","progress":"slider__progress_1gibz","rangeWrapper":"slider__rangeWrapper_1gibz","range":"slider__range_1gibz","focused":"slider__focused_1gibz"};
require('./index.css');

const Slider = forwardRef(({ min = 0, max = 100, step = 1, value = 0, steps, className, onChange, dataTestId, ...restProps }, ref) => {
    const inputRef = useRef(null);
    const [focused] = useFocus(inputRef, 'keyboard');
    const range = max - min;
    const dividedWithoutRemainder = range % step === 0;
    const validValue = Math.max(min, Math.min(value, max));
    const rangeProps = {
        className: cn(styles.range, { [styles.focused]: focused }),
        type: 'range',
        min,
        max,
        value: validValue,
        step: dividedWithoutRemainder ? step : undefined,
    };
    const progressProps = {
        className: styles.progress,
        max: range,
        value: validValue - min,
    };
    const handleInputChange = useCallback((event) => {
        if (onChange) {
            onChange(event, { value: +event.target.value });
        }
    }, [onChange]);
    return (React.createElement("div", { className: cn(styles.component, className), "data-test-id": dataTestId },
        React.createElement("div", { className: styles.rangeWrapper },
            React.createElement("input", Object.assign({}, rangeProps, restProps, { ref: mergeRefs([ref, inputRef]), onChange: handleInputChange })),
            steps),
        React.createElement("progress", Object.assign({}, progressProps))));
});
/**
 * Для отображения в сторибуке
 */
Slider.defaultProps = {
    min: 0,
    max: 100,
    step: 1,
    value: 0,
};

export { Slider };
