import React, { useState, useRef, useCallback } from 'react';
import cn from 'classnames';
import { preventAndStopEvent } from './utils.js';
import '@alfalab/icons-glyph';
import { Overlay } from './components/overlay/Component.js';

var styles = {"component":"dropzone__component_rfsgq","disabled":"dropzone__disabled_rfsgq","block":"dropzone__block_rfsgq","dragOver":"dropzone__dragOver_rfsgq","error":"dropzone__error_rfsgq"};
require('./index.css');

var Dropzone = function (_a) {
    var _b;
    var className = _a.className, children = _a.children, _c = _a.text, text = _c === void 0 ? 'Перетащите файлы' : _c, _d = _a.error, error = _d === void 0 ? false : _d, overlayVisible = _a.overlayVisible, _e = _a.Overlay, Overlay$1 = _e === void 0 ? Overlay : _e, onDragEnter = _a.onDragEnter, onDragLeave = _a.onDragLeave, onDragOver = _a.onDragOver, onDrop = _a.onDrop, _f = _a.block, block = _f === void 0 ? false : _f, disabled = _a.disabled, dataTestId = _a.dataTestId;
    var _g = useState(false), dragOver = _g[0], setDragOver = _g[1];
    /**
     * При ховере дочерних элементов срабатывает dragLeave, из-за чего пропадает оверлей
     * https://stackoverflow.com/a/21002544
     */
    var dragCounter = useRef(0);
    var handleDragOver = useCallback(function (event) {
        preventAndStopEvent(event);
        if (disabled)
            return;
        if (onDragOver) {
            onDragOver(event);
        }
    }, [onDragOver, disabled]);
    var handleDragEnter = useCallback(function (event) {
        preventAndStopEvent(event);
        if (disabled)
            return;
        dragCounter.current += 1;
        setDragOver(true);
        if (onDragEnter) {
            onDragEnter(event);
        }
    }, [disabled, onDragEnter]);
    var handleDragLeave = useCallback(function (event) {
        preventAndStopEvent(event);
        if (disabled)
            return;
        dragCounter.current -= 1;
        if (dragCounter.current > 0)
            return;
        setDragOver(false);
        if (onDragLeave) {
            onDragLeave(event);
        }
    }, [disabled, onDragLeave]);
    var handleDrop = useCallback(function (event) {
        preventAndStopEvent(event);
        if (disabled)
            return;
        setDragOver(false);
        dragCounter.current = 0;
        if (event.dataTransfer.files && event.dataTransfer.files.length > 0) {
            if (onDrop) {
                onDrop(event.dataTransfer.files);
            }
            event.dataTransfer.clearData();
        }
    }, [disabled, onDrop]);
    return (React.createElement("div", { className: cn(styles.component, className, (_b = {},
            _b[styles.dragOver] = dragOver,
            _b[styles.error] = error,
            _b[styles.block] = block,
            _b[styles.disabled] = disabled,
            _b)), "data-test-id": dataTestId, onDragEnter: handleDragEnter, onDragLeave: handleDragLeave, onDragOver: handleDragOver, onDrop: handleDrop },
        children,
        Overlay$1 && React.createElement(Overlay$1, { text: text, visible: Boolean(dragOver || overlayVisible) })));
};

export { Dropzone };
