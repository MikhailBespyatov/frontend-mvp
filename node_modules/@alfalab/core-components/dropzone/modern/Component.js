import React, { useState, useRef, useCallback } from 'react';
import cn from 'classnames';
import '@alfalab/icons-glyph';
import { preventAndStopEvent } from './utils.js';
import { Overlay } from './components/overlay/Component.js';

var styles = {"component":"dropzone__component_rfsgq","disabled":"dropzone__disabled_rfsgq","block":"dropzone__block_rfsgq","dragOver":"dropzone__dragOver_rfsgq","error":"dropzone__error_rfsgq"};
require('./index.css');

const Dropzone = ({ className, children, text = 'Перетащите файлы', error = false, overlayVisible, Overlay: Overlay$1 = Overlay, onDragEnter, onDragLeave, onDragOver, onDrop, block = false, disabled, dataTestId, }) => {
    const [dragOver, setDragOver] = useState(false);
    /**
     * При ховере дочерних элементов срабатывает dragLeave, из-за чего пропадает оверлей
     * https://stackoverflow.com/a/21002544
     */
    const dragCounter = useRef(0);
    const handleDragOver = useCallback((event) => {
        preventAndStopEvent(event);
        if (disabled)
            return;
        if (onDragOver) {
            onDragOver(event);
        }
    }, [onDragOver, disabled]);
    const handleDragEnter = useCallback((event) => {
        preventAndStopEvent(event);
        if (disabled)
            return;
        dragCounter.current += 1;
        setDragOver(true);
        if (onDragEnter) {
            onDragEnter(event);
        }
    }, [disabled, onDragEnter]);
    const handleDragLeave = useCallback((event) => {
        preventAndStopEvent(event);
        if (disabled)
            return;
        dragCounter.current -= 1;
        if (dragCounter.current > 0)
            return;
        setDragOver(false);
        if (onDragLeave) {
            onDragLeave(event);
        }
    }, [disabled, onDragLeave]);
    const handleDrop = useCallback((event) => {
        preventAndStopEvent(event);
        if (disabled)
            return;
        setDragOver(false);
        dragCounter.current = 0;
        if (event.dataTransfer.files && event.dataTransfer.files.length > 0) {
            if (onDrop) {
                onDrop(event.dataTransfer.files);
            }
            event.dataTransfer.clearData();
        }
    }, [disabled, onDrop]);
    return (React.createElement("div", { className: cn(styles.component, className, {
            [styles.dragOver]: dragOver,
            [styles.error]: error,
            [styles.block]: block,
            [styles.disabled]: disabled,
        }), "data-test-id": dataTestId, onDragEnter: handleDragEnter, onDragLeave: handleDragLeave, onDragOver: handleDragOver, onDrop: handleDrop },
        children,
        Overlay$1 && React.createElement(Overlay$1, { text: text, visible: Boolean(dragOver || overlayVisible) })));
};

export { Dropzone };
