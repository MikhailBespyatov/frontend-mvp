import React, { useState, useMemo, useCallback } from 'react';
import 'date-fns';
import { MaskedInput } from '../../masked-input/modern';
import { parseDateString, NATIVE_DATE_FORMAT, formatDate } from './utils/format.js';
import { createAutoCorrectedDatePipe, mask } from './utils/date-correction-pipe.js';
import { SUPPORTS_INPUT_TYPE_DATE } from './utils/native-supports.js';

var styles = {"nativeInput":"date-input__nativeInput_jfp14"};
require('./index.css');

const DateInput = React.forwardRef(({ maxYear, minYear, mobileMode = 'input', value, defaultValue, rightAddons, onChange, ...restProps }, ref) => {
    const uncontrolled = value === undefined;
    const shouldRenderNative = SUPPORTS_INPUT_TYPE_DATE && mobileMode === 'native';
    const [stateValue, setStateValue] = useState(defaultValue);
    const inputValue = uncontrolled ? stateValue : value;
    const pipe = useMemo(() => createAutoCorrectedDatePipe({
        maxYear,
        minYear,
    }), [maxYear, minYear]);
    const changeHandler = useCallback((event, newValue, newDate) => {
        if (uncontrolled) {
            setStateValue(newValue);
        }
        if (onChange) {
            onChange(event, { date: newDate, value: newValue });
        }
    }, [onChange, uncontrolled]);
    const handleChange = useCallback((event) => {
        const newValue = event.target.value;
        const newDate = parseDateString(newValue);
        changeHandler(event, newValue, newDate);
    }, [changeHandler]);
    const handleNativeInputChange = useCallback((event) => {
        const newDate = parseDateString(event.target.value, NATIVE_DATE_FORMAT);
        const newValue = event.target.value === '' ? '' : formatDate(newDate);
        changeHandler(event, newValue, newDate);
    }, [changeHandler]);
    return (React.createElement(MaskedInput, Object.assign({}, restProps, { ref: ref, mask: mask, keepCharPositions: true, defaultValue: defaultValue, value: inputValue, onBeforeDisplay: pipe, onChange: handleChange, rightAddons: React.createElement(React.Fragment, null,
            rightAddons,
            shouldRenderNative && (React.createElement("input", { type: 'date', ref: ref, defaultValue: defaultValue, onChange: handleNativeInputChange, className: styles.nativeInput }))) })));
});

export { DateInput };
