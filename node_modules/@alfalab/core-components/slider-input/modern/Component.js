import React, { forwardRef, useCallback, Fragment, isValidElement, cloneElement } from 'react';
import cn from 'classnames';
import { Slider } from '../../slider/modern';
import { Input } from '../../input/modern';

var styles = {"component":"slider-input__component_2h449","block":"slider-input__block_2h449","slider":"slider-input__slider_2h449","field":"slider-input__field_2h449","input":"slider-input__input_2h449","steps":"slider-input__steps_2h449","info":"slider-input__info_2h449","s":"slider-input__s_2h449","hasLabel":"slider-input__hasLabel_2h449","m":"slider-input__m_2h449","l":"slider-input__l_2h449","xl":"slider-input__xl_2h449","focused":"slider-input__focused_2h449","filled":"slider-input__filled_2h449"};
require('./index.css');

const SliderInput = forwardRef(({ className, inputClassName, sliderClassName, stepsClassName, focusedClassName, fieldClassName, value = '', min = 0, max = 100, step = 1, block, sliderValue = +value, steps = [], size = 's', label, info, disabled, readOnly, onChange, onInputChange, onSliderChange, rightAddons, Input: Input$1 = Input, customInputProps = {}, dataTestId, error, ...restProps }, ref) => {
    const getValidInputValue = useCallback((inputValue) => {
        const number = parseInt(inputValue, 10);
        return inputValue === '' || Number.isNaN(number) ? '' : Math.abs(number);
    }, []);
    const handleSliderChange = useCallback((event, payload) => {
        if (onChange)
            onChange(event, payload);
        if (onSliderChange)
            onSliderChange(event, payload);
    }, [onChange, onSliderChange]);
    const handleInputChange = useCallback((event, payload) => {
        if (onChange)
            onChange(event, { value: getValidInputValue(payload.value) });
        if (onInputChange)
            onInputChange(event, { value: getValidInputValue(payload.value) });
    }, [getValidInputValue, onChange, onInputChange]);
    return (React.createElement("div", { className: cn(styles.component, {
            [styles.block]: block,
            [styles.filled]: Boolean(value),
            [styles.hasLabel]: label,
            [styles.hasError]: Boolean(error),
        }, styles[size], className), "data-test-id": dataTestId },
        React.createElement(Input$1, Object.assign({}, restProps, customInputProps, { ref: ref, value: value.toString(), onChange: handleInputChange, block: true, size: size, label: label, disabled: disabled, readOnly: readOnly, className: cn(inputClassName, styles.input), focusedClassName: cn(focusedClassName, styles.focused), fieldClassName: cn(fieldClassName, styles.field), inputMode: 'numeric', pattern: '[0-9]*', error: error, bottomAddons: !disabled && (React.createElement(Slider, { min: min, max: max, step: step, onChange: handleSliderChange, ref: ref, value: Number.isNaN(sliderValue) ? 0 : sliderValue, disabled: disabled || readOnly, className: cn(styles.slider, sliderClassName) })), rightAddons: (info || rightAddons) && (React.createElement(Fragment, null,
                info && React.createElement("span", { className: styles.info }, info),
                rightAddons)) })),
        steps.length > 0 && !error && (React.createElement("div", { className: cn(styles.steps, stepsClassName) }, steps.map((stepLabel, i) => isValidElement(stepLabel) ? (cloneElement(stepLabel, { key: i })) : (
        // eslint-disable-next-line react/no-array-index-key
        React.createElement("span", { key: i }, stepLabel)))))));
});
/**
 * Для отображения в сторибуке
 */
SliderInput.defaultProps = {
    value: '',
    min: 0,
    max: 100,
    step: 1,
    steps: [],
    size: 's',
    Input: Input,
    customInputProps: {},
};

export { SliderInput };
