Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var cn = require('classnames');
var mergeRefs = require('react-merge-refs');
var resizeObserver = require('resize-observer');
var reactTransitionGroup = require('react-transition-group');
var FocusLock = require('react-focus-lock');
var coreComponentsPortal = require('../../portal/cssm');
var coreComponentsBackdrop = require('../../backdrop/cssm');
var coreComponentsStack = require('../../stack/cssm');
require('../../global-store/cssm');
var utils = require('./utils.js');
var styles = require('./index.module.css');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);
var mergeRefs__default = /*#__PURE__*/_interopDefaultLegacy(mergeRefs);
var FocusLock__default = /*#__PURE__*/_interopDefaultLegacy(FocusLock);
var styles__default = /*#__PURE__*/_interopDefaultLegacy(styles);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var __assign = function () {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var BaseModalContext = React__default['default'].createContext({
    hasFooter: false,
    hasHeader: false,
    hasScroll: false,
    headerHighlighted: false,
    footerHighlighted: false,
    contentRef: function () { return null; },
    setHasHeader: function () { return null; },
    setHasFooter: function () { return null; },
    onClose: function () { return null; },
});
var BaseModal = React.forwardRef(function (_a, ref) {
    var open = _a.open, container = _a.container, children = _a.children, _b = _a.scrollHandler, scrollHandler = _b === void 0 ? 'wrapper' : _b, _c = _a.Backdrop, Backdrop = _c === void 0 ? coreComponentsBackdrop.Backdrop : _c, _d = _a.backdropProps, backdropProps = _d === void 0 ? {} : _d, _e = _a.transitionProps, transitionProps = _e === void 0 ? {} : _e, disableBackdropClick = _a.disableBackdropClick, _f = _a.disableAutoFocus, disableAutoFocus = _f === void 0 ? false : _f, _g = _a.disableFocusLock, disableFocusLock = _g === void 0 ? false : _g, _h = _a.disableEscapeKeyDown, disableEscapeKeyDown = _h === void 0 ? false : _h, _j = _a.disableRestoreFocus, disableRestoreFocus = _j === void 0 ? false : _j, _k = _a.keepMounted, keepMounted = _k === void 0 ? false : _k, className = _a.className, contentClassName = _a.contentClassName, wrapperClassName = _a.wrapperClassName, onBackdropClick = _a.onBackdropClick, onClose = _a.onClose, onEscapeKeyDown = _a.onEscapeKeyDown, onMount = _a.onMount, onUnmount = _a.onUnmount, dataTestId = _a.dataTestId, _l = _a.zIndex, zIndex = _l === void 0 ? coreComponentsStack.stackingOrder.MODAL : _l;
    var _m = React.useState(!open), exited = _m[0], setExited = _m[1];
    var _o = React.useState(false), hasScroll = _o[0], setHasScroll = _o[1];
    var _p = React.useState(false), hasHeader = _p[0], setHasHeader = _p[1];
    var _q = React.useState(false), hasFooter = _q[0], setHasFooter = _q[1];
    var _r = React.useState(false), headerHighlighted = _r[0], setHeaderHighlighted = _r[1];
    var _s = React.useState(false), footerHighlighted = _s[0], setFooterHighlighted = _s[1];
    var componentRef = React.useRef(null);
    var wrapperRef = React.useRef(null);
    var scrollableNodeRef = React.useRef(null);
    var contentNodeRef = React.useRef(null);
    var restoreContainerStylesRef = React.useRef(null);
    var checkToHasScrollBar = function () {
        if (scrollableNodeRef.current) {
            var scrollExists = utils.hasScrollbar(scrollableNodeRef.current);
            setFooterHighlighted(scrollExists);
            setHasScroll(scrollExists);
        }
    };
    var shouldRender = keepMounted || open || !exited;
    var getContainer = React.useCallback(function () {
        return (container ? container() : document.body);
    }, [container]);
    var resizeObserver$1 = React.useMemo(function () { return new resizeObserver.ResizeObserver(checkToHasScrollBar); }, []);
    var addResizeHandle = React.useCallback(function () {
        if (scrollableNodeRef.current)
            resizeObserver$1.observe(scrollableNodeRef.current);
        if (contentNodeRef.current)
            resizeObserver$1.observe(contentNodeRef.current);
    }, [resizeObserver$1]);
    var removeResizeHandle = React.useCallback(function () {
        resizeObserver$1.disconnect();
    }, [resizeObserver$1]);
    var contentRef = React.useCallback(function (node) {
        if (node !== null) {
            contentNodeRef.current = node;
            resizeObserver$1.observe(node);
            checkToHasScrollBar();
        }
    }, [resizeObserver$1]);
    var handleScroll = React.useCallback(function () {
        if (!scrollableNodeRef.current || !componentRef.current)
            return;
        if (hasHeader) {
            setHeaderHighlighted(!utils.isScrolledToTop(scrollableNodeRef.current) &&
                componentRef.current.getBoundingClientRect().top <= 0);
        }
        if (hasFooter) {
            setFooterHighlighted(!utils.isScrolledToBottom(scrollableNodeRef.current) &&
                componentRef.current.getBoundingClientRect().bottom >= window.innerHeight);
        }
    }, [hasFooter, hasHeader]);
    var handleClose = React.useCallback(function (event, reason) {
        if (onClose) {
            onClose(event, reason);
        }
        if (reason === 'backdropClick' && onBackdropClick) {
            onBackdropClick(event);
        }
        if (reason === 'escapeKeyDown' && onEscapeKeyDown) {
            onEscapeKeyDown(event);
        }
        return null;
    }, [onBackdropClick, onClose, onEscapeKeyDown]);
    var handleBackdropClick = function (event) {
        if (!disableBackdropClick && event.target === wrapperRef.current) {
            handleClose(event, 'backdropClick');
        }
    };
    var handleKeyDown = React.useCallback(function (event) {
        /*
         * Чтобы сохранить дефолтное поведение элементов и событий форм,
         * обработчик не устанавливает event.preventDefault()
         */
        if (event.key !== 'Escape') {
            return;
        }
        // Если есть обработчик escape на body
        event.stopPropagation();
        if (!disableEscapeKeyDown && handleClose) {
            handleClose(event, 'escapeKeyDown');
        }
    }, [disableEscapeKeyDown, handleClose]);
    var getScrollHandler = React.useCallback(function () {
        if (scrollHandler === 'wrapper')
            return wrapperRef.current;
        if (scrollHandler === 'content')
            return componentRef.current;
        return scrollHandler.current || wrapperRef.current;
    }, [scrollHandler]);
    var handleEntered = React.useCallback(function (node, isAppearing) {
        scrollableNodeRef.current = getScrollHandler();
        addResizeHandle();
        if (scrollableNodeRef.current) {
            scrollableNodeRef.current.addEventListener('scroll', handleScroll);
            handleScroll();
        }
        if (transitionProps.onEntered) {
            transitionProps.onEntered(node, isAppearing);
        }
        if (onMount)
            onMount();
    }, [addResizeHandle, getScrollHandler, handleScroll, onMount, transitionProps]);
    var handleExited = React.useCallback(function (node) {
        removeResizeHandle();
        setExited(true);
        if (scrollableNodeRef.current) {
            scrollableNodeRef.current.removeEventListener('scroll', handleScroll);
        }
        if (transitionProps.onExited) {
            transitionProps.onExited(node);
        }
        if (onUnmount)
            onUnmount();
        if (restoreContainerStylesRef.current) {
            restoreContainerStylesRef.current();
        }
    }, [handleScroll, onUnmount, removeResizeHandle, transitionProps]);
    React.useEffect(function () {
        if (open) {
            utils.handleContainer(getContainer());
            restoreContainerStylesRef.current = function () {
                restoreContainerStylesRef.current = null;
                utils.restoreContainerStyles(getContainer());
            };
        }
    }, [getContainer, open]);
    React.useEffect(function () {
        if (open)
            setExited(false);
    }, [open]);
    React.useEffect(function () {
        return function () {
            if (restoreContainerStylesRef.current) {
                restoreContainerStylesRef.current();
            }
            resizeObserver$1.disconnect();
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var contextValue = React.useMemo(function () { return ({
        hasHeader: hasHeader,
        hasFooter: hasFooter,
        hasScroll: hasScroll,
        headerHighlighted: headerHighlighted,
        footerHighlighted: footerHighlighted,
        contentRef: contentRef,
        setHasHeader: setHasHeader,
        setHasFooter: setHasFooter,
        onClose: handleClose,
    }); }, [
        contentRef,
        hasHeader,
        hasFooter,
        hasScroll,
        headerHighlighted,
        footerHighlighted,
        handleClose,
    ]);
    if (!shouldRender)
        return null;
    return (React__default['default'].createElement(coreComponentsStack.Stack, { value: zIndex }, function (computedZIndex) {
        var _a;
        return (React__default['default'].createElement(coreComponentsPortal.Portal, { getPortalContainer: container },
            React__default['default'].createElement(BaseModalContext.Provider, { value: contextValue },
                React__default['default'].createElement(FocusLock__default['default'], { autoFocus: !disableAutoFocus, disabled: disableFocusLock || !open, returnFocus: !disableRestoreFocus },
                    Backdrop && (React__default['default'].createElement(Backdrop, __assign({}, backdropProps, { className: cn__default['default'](backdropProps.className, styles__default['default'].backdrop), open: open, style: {
                            zIndex: computedZIndex,
                        } }))),
                    React__default['default'].createElement("div", { role: 'dialog', className: cn__default['default'](styles__default['default'].wrapper, wrapperClassName, (_a = {},
                            _a[styles__default['default'].hidden] = !open && exited,
                            _a)), ref: mergeRefs__default['default']([ref, wrapperRef]), onKeyDown: handleKeyDown, onClick: handleBackdropClick, tabIndex: -1, "data-test-id": dataTestId, style: {
                            zIndex: computedZIndex,
                        } },
                        React__default['default'].createElement(reactTransitionGroup.CSSTransition, __assign({ appear: true, timeout: 200, classNames: styles__default['default'] }, transitionProps, { in: open, onEntered: handleEntered, onExited: handleExited }),
                            React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].component, className), ref: componentRef },
                                React__default['default'].createElement("div", { className: cn__default['default'](styles__default['default'].content, contentClassName) }, children))))))));
    }));
});

exports.BaseModal = BaseModal;
exports.BaseModalContext = BaseModalContext;
