import React, { forwardRef, useRef } from 'react';
import cn from 'classnames';
import mergeRefs from 'react-merge-refs';
import { useFocus } from '@alfalab/hooks';

var styles = {"component":"tag__component_19anp","focused":"tag__focused_19anp","addons":"tag__addons_19anp","s":"tag__s_19anp","m":"tag__m_19anp","l":"tag__l_19anp","xl":"tag__xl_19anp","xxs":"tag__xxs_19anp","xs":"tag__xs_19anp","withRightAddons":"tag__withRightAddons_19anp","withLeftAddons":"tag__withLeftAddons_19anp"};
require('./index.css');

var defaultColors = {"component":"tag__component_4xge1","checked":"tag__checked_4xge1"};
require('./default.css');

var invertedColors = {"component":"tag__component_1ao4f","checked":"tag__checked_1ao4f"};
require('./inverted.css');

const colorStylesMap = {
    default: defaultColors,
    inverted: invertedColors,
};
const Tag = forwardRef(({ rightAddons, leftAddons, children, size = 's', checked, className, dataTestId, name, colors = 'default', onClick, ...restProps }, ref) => {
    const colorStyles = colorStylesMap[colors];
    const tagRef = useRef(null);
    const [focused] = useFocus(tagRef, 'keyboard');
    const tagProps = {
        className: cn(styles.component, colorStyles.component, styles[size], {
            [styles.checked]: checked,
            [colorStyles.checked]: checked,
            [styles.focused]: focused,
            [styles.withRightAddons]: Boolean(rightAddons),
            [styles.withLeftAddons]: Boolean(leftAddons),
        }, className),
        'data-test-id': dataTestId,
    };
    const handleClick = (event) => {
        if (onClick) {
            onClick(event, { name, checked: !checked });
        }
    };
    return (React.createElement("button", Object.assign({ ref: mergeRefs([tagRef, ref]), type: 'button', onClick: handleClick }, tagProps, restProps),
        leftAddons ? React.createElement("span", { className: styles.addons }, leftAddons) : null,
        children && React.createElement("span", null, children),
        rightAddons ? React.createElement("span", { className: styles.addons }, rightAddons) : null));
});

export { Tag };
