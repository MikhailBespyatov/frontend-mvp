Object.defineProperty(exports, '__esModule', { value: true });

var components_selectField_component = require('./component-8d00dcd7.js');
var React = require('react');
var cn = require('classnames');
var utils = require('@alfalab/utils');
var coreComponentsInputAutocomplete = require('../input-autocomplete');
require('react-merge-refs');
require('@alfalab/hooks');
require('./components/flag-icon/component.js');
require('../select');
var components_select_component = require('./components/select/component.js');
var utils_formatPhoneWithUnclearableCountryCode = require('./utils/format-phone-with-unclearable-country-code.js');
var useCaretAvoidCountryCode = require('./useCaretAvoidCountryCode.js');
var usePreventCaretReset = require('./usePreventCaretReset.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);

var styles = {"addons":"intl-phone-input__addons_ga86w","l":"intl-phone-input__l_ga86w","xl":"intl-phone-input__xl_ga86w"};
require('./index.css');

var countriesHash = utils.getCountriesHash();
var MAX_DIAL_CODE_LENGTH = 4;
var IntlPhoneInput = React.forwardRef(function (_a, ref) {
    var _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.readOnly, readOnly = _c === void 0 ? false : _c, _d = _a.size, size = _d === void 0 ? 'm' : _d, _e = _a.colors, colors = _e === void 0 ? 'default' : _e, _f = _a.options, options = _f === void 0 ? [] : _f, _g = _a.countries, countries = _g === void 0 ? utils.getCountries() : _g, _h = _a.clearableCountryCode, clearableCountryCode = _h === void 0 ? true : _h, className = _a.className, value = _a.value, onChange = _a.onChange, onCountryChange = _a.onCountryChange, _j = _a.defaultCountryIso2, defaultCountryIso2 = _j === void 0 ? 'ru' : _j, preventFlip = _a.preventFlip, inputProps = _a.inputProps, restProps = components_selectField_component.__rest(_a, ["disabled", "readOnly", "size", "colors", "options", "countries", "clearableCountryCode", "className", "value", "onChange", "onCountryChange", "defaultCountryIso2", "preventFlip", "inputProps"]);
    var _k = React.useState(defaultCountryIso2.toLowerCase()), countryIso2 = _k[0], setCountryIso2 = _k[1];
    var inputRef = React.useRef(null);
    var _l = React.useState(null), inputWrapperRef = _l[0], setInputWrapperRef = _l[1];
    var phoneLibUtils = React.useRef();
    var setCountryByIso2 = React.useCallback(function (iso2) {
        var country = countriesHash[iso2];
        var inputValue = "+" + country.dialCode;
        onChange(inputValue);
        setCountryIso2(country.iso2);
        return country;
    }, [onChange]);
    var setValue = React.useCallback(function (inputValue) {
        var newValue = inputValue;
        if (phoneLibUtils.current) {
            var Utils = phoneLibUtils.current;
            var utils = new Utils(countryIso2.toUpperCase());
            newValue = utils.input(inputValue);
        }
        onChange(newValue);
    }, [countryIso2, onChange]);
    var handleCountryChange = React.useCallback(function (countryCode) {
        if (onCountryChange) {
            onCountryChange(countryCode.toUpperCase());
        }
    }, [onCountryChange]);
    var setCountryByDialCode = React.useCallback(function (inputValue) {
        for (var i = 0; i < countries.length; i++) {
            var country_1 = countries[i];
            if (new RegExp("^\\+" + country_1.dialCode).test(inputValue)) {
                // Сначала проверяем, если приоритет не указан
                if (country_1.priority === undefined) {
                    setValue(inputValue);
                    setCountryIso2(country_1.iso2);
                    handleCountryChange(country_1.iso2);
                    break;
                }
                // Если страна уже была выставлена через селект, и коды совпадают
                if (countryIso2 === country_1.iso2) {
                    setValue(inputValue);
                    setCountryIso2(country_1.iso2);
                    handleCountryChange(country_1.iso2);
                    break;
                    // Если не совпадают - выбираем по приоритету
                }
                else if (country_1.priority === 0) {
                    setValue(inputValue);
                    setCountryIso2(country_1.iso2);
                    handleCountryChange(country_1.iso2);
                    break;
                }
            }
        }
    }, [countries, countryIso2, setValue, handleCountryChange]);
    var loadPhoneUtils = React.useCallback(function () {
        // prettier-ignore
        return Promise.resolve().then(function () { return require(/* webpackChunkName: "libphonenumber" */ './libphonenumber-js.min-d2924cb8.js'); })
            .then(function (utils) {
            phoneLibUtils.current = utils.AsYouType;
        })
            .catch(function (error) { return "An error occurred while loading libphonenumber-js:\n" + error; });
    }, []);
    var handleInputChange = React.useCallback(function (event) {
        var targetValue = event.target.value;
        var country = countriesHash[countryIso2];
        if (clearableCountryCode) {
            var newValue = targetValue.length === 1 && targetValue !== '+'
                ? "+" + targetValue
                : targetValue;
            setValue(newValue);
            if (value.length < MAX_DIAL_CODE_LENGTH) {
                setCountryByDialCode(newValue);
            }
            return;
        }
        if (!clearableCountryCode) {
            var newValue = utils_formatPhoneWithUnclearableCountryCode.formatPhoneWithUnclearableCountryCode(targetValue, country);
            setValue(newValue);
            return;
        }
        setValue(targetValue);
    }, [clearableCountryCode, countryIso2, setCountryByDialCode, setValue, value.length]);
    var handleSelectChange = React.useCallback(function (_a) {
        var selected = _a.selected;
        if (selected) {
            var country_2 = setCountryByIso2(selected.value);
            var inputValue = "+" + country_2.dialCode;
            if (inputRef.current) {
                inputRef.current.focus();
                inputRef.current.setSelectionRange(inputValue.length, inputValue.length);
            }
            handleCountryChange(country_2.iso2);
        }
    }, [setCountryByIso2, handleCountryChange]);
    var handleChange = React.useCallback(function (payload) {
        var selected = payload.selected;
        if (!selected)
            return;
        if (selected.key.length < MAX_DIAL_CODE_LENGTH) {
            setCountryByDialCode(selected.key);
        }
        setValue(selected.key);
    }, [setValue, setCountryByDialCode]);
    React.useEffect(function () {
        if (!phoneLibUtils.current) {
            loadPhoneUtils().then(function () {
                setCountryByDialCode(value);
            });
        }
    }, [countryIso2, loadPhoneUtils, setCountryByDialCode, value]);
    var country = countriesHash[countryIso2];
    var countryCodeLength = ("+" + country.dialCode).length;
    useCaretAvoidCountryCode.useCaretAvoidCountryCode({ inputRef: inputRef, countryCodeLength: countryCodeLength, clearableCountryCode: clearableCountryCode });
    usePreventCaretReset.usePreventCaretReset({ inputRef: inputRef, countryCodeLength: countryCodeLength, clearableCountryCode: clearableCountryCode });
    return (React__default['default'].createElement(coreComponentsInputAutocomplete.InputAutocomplete, components_selectField_component.__assign({}, restProps, { ref: ref, inputProps: components_selectField_component.__assign(components_selectField_component.__assign({}, inputProps), { ref: inputRef, wrapperRef: setInputWrapperRef, type: 'tel', colors: colors, className: cn__default['default'](className, styles[size]), addonsClassName: styles.addons, leftAddons: countries.length > 1 && (React__default['default'].createElement(components_select_component.CountriesSelect, { dataTestId: 'countries-select', disabled: disabled || readOnly, size: size, selected: countryIso2, countries: countries, onChange: handleSelectChange, fieldWidth: inputWrapperRef && inputWrapperRef.getBoundingClientRect().width, preventFlip: preventFlip })) }), closeOnSelect: true, onInput: handleInputChange, onChange: handleChange, options: options, disabled: disabled, readOnly: readOnly, size: size, className: className, value: value })));
});
IntlPhoneInput.defaultProps = {
    size: 'm',
    defaultCountryIso2: 'ru',
};

exports.IntlPhoneInput = IntlPhoneInput;
