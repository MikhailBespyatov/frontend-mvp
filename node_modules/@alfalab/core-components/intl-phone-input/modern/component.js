import React, { forwardRef, useState, useRef, useCallback, useEffect } from 'react';
import cn from 'classnames';
import 'react-merge-refs';
import '@alfalab/hooks';
import { getCountriesHash, getCountries } from '@alfalab/utils';
import { InputAutocomplete } from '../../input-autocomplete/modern';
import './components/flag-icon/component.js';
import './components/select-field/component.js';
import '../../select/modern';
import { CountriesSelect } from './components/select/component.js';
import { formatPhoneWithUnclearableCountryCode } from './utils/format-phone-with-unclearable-country-code.js';
import { useCaretAvoidCountryCode } from './useCaretAvoidCountryCode.js';
import { usePreventCaretReset } from './usePreventCaretReset.js';

var styles = {"addons":"intl-phone-input__addons_ga86w","l":"intl-phone-input__l_ga86w","xl":"intl-phone-input__xl_ga86w"};
require('./index.css');

const countriesHash = getCountriesHash();
const MAX_DIAL_CODE_LENGTH = 4;
const IntlPhoneInput = forwardRef(({ disabled = false, readOnly = false, size = 'm', colors = 'default', options = [], countries = getCountries(), clearableCountryCode = true, className, value, onChange, onCountryChange, defaultCountryIso2 = 'ru', preventFlip, inputProps, ...restProps }, ref) => {
    const [countryIso2, setCountryIso2] = useState(defaultCountryIso2.toLowerCase());
    const inputRef = useRef(null);
    const [inputWrapperRef, setInputWrapperRef] = useState(null);
    const phoneLibUtils = useRef();
    const setCountryByIso2 = useCallback((iso2) => {
        const country = countriesHash[iso2];
        const inputValue = `+${country.dialCode}`;
        onChange(inputValue);
        setCountryIso2(country.iso2);
        return country;
    }, [onChange]);
    const setValue = useCallback(inputValue => {
        let newValue = inputValue;
        if (phoneLibUtils.current) {
            const Utils = phoneLibUtils.current;
            const utils = new Utils(countryIso2.toUpperCase());
            newValue = utils.input(inputValue);
        }
        onChange(newValue);
    }, [countryIso2, onChange]);
    const handleCountryChange = useCallback((countryCode) => {
        if (onCountryChange) {
            onCountryChange(countryCode.toUpperCase());
        }
    }, [onCountryChange]);
    const setCountryByDialCode = useCallback(inputValue => {
        for (let i = 0; i < countries.length; i++) {
            const country = countries[i];
            if (new RegExp(`^\\+${country.dialCode}`).test(inputValue)) {
                // Сначала проверяем, если приоритет не указан
                if (country.priority === undefined) {
                    setValue(inputValue);
                    setCountryIso2(country.iso2);
                    handleCountryChange(country.iso2);
                    break;
                }
                // Если страна уже была выставлена через селект, и коды совпадают
                if (countryIso2 === country.iso2) {
                    setValue(inputValue);
                    setCountryIso2(country.iso2);
                    handleCountryChange(country.iso2);
                    break;
                    // Если не совпадают - выбираем по приоритету
                }
                else if (country.priority === 0) {
                    setValue(inputValue);
                    setCountryIso2(country.iso2);
                    handleCountryChange(country.iso2);
                    break;
                }
            }
        }
    }, [countries, countryIso2, setValue, handleCountryChange]);
    const loadPhoneUtils = useCallback(() => {
        // prettier-ignore
        return import(/* webpackChunkName: "libphonenumber" */ './libphonenumber-js.min-4cc6a1af.js')
            .then(utils => {
            phoneLibUtils.current = utils.AsYouType;
        })
            .catch(error => `An error occurred while loading libphonenumber-js:\n${error}`);
    }, []);
    const handleInputChange = useCallback((event) => {
        const { target: { value: targetValue }, } = event;
        const country = countriesHash[countryIso2];
        if (clearableCountryCode) {
            const newValue = targetValue.length === 1 && targetValue !== '+'
                ? `+${targetValue}`
                : targetValue;
            setValue(newValue);
            if (value.length < MAX_DIAL_CODE_LENGTH) {
                setCountryByDialCode(newValue);
            }
            return;
        }
        if (!clearableCountryCode) {
            const newValue = formatPhoneWithUnclearableCountryCode(targetValue, country);
            setValue(newValue);
            return;
        }
        setValue(targetValue);
    }, [clearableCountryCode, countryIso2, setCountryByDialCode, setValue, value.length]);
    const handleSelectChange = useCallback(({ selected }) => {
        if (selected) {
            const country = setCountryByIso2(selected.value);
            const inputValue = `+${country.dialCode}`;
            if (inputRef.current) {
                inputRef.current.focus();
                inputRef.current.setSelectionRange(inputValue.length, inputValue.length);
            }
            handleCountryChange(country.iso2);
        }
    }, [setCountryByIso2, handleCountryChange]);
    const handleChange = useCallback((payload) => {
        const { selected } = payload;
        if (!selected)
            return;
        if (selected.key.length < MAX_DIAL_CODE_LENGTH) {
            setCountryByDialCode(selected.key);
        }
        setValue(selected.key);
    }, [setValue, setCountryByDialCode]);
    useEffect(() => {
        if (!phoneLibUtils.current) {
            loadPhoneUtils().then(() => {
                setCountryByDialCode(value);
            });
        }
    }, [countryIso2, loadPhoneUtils, setCountryByDialCode, value]);
    const country = countriesHash[countryIso2];
    const countryCodeLength = `+${country.dialCode}`.length;
    useCaretAvoidCountryCode({ inputRef, countryCodeLength, clearableCountryCode });
    usePreventCaretReset({ inputRef, countryCodeLength, clearableCountryCode });
    return (React.createElement(InputAutocomplete, Object.assign({}, restProps, { ref: ref, inputProps: {
            ...inputProps,
            ref: inputRef,
            wrapperRef: setInputWrapperRef,
            type: 'tel',
            colors,
            className: cn(className, styles[size]),
            addonsClassName: styles.addons,
            leftAddons: countries.length > 1 && (React.createElement(CountriesSelect, { dataTestId: 'countries-select', disabled: disabled || readOnly, size: size, selected: countryIso2, countries: countries, onChange: handleSelectChange, fieldWidth: inputWrapperRef && inputWrapperRef.getBoundingClientRect().width, preventFlip: preventFlip })),
        }, closeOnSelect: true, onInput: handleInputChange, onChange: handleChange, options: options, disabled: disabled, readOnly: readOnly, size: size, className: className, value: value })));
});
IntlPhoneInput.defaultProps = {
    size: 'm',
    defaultCountryIso2: 'ru',
};

export { IntlPhoneInput };
