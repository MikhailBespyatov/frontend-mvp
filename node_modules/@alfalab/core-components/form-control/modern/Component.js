import React from 'react';
import cn from 'classnames';

var styles = {"component":"form-control__component_x11f4","inner":"form-control__inner_x11f4","inputWrapper":"form-control__inputWrapper_x11f4","input":"form-control__input_x11f4","label":"form-control__label_x11f4","labelInner":"form-control__labelInner_x11f4","addons":"form-control__addons_x11f4","leftAddons":"form-control__leftAddons_x11f4","rightAddons":"form-control__rightAddons_x11f4","sub":"form-control__sub_x11f4","block":"form-control__block_x11f4","s":"form-control__s_x11f4","hasLabel":"form-control__hasLabel_x11f4","m":"form-control__m_x11f4","l":"form-control__l_x11f4","xl":"form-control__xl_x11f4","hasLeftAddons":"form-control__hasLeftAddons_x11f4","hasRightAddons":"form-control__hasRightAddons_x11f4","disabled":"form-control__disabled_x11f4","focused":"form-control__focused_x11f4","hasError":"form-control__hasError_x11f4","filled":"form-control__filled_x11f4","hiddenLabel":"form-control__hiddenLabel_x11f4"};
require('./index.css');

var defaultColors = {"component":"form-control__component_sn2oj","inner":"form-control__inner_sn2oj","label":"form-control__label_sn2oj","hint":"form-control__hint_sn2oj","disabled":"form-control__disabled_sn2oj","focused":"form-control__focused_sn2oj","hasError":"form-control__hasError_sn2oj","error":"form-control__error_sn2oj"};
require('./default.css');

var invertedColors = {"component":"form-control__component_1e2oc","inner":"form-control__inner_1e2oc","label":"form-control__label_1e2oc","hint":"form-control__hint_1e2oc","disabled":"form-control__disabled_1e2oc","focused":"form-control__focused_1e2oc","hasError":"form-control__hasError_1e2oc","error":"form-control__error_1e2oc"};
require('./inverted.css');

const colorStyles = {
    default: defaultColors,
    inverted: invertedColors,
};
const FormControl = React.forwardRef(({ block = false, size = 's', colors = 'default', className, fieldClassName, labelClassName, addonsClassName, disabled, focused, filled, error, hint, label, leftAddons, rightAddons, bottomAddons, children, dataTestId, ...restProps }, ref) => {
    const errorMessage = typeof error === 'boolean' ? '' : error;
    return (React.createElement("div", { "data-test-id": dataTestId, className: cn(styles.component, colorStyles[colors].component, className, styles[size], {
            [styles.block]: block,
            [styles.hasLeftAddons]: leftAddons,
            [styles.hasRightAddons]: rightAddons || error,
        }) },
        React.createElement("div", Object.assign({}, restProps, { className: cn(fieldClassName, styles.inner, colorStyles[colors].inner, {
                [styles.disabled]: disabled,
                [colorStyles[colors].disabled]: disabled,
                [styles.filled]: filled,
                [styles.hasLabel]: label,
                [styles.focused]: focused,
                [colorStyles[colors].focused]: focused,
                [styles.hasError]: error,
                [colorStyles[colors].hasError]: error,
            }), ref: ref }),
            leftAddons && (React.createElement("div", { className: cn(styles.addons, styles.leftAddons, addonsClassName) }, leftAddons)),
            React.createElement("div", { className: styles.inputWrapper },
                label && (React.createElement(React.Fragment, null,
                    React.createElement("span", { className: styles.hiddenLabel, "aria-hidden": true }, label),
                    React.createElement("div", { className: cn(styles.label, colorStyles[colors].label, labelClassName) },
                        React.createElement("span", { className: styles.labelInner }, label)))),
                React.createElement("div", { className: styles.input }, children)),
            rightAddons && (React.createElement("div", { className: cn(styles.addons, styles.rightAddons, addonsClassName) }, rightAddons))),
        bottomAddons,
        errorMessage && (React.createElement("span", { className: cn(styles.sub, styles.error, colorStyles[colors].error), role: 'alert' }, errorMessage)),
        hint && !errorMessage && (React.createElement("span", { className: cn(styles.sub, colorStyles[colors].hint) }, hint))));
});

export { FormControl };
