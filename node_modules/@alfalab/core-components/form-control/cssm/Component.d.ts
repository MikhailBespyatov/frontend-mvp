/// <reference types="react" />
import React from 'react';
import { ReactNode, HTMLAttributes } from "react";
type FormControlProps = HTMLAttributes<HTMLDivElement> & {
    /**
     * Растягивает компонент на ширину контейнера
     */
    block?: boolean;
    /**
     * Размер компонента
     */
    size?: 's' | 'm' | 'l' | 'xl';
    /**
     * Набор цветов для компонента
     */
    colors?: 'default' | 'inverted';
    /**
     * Заблокированное состояние
     */
    disabled?: boolean;
    /**
     * Заполненное состояние
     */
    filled?: boolean;
    /**
     * Выбранное (фокус) состояние
     */
    focused?: boolean;
    /**
     * Отображение ошибки
     */
    error?: ReactNode | boolean;
    /**
     * Текст подсказки
     */
    hint?: ReactNode;
    /**
     * Лейбл компонента
     */
    label?: ReactNode;
    /**
     * Слот слева
     */
    leftAddons?: ReactNode;
    /**
     * Слот справа
     */
    rightAddons?: ReactNode;
    /**
     * Слот под полем
     */
    bottomAddons?: ReactNode;
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Дополнительный класс для поля
     */
    fieldClassName?: string;
    /**
     * Дополнительный класс для лейбла
     */
    labelClassName?: string;
    /**
     * Дополнительный класс для аддонов
     */
    addonsClassName?: string;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    dataTestId?: string;
    /**
     * Компонент поля (инпут, textarea и пр.)
     */
    children?: ReactNode;
};
declare const FormControl: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {
    /**
     * Растягивает компонент на ширину контейнера
     */
    block?: boolean | undefined;
    /**
     * Размер компонента
     */
    size?: "s" | "m" | "l" | "xl" | undefined;
    /**
     * Набор цветов для компонента
     */
    colors?: "default" | "inverted" | undefined;
    /**
     * Заблокированное состояние
     */
    disabled?: boolean | undefined;
    /**
     * Заполненное состояние
     */
    filled?: boolean | undefined;
    /**
     * Выбранное (фокус) состояние
     */
    focused?: boolean | undefined;
    /**
     * Отображение ошибки
     */
    error?: React.ReactNode;
    /**
     * Текст подсказки
     */
    hint?: React.ReactNode;
    /**
     * Лейбл компонента
     */
    label?: React.ReactNode;
    /**
     * Слот слева
     */
    leftAddons?: React.ReactNode;
    /**
     * Слот справа
     */
    rightAddons?: React.ReactNode;
    /**
     * Слот под полем
     */
    bottomAddons?: React.ReactNode;
    /**
     * Дополнительный класс
     */
    className?: string | undefined;
    /**
     * Дополнительный класс для поля
     */
    fieldClassName?: string | undefined;
    /**
     * Дополнительный класс для лейбла
     */
    labelClassName?: string | undefined;
    /**
     * Дополнительный класс для аддонов
     */
    addonsClassName?: string | undefined;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    dataTestId?: string | undefined;
    /**
     * Компонент поля (инпут, textarea и пр.)
     */
    children?: React.ReactNode;
} & React.RefAttributes<HTMLDivElement>>;
export { FormControlProps, FormControl };
