Object.defineProperty(exports, '__esModule', { value: true });

var field_Component = require('./Component-7baa9255.js');
var React = require('react');
var cn = require('classnames');
var coreComponentsSelect = require('../select');
require('../button');
require('@alfalab/icons-classic/ArrowDownMIcon');
require('@alfalab/icons-classic/ArrowDownSIcon');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);

var styles = {"container":"picker-button__container_1s99m","optionsPopover":"picker-button__optionsPopover_1s99m","sideGap":"picker-button__sideGap_1s99m","optionsListContainer":"picker-button__optionsListContainer_1s99m"};
require('./index.css');

var SIDE_POSITIONS = ['right', 'right-start', 'right-end', 'left', 'left-start', 'left-end'];
var PickerButton = React.forwardRef(function (_a, ref) {
    var _b;
    var _c = _a.OptionsList, OptionsList = _c === void 0 ? coreComponentsSelect.OptionsList : _c, _d = _a.Optgroup, Optgroup = _d === void 0 ? coreComponentsSelect.Optgroup : _d, _e = _a.Option, Option = _e === void 0 ? coreComponentsSelect.Option : _e, view = _a.view, loading = _a.loading, _f = _a.size, size = _f === void 0 ? 'm' : _f, className = _a.className, leftAddons = _a.leftAddons, rightAddons = _a.rightAddons, popperClassName = _a.popperClassName, optionsListClassName = _a.optionsListClassName, restProps = field_Component.__rest(_a, ["OptionsList", "Optgroup", "Option", "view", "loading", "size", "className", "leftAddons", "rightAddons", "popperClassName", "optionsListClassName"]);
    var isSideGap = !!restProps.popoverPosition && SIDE_POSITIONS.includes(restProps.popoverPosition);
    return (React__default['default'].createElement(coreComponentsSelect.BaseSelect, field_Component.__assign({}, restProps, { ref: ref, Option: Option, Field: field_Component.Field, size: size === 'm' ? 'm' : 's', fieldProps: {
            view: view,
            loading: loading,
            /** size у select, button несовместимы */
            buttonSize: size,
            leftAddons: leftAddons,
            rightAddons: rightAddons,
        }, Optgroup: Optgroup, OptionsList: OptionsList, className: cn__default['default'](styles.container, className), popperClassName: cn__default['default'](styles.optionsPopover, popperClassName, (_b = {},
            _b[styles.sideGap] = isSideGap,
            _b)), optionsListClassName: cn__default['default'](styles.optionsListContainer, optionsListClassName), selected: [], closeOnSelect: true })));
});

exports.PickerButton = PickerButton;
