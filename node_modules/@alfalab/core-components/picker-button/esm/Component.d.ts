/// <reference types="react" />
import React from 'react';
import { ButtonProps } from "../../button";
import { BaseSelectProps } from "../../select";
type PickerButtonSize = 'xs' | 's' | 'm';
type PickerButtonProps = Omit<BaseSelectProps, 'Field' | 'placeholder' | 'Arrow' | 'autocomplete' | 'size' | 'onFocus' | 'selected' | 'closeOnSelect' | 'multiple' | 'fieldProps' | 'hint' | 'allowUnselect'> & Pick<ButtonProps, 'view' | 'loading' | 'leftAddons' | 'rightAddons'> & {
    /**
     * Размер кнопки
     */
    size?: PickerButtonSize;
};
declare const PickerButton: React.ForwardRefExoticComponent<Pick<BaseSelectProps, "className" | "dataTestId" | "label" | "block" | "id" | "onBlur" | "onChange" | "onScroll" | "disabled" | "name" | "fieldClassName" | "error" | "preventFlip" | "popperClassName" | "open" | "options" | "valueRenderer" | "Optgroup" | "visibleOptions" | "Option" | "optionsListClassName" | "optionClassName" | "circularNavigation" | "nativeSelect" | "defaultOpen" | "popoverPosition" | "optionsListWidth" | "optionsSize" | "optionsListProps" | "optionProps" | "onOpen" | "OptionsList" | "updatePopover" | "zIndexPopover" | "showEmptyOptionsList"> & Pick<Partial<import("../../button").ComponentProps & React.AnchorHTMLAttributes<HTMLAnchorElement>> | Partial<import("../../button").ComponentProps & React.ButtonHTMLAttributes<HTMLButtonElement>>, "view" | "leftAddons" | "rightAddons" | "loading"> & {
    /**
     * Размер кнопки
     */
    size?: "s" | "xs" | "m" | undefined;
} & React.RefAttributes<HTMLInputElement>>;
export { PickerButtonSize, PickerButtonProps, PickerButton };
