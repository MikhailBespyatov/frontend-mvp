/// <reference types="react-transition-group" />
/// <reference types="react" />
import { ButtonProps } from "../../../button";
import React from "react";
import { ReactNode, FC, RefAttributes, AriaAttributes, FocusEvent, MouseEvent, ReactElement, CSSProperties, MutableRefObject, InputHTMLAttributes, ChangeEvent } from "react";
import { CSSTransitionProps } from "react-transition-group/CSSTransition";
import { BasePlacement, VariationPlacement } from "@popperjs/core";
import { PickerButtonSize } from "../index";
type RefElement = HTMLElement | null;
type Position = BasePlacement | VariationPlacement;
type PopoverProps = {
    /**
     * Управление состоянием поповера (открыт/закрыт)
     */
    open: boolean;
    /**
     * Элемент, относительного которого появляется поповер
     */
    anchorElement: RefElement;
    /**
     * Использовать ширину родительского элемента
     */
    useAnchorWidth?: boolean;
    /**
     * Позиционирование поповера
     */
    position?: Position;
    /**
     * Запрещает поповеру менять свою позицию.
     * Например, если места снизу недостаточно,то он все равно будет показан снизу
     */
    preventFlip?: boolean;
    /**
     * Запрещает поповеру менять свою позицию, если он не влезает в видимую область.
     */
    preventOverflow?: boolean;
    /**
     *  Позволяет поповеру подствраивать свою высоту под границы экрана, если из-за величины контента он выходит за рамки видимой области экрана
     */
    availableHeight?: boolean;
    /**
     * Если `true`, будет отрисована стрелочка
     */
    withArrow?: boolean;
    /**
     * Смещение поповера.
     * Если позиционирование top, bottom, то [x, y].
     * Если позиционирование left, right то [y, x].
     */
    offset?: [number, number];
    /**
     * Дополнительный класс для поповера
     */
    popperClassName?: string;
    /**
     * Дополнительный класс для стрелочки
     */
    arrowClassName?: string;
    /**
     * Функция, возвращающая контейнер, в который будет рендериться поповер
     */
    getPortalContainer?: () => HTMLElement;
    /**
     * CSSTransitionProps, прокидываются в компонент CSSTransitionProps.
     */
    transition?: CSSTransitionProps;
    /**
     * Выставляет кастомное свойство transition-duration
     */
    transitionDuration?: CSSProperties["transitionDuration"];
    /**
     * Рендерит компонент, обернутый в Transition
     */
    withTransition?: boolean;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    dataTestId?: string;
    /**
     * Хранит функцию, с помощью которой можно обновить положение компонента
     */
    update?: MutableRefObject<() => void>;
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * z-index компонента
     */
    zIndex?: number;
    /**
     * Если поповер не помещается в переданной позиции (position), он попробует открыться в другой позиции,
     * по очереди для каждой позиции из этого списка.
     * Если не передавать, то поповер открывается в противоположном направлении от переданного position.
     */
    fallbackPlacements?: Position[];
    /**
     * Контент
     */
    children?: ReactNode;
};
type InputProps = Omit<InputHTMLAttributes<HTMLInputElement>, "size" | "type" | "value" | "defaultValue" | "onChange" | "onClick" | "onMouseDown"> & {
    /**
     * Значение поля ввода
     */
    value?: string;
    /**
     * Начальное значение поля
     */
    defaultValue?: string;
    /**
     * Растягивает компонент на ширину контейнера
     */
    block?: boolean;
    /**
     * Крестик для очистки поля
     */
    clear?: boolean;
    /**
     * Размер компонента
     */
    size?: "s" | "m" | "l" | "xl";
    /**
     * Набор цветов для компонента
     */
    colors?: "default" | "inverted";
    /**
     * Отображение ошибки
     */
    error?: ReactNode | boolean;
    /**
     * Отображение иконки успеха
     */
    success?: boolean;
    /**
     * Текст подсказки
     */
    hint?: ReactNode;
    /**
     * Лейбл компонента
     */
    label?: React.ReactNode;
    /**
     * Атрибут type
     */
    type?: "number" | "card" | "email" | "money" | "password" | "tel" | "text";
    /**
     * Ref для обертки input
     */
    wrapperRef?: React.Ref<HTMLDivElement>;
    /**
     * Слот слева
     */
    leftAddons?: React.ReactNode;
    /**
     * Слот справа
     */
    rightAddons?: React.ReactNode;
    /**
     * Слот под инпутом
     */
    bottomAddons?: React.ReactNode;
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Дополнительный класс для поля
     */
    fieldClassName?: string;
    /**
     * Дополнительный класс инпута
     */
    inputClassName?: string;
    /**
     * Дополнительный класс для лейбла
     */
    labelClassName?: string;
    /**
     * Дополнительный класс для аддонов
     */
    addonsClassName?: string;
    /**
     * Класс, который будет установлен при фокусе
     */
    focusedClassName?: string;
    /**
     * Класс, который будет установлен, если в поле есть значение
     */
    filledClassName?: string;
    /**
     * Обработчик поля ввода
     */
    onChange?: (event: ChangeEvent<HTMLInputElement>, payload: {
        value: string;
    }) => void;
    /**
     * Обработчик нажатия на кнопку очистки
     */
    onClear?: (event: MouseEvent<HTMLButtonElement>) => void;
    /**
     * Обработчик клика по полю
     */
    onClick?: (event: MouseEvent<HTMLDivElement>) => void;
    /**
     * Обработчик MouseDown по полю
     */
    onMouseDown?: (event: MouseEvent<HTMLDivElement>) => void;
    /**
     * Обработчик MouseUp по полю
     */
    onMouseUp?: (event: MouseEvent<HTMLDivElement>) => void;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    dataTestId?: string;
};
type OptionShape = {
    /**
     * Текстовое представление пункта
     */
    key: string;
    /**
     * Контент, который будет отрисован в выпадающем списке и в поле при выборе
     */
    content?: ReactNode;
    /**
     * Блокирует данный пункт для выбора
     */
    disabled?: boolean;
    /**
     * Дополнительные данные
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    value?: any;
};
type GroupShape = {
    /**
     * Заголовок группы
     */
    label?: string;
    /**
     * Дочерние элементы
     */
    options: OptionShape[];
};
type BaseSelectProps = {
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    dataTestId?: string;
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Дополнительный класс для поля
     */
    fieldClassName?: string;
    /**
     * Дополнительный класс выпадающего меню
     */
    optionsListClassName?: string;
    /**
     * Дополнительный класс для пункта меню
     */
    optionClassName?: string;
    /**
     * Дополнительный класс для поповера
     */
    popperClassName?: string;
    /**
     * Список вариантов выбора
     */
    options: Array<OptionShape | GroupShape>;
    /**
     * Атрибут id
     */
    id?: string;
    /**
     * Атрибут name
     */
    name?: string;
    /**
     * Управление возможностью выбора значения
     */
    disabled?: boolean;
    /**
     * Начальное состояние селекта
     */
    defaultOpen?: boolean;
    /**
     * Управление открытием
     */
    open?: boolean;
    /**
     * Возможность выбрать несколько значений
     */
    multiple?: boolean;
    /**
     * Размер компонента
     */
    size?: "s" | "m" | "l" | "xl";
    /**
     * Размер пунктов меню
     */
    optionsSize?: "s" | "m" | "l" | "xl";
    /**
     * Растягивает компонент на ширину контейнера
     */
    block?: boolean;
    /**
     * Управляет шириной выпадающего меню.
     * Ширину определяет контент, либо ширина равна ширине поля
     */
    optionsListWidth?: "content" | "field";
    /**
     * Лейбл поля
     */
    label?: ReactNode;
    /**
     * Плейсхолдер поля
     */
    placeholder?: string;
    /**
     * Отображение ошибки
     */
    error?: ReactNode | boolean;
    /**
     * Подсказка под полем
     */
    hint?: ReactNode;
    /**
     * Возможность использовать селект как input-autocomplete
     */
    autocomplete?: boolean;
    /**
     * Позволяет снять выбранное значение
     */
    allowUnselect?: boolean;
    /**
     * Закрывать меню после выбора?
     */
    closeOnSelect?: boolean;
    /**
     * При навигации с клавиатуры переходить от последнего пункта меню к первому и наоборот.
     */
    circularNavigation?: boolean;
    /**
     * Запрещает поповеру менять свою позицию.
     * Например, если места снизу недостаточно,то он все равно будет показан снизу
     */
    preventFlip?: boolean;
    /**
     * Список value выбранных пунктов (controlled-селект)
     */
    selected?: Array<string | OptionShape> | string | OptionShape | null;
    /**
     * Рендерит нативный селект вместо выпадающего меню. (на десктопе использовать только с multiple=false)
     */
    nativeSelect?: boolean;
    /**
     * Позиционирование выпадающего списка
     */
    popoverPosition?: PopoverProps["position"];
    /**
     * Количество видимых пунктов меню (5 = 5.5)
     */
    visibleOptions?: number;
    /**
     * Кастомный рендер выбранного пункта
     */
    valueRenderer?: ({ selected, selectedMultiple }: {
        selected?: OptionShape;
        selectedMultiple: OptionShape[];
    }) => ReactNode;
    /**
     * Компонент стрелки
     */
    Arrow?: FC<ArrowProps> | null | false;
    /**
     * Компонент поля
     */
    Field?: FC<FieldProps>;
    /**
     * Пропсы, которые будут прокинуты в компонент поля
     */
    fieldProps?: unknown;
    /**
     * Пропсы, которые будут прокинуты в компонент списка
     */
    optionsListProps?: unknown;
    /**
     * Пропсы, которые будут прокинуты в компонент пункта меню
     */
    optionProps?: unknown;
    /**
     * Компонент выпадающего меню
     */
    OptionsList?: FC<OptionsListProps>;
    /**
     * Компонент группы
     */
    Optgroup?: FC<OptgroupProps>;
    /**
     * Компонент пункта меню
     */
    Option?: FC<OptionProps>;
    /**
     * Обработчик выбора
     */
    onChange?: (payload: {
        selected: OptionShape | null;
        selectedMultiple: OptionShape[];
        initiator: OptionShape | null;
        name?: string;
    }) => void;
    /**
     * Обработчик открытия\закрытия селекта
     */
    onOpen?: (payload: {
        open?: boolean;
        name?: string;
    }) => void;
    /**
     * Обработчик фокуса поля
     */
    onBlur?: (event: FocusEvent<HTMLDivElement | HTMLInputElement>) => void;
    /**
     * Обработчик блюра поля
     */
    onFocus?: (event: FocusEvent<HTMLDivElement | HTMLInputElement>) => void;
    /**
     * Обработчик скрола
     */
    onScroll?: (event: MouseEvent<HTMLDivElement>) => void;
    /**
     * Хранит функцию, с помощью которой можно обновить положение поповера
     */
    updatePopover?: PopoverProps["update"];
    /**
     * z-index поповера
     */
    zIndexPopover?: PopoverProps["zIndex"];
    /**
     * Показывать OptionsList, если он пустой
     */
    showEmptyOptionsList?: boolean;
};
// TODO: использовать InputProps
type FieldProps = {
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Размер компонента
     */
    size?: "s" | "m" | "l" | "xl";
    /**
     * Выбранный пункт
     */
    selected?: OptionShape;
    /**
     * Список выбранных пунктов
     */
    selectedMultiple?: OptionShape[];
    /**
     * Метод для ручной установки выбранных пунктов
     */
    setSelectedItems: (selected: OptionShape[]) => void;
    /**
     * Метод переключающий видимость выпадающего списка
     */
    toggleMenu: () => void;
    /**
     * Флаг, можно ли выбрать несколько значений
     */
    multiple?: boolean;
    /**
     * Флаг, открыто ли меню
     */
    open?: boolean;
    /**
     * Флаг, поле заблокировано
     */
    disabled?: boolean;
    /**
     * Лейбл поля
     */
    label?: ReactNode;
    /**
     * Плейсхолдер поля
     */
    placeholder?: string;
    /**
     * Отображение ошибки
     */
    error?: ReactNode | boolean;
    /**
     * Отображение иконки успеха
     */
    success?: boolean;
    /**
     * Подсказка под полем
     */
    hint?: ReactNode;
    /**
     * Компонент стрелки
     */
    Arrow?: ReactElement | false | null;
    /**
     * Кастомный рендер выбранного пункта
     */
    valueRenderer?: BaseSelectProps["valueRenderer"];
    /**
     * Внутренние свойства, которые должны быть установлены компоненту.
     */
    innerProps: {
        onBlur?: (event: FocusEvent<HTMLDivElement | HTMLInputElement>) => void;
        onFocus?: (event: FocusEvent<HTMLDivElement | HTMLInputElement>) => void;
        onClick?: (event: MouseEvent<HTMLDivElement | HTMLInputElement>) => void;
        tabIndex: number;
        id: string;
    } & RefAttributes<HTMLDivElement | HTMLInputElement> & AriaAttributes;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    dataTestId?: string;
};
type ArrowProps = {
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Флаг, открыто ли меню
     */
    open?: boolean;
};
type OptionsListProps = {
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Размер компонента
     */
    size?: "s" | "m" | "l" | "xl";
    /**
     * Компонент пункта меню
     */
    Option: FC<OptionProps>;
    /**
     * Функция для получения пропсов для ячейки
     */
    getOptionProps: (option: OptionShape, index: number) => OptionProps;
    /**
     * Список выбранных пунктов
     */
    selectedItems?: OptionShape[];
    /**
     * Метод для ручной установки выбранных пунктов
     */
    setSelectedItems: (selected: OptionShape[]) => void;
    /**
     * Метод переключающий видимость выпадающего списка
     */
    toggleMenu: () => void;
    /**
     * Контент шапки
     */
    header?: ReactNode;
    /**
     * Контент футера
     */
    footer?: ReactNode;
    /**
     * Список вариантов выбора
     */
    options?: Array<OptionShape | GroupShape>;
    /**
     * Плоский список пунктов меню (например, нужно для виртуализации)
     */
    flatOptions?: OptionShape[];
    /**
     * Индекс выделенного пункта
     */
    highlightedIndex?: number;
    /**
     * Флаг, открыто ли меню
     */
    open?: boolean;
    /**
     * Компонент группы
     */
    Optgroup?: BaseSelectProps["Optgroup"];
    /**
     * Будет отображаться, если компонент пустой
     */
    emptyPlaceholder?: string;
    /**
     * Количество видимых пунктов меню (5 = 5.5)
     */
    visibleOptions?: number;
    /**
     * Обработчик скрола
     */
    onScroll?: (event: MouseEvent<HTMLDivElement>) => void;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    dataTestId?: string;
    /**
     * Дополнительные пропсы для Input'a, находящегося внутри кастомного OptionsList
     */
    inputProps?: InputProps;
};
type OptgroupProps = {
    /**
     * Размер компонента
     */
    size?: "s" | "m" | "l" | "xl";
    /**
     * Заголовок группы
     */
    label?: string;
    /**
     * Дочерние элементы
     */
    children?: ReactNode;
};
type OptionProps = {
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Размер компонента
     */
    size?: "s" | "m" | "l" | "xl";
    /**
     * Контент пункта меню
     */
    children?: ReactNode;
    /**
     * Данные пункта меню
     */
    option: OptionShape;
    /**
     * Индекс пункта
     */
    index: number;
    /**
     * Флаг, выбран ли данный пункт
     */
    selected?: boolean;
    /**
     * Флаг, подсвечен ли данный пункт
     */
    highlighted?: boolean;
    /**
     * Флаг, заблокирован ли данный пункт
     */
    disabled?: boolean;
    /**
     * Флаг множественного выбора
     */
    multiple?: boolean;
    /**
     * Компонент пункта меню
     */
    Checkmark?: FC<CheckmarkProps>;
    /**
     * Внутренние свойства, которые должны быть установлены компоненту.
     */
    innerProps: {
        id: string;
        onClick: (event: MouseEvent<HTMLDivElement>) => void;
        onMouseDown: (event: MouseEvent<HTMLDivElement>) => void;
        onMouseMove: (event: MouseEvent<HTMLDivElement>) => void;
        role: string;
    } & RefAttributes<HTMLDivElement> & AriaAttributes;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    dataTestId?: string;
};
type CheckmarkProps = {
    /**
     * Флаг, данный пункт выбран
     */
    selected?: boolean;
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Флаг множественного выбора
     */
    multiple?: boolean;
    /**
     * Расположение отметки
     */
    position?: "before" | "after";
};
type BaseFieldProps = FieldProps;
type FieldProps$0 = Omit<BaseFieldProps, 'size' | 'hint' | 'success' | 'error' | 'placeholder'> & ButtonProps & {
    buttonSize?: PickerButtonSize;
};
declare const Field: ({ buttonSize, view, label, open, multiple, rightAddons, Arrow, innerProps, className, selected, selectedMultiple, valueRenderer, ...restProps }: FieldProps$0) => JSX.Element;
export { Field };
