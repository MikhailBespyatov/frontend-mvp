// Generated by dts-bundle-generator v6.12.0

/**
 * Возвращает 4 последние цифры номера счёта в формате `··XXXX`
 */
export declare function cropAccountNumber(accountNumber: string): string;
/**
 * Возвращает отформатированное значение счёта.
 * Разделяет пробелами число на группы.
 * XXXXX XXX X XXXX XXXXXXX
 *
 * @param value Номер счёта.
 */
export declare function formatAccount(value: string): string;
declare const CURRENCY_SYMBOLS: {
	ALL: string;
	AFN: string;
	ARS: string;
	AWG: string;
	AUD: string;
	AZN: string;
	BSD: string;
	BBD: string;
	BYN: string;
	BZD: string;
	BMD: string;
	BOB: string;
	BOV: string;
	BAM: string;
	BWP: string;
	BGN: string;
	BRL: string;
	BND: string;
	KHR: string;
	CAD: string;
	KYD: string;
	CLP: string;
	CNY: string;
	COP: string;
	COU: string;
	CRC: string;
	HRK: string;
	CUP: string;
	CUC: string;
	CZK: string;
	DKK: string;
	DOP: string;
	XCD: string;
	EGP: string;
	SVC: string;
	EEK: string;
	EUR: string;
	FKP: string;
	FJD: string;
	FRF: string;
	GHC: string;
	GIP: string;
	GTQ: string;
	GGP: string;
	GYD: string;
	HNL: string;
	HKD: string;
	HUF: string;
	ISK: string;
	INR: string;
	IDR: string;
	IRR: string;
	IMP: string;
	ILS: string;
	JMD: string;
	JPY: string;
	JEP: string;
	KZT: string;
	KGS: string;
	LAK: string;
	LVL: string;
	LBP: string;
	LRD: string;
	LTL: string;
	MKD: string;
	MYR: string;
	MUR: string;
	MXN: string;
	MXV: string;
	MNT: string;
	MZN: string;
	NAD: string;
	NPR: string;
	ANG: string;
	NZD: string;
	NIO: string;
	NGN: string;
	KPW: string;
	NOK: string;
	OMR: string;
	PKR: string;
	PAB: string;
	PYG: string;
	PEN: string;
	PHP: string;
	PLN: string;
	QAR: string;
	RON: string;
	RUR: string;
	RUB: string;
	SHP: string;
	SAR: string;
	RSD: string;
	SCR: string;
	SGD: string;
	SBD: string;
	SOS: string;
	ZAR: string;
	KRW: string;
	LKR: string;
	SEK: string;
	CHF: string;
	SRD: string;
	SYP: string;
	TWD: string;
	THB: string;
	TTD: string;
	TRY: string;
	TRL: string;
	TVD: string;
	UAH: string;
	GBP: string;
	USD: string;
	UYU: string;
	UYI: string;
	UZS: string;
	VEF: string;
	VND: string;
	YER: string;
	ZWD: string;
	A98: string;
	A99: string;
	A76: string;
	A33: string;
	AMD: string;
	BDT: string;
	BIF: string;
	GEL: string;
	GHS: string;
	SDG: string;
};
export declare type CurrencyCodes = keyof typeof CURRENCY_SYMBOLS;
export declare const NEGATIVE_SYMBOLS: {
	/** Unicode: U+2212. An arithmetic operator */
	"minus-sign": string;
	/** Unicode: U+002D. The Ascii hyphen. Used in inputs */
	"hyphen-minus": string;
};
export declare type NegativeSymbols = keyof typeof NEGATIVE_SYMBOLS;
export declare const THINSP: string;
export declare const AMOUNT_MAJOR_MINOR_PARTS_SEPARATOR = ",";
export declare type AmountType = {
	/**
	 * Денежное значение в минорных единицах
	 */
	value: number;
	/**
	 * Валюта
	 */
	currency?: CurrencyCodes;
	/**
	 * Количество минорных единиц в валюте
	 */
	minority: number;
	/**
	 * default - minus-sign (U+2212).
	 * Символ минуса, используемый для отображения отрицательных значений
	 */
	negativeSymbol?: NegativeSymbols;
	/**
	 * default - не отображаем копейки, если их значение 0.
	 * withZeroMinorPart - отображаем копейки, даже если их значение равно 0
	 */
	view?: "default" | "withZeroMinorPart";
};
/**
 * Форматирует значение суммы
 * согласно гайдлайну https://design.alfabank.ru/patterns/amount
 */
export declare const formatAmount: ({ value, currency, minority, view, negativeSymbol, }: AmountType) => {
	majorPart: string;
	minorPart: string;
	formatted: string;
	currencySymbol: string;
	formattedWithCurrency: string;
};
export declare type FileSize = string | number;
/**
 * Возвращает отформатированное значение размера файла.
 * Разделяет пробелом число и единицу измерения.
 *
 * Примеры:
 * 976.56 KB,
 * 1000 B,
 * 93.13 GB,
 * 99+ GB - Если файл превышает 99 GB,
 * 0 B - Если приходит строка, которую невозможно привести к числу
 */
export declare const formatFileSize: (fileSize: FileSize) => string;
declare function maskPhoneNumber(number: string): string;
export declare const phoneNumber: {
	format: (phone: string) => string;
	getRaw: (phone: string) => string;
	mask: typeof maskPhoneNumber;
};
export declare function getAllCurrencyCodes(): string[];
export declare type Country = {
	name: string;
	iso2: string;
	dialCode: string;
	priority?: number;
	areaCodes: string[] | null;
};
export declare type CountriesHash = {
	[iso2: string]: Country;
};
export declare const getCountries: () => Country[];
export declare const getCountriesHash: () => CountriesHash;
/**
 * Возвращает знак валюты по ISO коду.
 *
 * @param currencyCode Код валюты.
 */
export declare const getCurrencySymbol: (currencyCode: CurrencyCodes) => string;
/**
 * Возвращает `true`, если элемент переполнен
 * @param element HTML-элемент
 */
export declare function isOverflown(element: HTMLElement): boolean;
export declare function pluralize(number: number, one: string, two: string, five: string): string;
/**
 * Приводит секунды к формату `hh:mm:ss` и возвращает объект с ними.
 */
export declare function secondsToTime(seconds: number): {
	hours: string;
	minutes: string;
	seconds: string;
};
/**
 * Дробит мажорную часть суммы на части по указанному символу.
 *
 * @param amount Сумма для разбивки на части
 * @param partSize Размер частей суммы
 * @param splitter Символ, разбивающий части суммы
 * @param splitFrom Длина суммы, начиная с которой необходимо осуществлять разбивку. По-умолчанию длина
 * равняется пяти по требованию гайдлайнов: https://design.alfabank.ru/patterns/amount. Пример: 2900 - не разбивается,
 * 29 000 - разбивается.
 */
export declare const splitAmount: (amount: string, partSize: number | undefined, splitter: string, splitFrom?: number) => string;
/**
 * Возвращает true/false при проверке номера валидности карты по алгоритму Луна
 */
export declare const isValidCardNumber: (setValue: string) => boolean;
/**
 *  Возвращает true для валидного email, иначе false
 *
 * @param email Строка содержащая email
 */
export declare function isValidEmail(email: string): boolean;
export interface IKeyboardsLayouts {
	[key: string]: string[];
	en: string[];
	ru: string[];
}
export interface IKeyboardsLanguages {
	[key: string]: RegExp;
	en: RegExp;
	ru: RegExp;
}
export declare const keyboardsLayouts: IKeyboardsLayouts;
/** regex для раскладок клавиатуры */
export declare const keyboardLanguages: IKeyboardsLanguages;
/**
 * Проверяет строку на совпадение с раскладкой клавиатуры.
 */
export declare function isKeyboardLayout(string: string, keyboardAlias: string): boolean;
/**
 * Конвертирует символы из одной раскладки в другую.
 */
export declare function keyboardSwitcher(characters?: string, from?: string, to?: string): string;
export declare function switchToKeyboard(characters: string, keyboardAlias: string): string;
/**
 * Автоматически переводит английскую раскладку на русскую при вводе пользователем.
 */
export declare const formatToRussian: (value?: string | undefined) => string;
/**
 * Возвращает TRUE, если проскролено до низа страницы
 */
export declare function hasScrolledToBottomOfPage(): boolean;
export declare type Data = Record<string, unknown> | unknown[];
export declare type NodeNames = ReadonlyArray<string | number | null | undefined>;
export declare type ReplaceValue = string | number | boolean | null;
export declare type Replacer = ((value: unknown) => ReplaceValue) | ReplaceValue;
export declare type TransformConfig = {
	replace?: Record<string, Replacer>;
	filter?: string[];
};
/**
 *  Преобразование полей объекта на основе конфига
 *
 * @param data {Object|Array} данные для преобразования
 * @param config {TransformConfig} конфиг с функциями преобразования и путей для фильтра
 */
export declare const transformData: (data: Data, config: TransformConfig) => Data;
export declare const transformDataUtils: {
	getReplaceValue: <T>(value: T, replacer?: Replacer | undefined) => (string | number | boolean | null) | T;
	isReplacer: (replacer: unknown) => replacer is Replacer;
	nodeNamesToPath: (nodeNames: NodeNames) => string;
	prepareConfig: ({ replace: replaceConfig, filter: filterConfig, }: TransformConfig) => {
		replaceConfig: Record<string, Replacer>;
		filterConfig: Record<string, true>;
	};
};

export {};
